
pruba_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  000001e8  0000025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000071  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000248  00000000  00000000  000002f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000188  00000000  00000000  0000053d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001a6  00000000  00000000  000006c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  0000086c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000fb  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000041  00000000  00000000  000009c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  6c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_27>
  70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  8c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  90:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  94:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  98:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  9c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  ac:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  bc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  cc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  dc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  e0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 ee       	ldi	r30, 0xE8	; 232
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 30       	cpi	r26, 0x08	; 8
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	0e 94 c3 00 	call	0x186	; 0x186 <main>
 112:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <_exit>

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <uart_init>:

 void uart_init(uint8_t com){
	 
	//uint8_t *regA= (&UCSR0A + (com*8)); //estamos haceindo referencia hacia la direccion en donde esta UCSR0A que es donde empieza el UART0
	
	 UART_Regs_t *myUART =usart_offset[com];
 11a:	e8 2f       	mov	r30, r24
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	ee 0f       	add	r30, r30
 120:	ff 1f       	adc	r31, r31
 122:	e0 50       	subi	r30, 0x00	; 0
 124:	fe 4f       	sbci	r31, 0xFE	; 254
 126:	01 90       	ld	r0, Z+
 128:	f0 81       	ld	r31, Z
 12a:	e0 2d       	mov	r30, r0

	
	myUART->UCSRA = 1<<U2X0; 
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	80 83       	st	Z, r24
	
	myUART->UCSRB= 3 << TXEN0; 
 130:	88 e1       	ldi	r24, 0x18	; 24
 132:	81 83       	std	Z+1, r24	; 0x01
	
	myUART->UCSRC= (3<< UCSZ00) |(3<<UPM00) ; // stop bit, pridad impar no se toca. 6 bits, paridad impar, asioncrono, 1 stop bit
 134:	86 e3       	ldi	r24, 0x36	; 54
 136:	82 83       	std	Z+2, r24	; 0x02
	
	
	myUART->UBRR=131; //PUEDE SER DE parte alta o parte baja */
 138:	83 e8       	ldi	r24, 0x83	; 131
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	95 83       	std	Z+5, r25	; 0x05
 13e:	84 83       	std	Z+4, r24	; 0x04
	
	//clase 27 marzo interrupciones 
	sei(); //habilita las interupciones, enable global interrumpt
 140:	78 94       	sei
	
	//qaue el periferico tiene activado las banderas de las interrupciones 
	
	myUART->UCSRB |= (3<<TXCIE0); //habilita las interrupciones del periferico 
 142:	81 81       	ldd	r24, Z+1	; 0x01
 144:	80 6c       	ori	r24, 0xC0	; 192
 146:	81 83       	std	Z+1, r24	; 0x01
	
	
	
	

}
 148:	08 95       	ret

0000014a <__vector_27>:
//macro ISR
//clase 27 de maroz, numeor de vector, este sera el numero -1, mapeo podemos encontrar en dependencias externas, ioxm... 
//el nombre del vector este hace refencia a la direccion del vector de interrupcion
ISR(USART0_TX_vect){
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	8f 93       	push	r24
	
	//ISR code 
	//togglear un led PJ4
	PINJ = 1<<PJ4; //si se escribe un 1 se togglea 
 156:	80 e1       	ldi	r24, 0x10	; 16
 158:	80 93 03 01 	sts	0x0103, r24
	
	
}
 15c:	8f 91       	pop	r24
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <UART3_WriteByte>:


//calcular el baud colose match en la tabla 22-1 


void UART3_WriteByte(uint8_t data){
 168:	98 2f       	mov	r25, r24
	
	//verificamos si el bit del transmition complete esta set quiere decir que ya hubo una transferencia
	while(!(UCSR2A & (1<< UDRE3)))
 16a:	80 91 d0 00 	lds	r24, 0x00D0
 16e:	85 ff       	sbrs	r24, 5
 170:	fc cf       	rjmp	.-8      	; 0x16a <UART3_WriteByte+0x2>
		;
		
	UDR2 = data;
 172:	90 93 d6 00 	sts	0x00D6, r25
		
	
	
	
	
}
 176:	08 95       	ret

00000178 <UART3_ReadByte>:

uint8_t UART3_ReadByte(void){
	
	while(!(UCSR2A & (1<< RXC0)))
 178:	80 91 d0 00 	lds	r24, 0x00D0
 17c:	87 ff       	sbrs	r24, 7
 17e:	fc cf       	rjmp	.-8      	; 0x178 <UART3_ReadByte>
		;
	return UDR2;
 180:	80 91 d6 00 	lds	r24, 0x00D6
	
	
}
 184:	08 95       	ret

00000186 <main>:

int main(void){
	
	
	//UART3 esta en el pin PJ1 -PJ2 
	DDRJ=1<<PJ4;
 186:	80 e1       	ldi	r24, 0x10	; 16
 188:	80 93 04 01 	sts	0x0104, r24
	
	uart_init(0);
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	0e 94 8d 00 	call	0x11a	; 0x11a <uart_init>


void UART3_WriteByte(uint8_t data){
	
	//verificamos si el bit del transmition complete esta set quiere decir que ya hubo una transferencia
	while(!(UCSR2A & (1<< UDRE3)))
 192:	80 91 d0 00 	lds	r24, 0x00D0
 196:	85 ff       	sbrs	r24, 5
 198:	fc cf       	rjmp	.-8      	; 0x192 <main+0xc>
		;
		
	UDR2 = data;
 19a:	88 e4       	ldi	r24, 0x48	; 72
 19c:	80 93 d6 00 	sts	0x00D6, r24


void UART3_WriteByte(uint8_t data){
	
	//verificamos si el bit del transmition complete esta set quiere decir que ya hubo una transferencia
	while(!(UCSR2A & (1<< UDRE3)))
 1a0:	80 91 d0 00 	lds	r24, 0x00D0
 1a4:	85 ff       	sbrs	r24, 5
 1a6:	fc cf       	rjmp	.-8      	; 0x1a0 <main+0x1a>
		;
		
	UDR2 = data;
 1a8:	8f e4       	ldi	r24, 0x4F	; 79
 1aa:	80 93 d6 00 	sts	0x00D6, r24


void UART3_WriteByte(uint8_t data){
	
	//verificamos si el bit del transmition complete esta set quiere decir que ya hubo una transferencia
	while(!(UCSR2A & (1<< UDRE3)))
 1ae:	80 91 d0 00 	lds	r24, 0x00D0
 1b2:	85 ff       	sbrs	r24, 5
 1b4:	fc cf       	rjmp	.-8      	; 0x1ae <main+0x28>
		;
		
	UDR2 = data;
 1b6:	8c e4       	ldi	r24, 0x4C	; 76
 1b8:	80 93 d6 00 	sts	0x00D6, r24


void UART3_WriteByte(uint8_t data){
	
	//verificamos si el bit del transmition complete esta set quiere decir que ya hubo una transferencia
	while(!(UCSR2A & (1<< UDRE3)))
 1bc:	80 91 d0 00 	lds	r24, 0x00D0
 1c0:	85 ff       	sbrs	r24, 5
 1c2:	fc cf       	rjmp	.-8      	; 0x1bc <main+0x36>
		;
		
	UDR2 = data;
 1c4:	81 e4       	ldi	r24, 0x41	; 65
 1c6:	80 93 d6 00 	sts	0x00D6, r24
	
}

uint8_t UART3_ReadByte(void){
	
	while(!(UCSR2A & (1<< RXC0)))
 1ca:	80 91 d0 00 	lds	r24, 0x00D0
 1ce:	87 ff       	sbrs	r24, 7
 1d0:	fc cf       	rjmp	.-8      	; 0x1ca <main+0x44>
		;
	return UDR2;
 1d2:	90 91 d6 00 	lds	r25, 0x00D6


void UART3_WriteByte(uint8_t data){
	
	//verificamos si el bit del transmition complete esta set quiere decir que ya hubo una transferencia
	while(!(UCSR2A & (1<< UDRE3)))
 1d6:	80 91 d0 00 	lds	r24, 0x00D0
 1da:	85 ff       	sbrs	r24, 5
 1dc:	fc cf       	rjmp	.-8      	; 0x1d6 <main+0x50>
		;
		
	UDR2 = data;
 1de:	90 93 d6 00 	sts	0x00D6, r25
 1e2:	f3 cf       	rjmp	.-26     	; 0x1ca <main+0x44>

000001e4 <_exit>:
 1e4:	f8 94       	cli

000001e6 <__stop_program>:
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <__stop_program>
