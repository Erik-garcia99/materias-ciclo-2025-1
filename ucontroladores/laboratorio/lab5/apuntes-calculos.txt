-empecemos con como vamo a poner para que cada configruarion de los diferentes modos 

anodo +
catodo -

--arreglo para DDRF - PORTF

-los puertos 0 - 3 deben de estar como salida ambos, solos e les pone por medio de port 0 o 1 dependeindo de lo que se espera para un wait

PORT al PIN se le escribe un 1 logico cunado esta configurado como INPUT y los pull ups activados 
si se le apagan los pull ups, si se les escribe un 0 o esta confiturado como salida 

DDRx = 0 se configura el pin como entrada 
DDRx = 1 se configura como salida el pin


como funciona un enum que la forma en como esta cambiando los estados de los leds es mediante un enum 

links: https://learn.microsoft.com/es-es/cpp/c-language/c-enumeration-declarations?view=msvc-170
https://www.tutorialesprogramacionya.com/cya/detalleconcepto.php?punto=63&codigo=63&inicio=60
https://www.ibm.com/docs/es/i/7.5.0?topic=enumerations-enumeration-type-definition


un enum es un tipo de dato que creamso asociando un conjunto de enteros con un conjuto de literales

ejmp: 

enum operaciones { suma, resta, multiplicacion, divicion};

dentro de las llaves indicamoas todas los valroes que puede almacenra una varibale de ese tipo 

la primer linetar toma el valro de 0, luego 1, y asi susecivamente


OOOOOOOoOOoOOoOoOOOOOOO e sido iluminado por el altisimo 

los ENUM, no es que estan asociados a alguna arreglo o estrucutra 
lo que hacen es en vez de poner en un arreglo algun numero X o asi 
por ejemplo en un ciclo y buscando un indice lo que se hace 

es mediaante un enum le asignamso un nombre descripctivo a esa literal o variable que estamos buscando 
lo que hace el codigo mas legible, remplaza ese numero por una texto legible que se enteinda a lo que se esta haceindo referencia cunado se esta llamando 




-----------------------------------------
12 de abril

primero con lo mas simple, hagamos la configuracion con lo que sabemos que con esa configuracion
se prende el led, 1 LED, podemos poner la configuracion de 1 con un delay de cambio muy pequenio el cual



---------------------------------

uniones (typedef union)
en una union, es un tipo de dato definido por le programador el cual consta que todos sus miembros tienen la misma 
ubicacion en memoria, sin importar cuantos elementos estos tenga, su tamanio de define por el miembro mas grande. 


---------------------------------------

que se necesita para prender cada led, su configuracion de DDRx y PORTx



       DDRF                     PORTF
LED1    0100 0011(0x43)     |   0100 0010(0x42)
LED2    0100 0011(0x43)     |   0100 0001(0x41)
LED3    0100 0110(0x46)     |   0100 0100(0x44)
LED4    0100 0110(0x46)     |   0100 0010(0x42)
LED5    0100 0101(0x45)     |   0100 0001(0x41)
LED6    0100 0101(0x45)     |   0100 0100(0x44)
LED7    0100 1100(0x4C)     |   0100 1000(0x48)
LED8    0100 1100(0x4C)     |   0100 0100(0x44)


------------------------------

SECUENCIA DE WAIT : 


volatile uint8_t indice=0;

	while(1){
	
		while(indice<8){
			
			
			DDRF  = _CONF_DDR[indice];
			PORTF = _CONF_PORT[indice];
			delay(100);
			indice++;

		
		}

		indice=0;
	}
	
	
-------------------------------------------

que lee PIN cunado no hay nada conectado 
el pin tiene un valor por defecto de HIGH (alto) no presionado, por lo que si quiero leer el pin 
que me diga si no esta presionado haga esot, entonces debo de negar la entrada de la lectura del PIN 




-------------------------------------------------

0100 0010(0x42)
0100 0001(0x41)
0100 0100(0x44)
0100 0010(0x42)
0100 0001(0x41)
0100 0100(0x44)
0100 1000(0x48)
0100 0100(0x44)



-cunado se esta leyendo un pin siempre esta leyendo 1 si tenemos un pull up activado,

asi que como saber 


------------------------------------------------------------

debemos de hacer unos cambios aqui, en DDRF esta bien la parte alta, tenemos a PF7 como entrada y PF6 como salida, este cambia se hace por: 

Configuración Correcta de los Pines:
PF7 (Entrada con Pull-Up):

DDRF &= ~(1 << PF7); // PF7 como entrada.

PORTF |= (1 << PF7); // Activar pull-up interno en PF7.

PF6 (Salida en Bajo):

DDRF |= (1 << PF6); // PF6 como salida.

PORTF &= ~(1 << PF6); // PF6 en LOW (0).

Comportamiento del Circuito:
Botón no presionado:

PF7 (entrada con pull-up) lee HIGH (1).

PF6 (salida en bajo) está en LOW (0).

Botón presionado:

Al presionar el botón, PF7 se conecta a PF6 (LOW).

PF7 lee LOW (0) debido al cortocircuito con PF6.



por lo que en PF6 para PORTF 0, y PF7 1 para que este activado el pull up interno 

       DDRF                     PORTF
LED1    0100 0011(0x43)     |   1000 0010(0x82)
LED2    0100 0011(0x43)     |   1000 0001(0x81)
LED3    0100 0110(0x46)     |   1000 0100(0x84)
LED4    0100 0110(0x46)     |   1000 0010(0x82)
LED5    0100 0101(0x45)     |   1000 0001(0x81)
LED6    0100 0101(0x45)     |   1000 0100(0x84)
LED7    0100 1100(0x4C)     |   1000 1000(0x88)
LED8    0100 1100(0x4C)     |   1000 0100(0x84)




----------------------------------------------------