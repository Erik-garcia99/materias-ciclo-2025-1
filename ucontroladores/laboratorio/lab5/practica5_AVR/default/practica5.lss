
practica5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800200  0000064c  000006e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000064c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080021e  0080021e  000006fe  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000700  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000ad  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003cf  00000000  00000000  000007ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000172  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000043a  00000000  00000000  00000d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00001168  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000224  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a7  00000000  00000000  0000142c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e4       	ldi	r30, 0x4C	; 76
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 31       	cpi	r26, 0x1E	; 30
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	ae e1       	ldi	r26, 0x1E	; 30
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 32       	cpi	r26, 0x22	; 34
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 9f 01 	call	0x33e	; 0x33e <main>
 122:	0c 94 24 03 	jmp	0x648	; 0x648 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <InitPorts>:
}

void InitPorts(void) //Inicializacion requerida de los puertos utilizados en esta practica. 
                    //El pin PE1 debe dejarse en un nivel alto.
{   //Configurar PK0 como entrada y activar 
    DDRF &= ~(1 << BTN_PIN);    // Boton en PK0 como entrada. 0 = ENTRADA
 12a:	87 98       	cbi	0x10, 7	; 16
    DDRF |= (1 << PF6);
 12c:	86 9a       	sbi	0x10, 6	; 16
    PORTF |= (1 << PF6);
 12e:	8e 9a       	sbi	0x11, 6	; 17

    DDRE |= (1 << SEND_PIN); //Activar en PE1 como salida. 1 = SALIDA
 130:	69 9a       	sbi	0x0d, 1	; 13
    SetBitPort(PORTE,1);   //Poner en alto nivel al pin PE1. Usando la macro SetBirPort
 132:	71 9a       	sbi	0x0e, 1	; 14
}
 134:	08 95       	ret

00000136 <fEndCount>:
    // Espera 100 ms antes de cambiar al siguiente patron
    delay(100);
}

void fEndCount(void){
  DDRF = 0x40;
 136:	80 e4       	ldi	r24, 0x40	; 64
 138:	80 bb       	out	0x10, r24	; 16
  PORTF = 0x40;
 13a:	81 bb       	out	0x11, r24	; 17
}
 13c:	08 95       	ret

0000013e <fYouWin>:
            delay(2);  // Peque?o retardo entre cada LED
        }
    }
}

void fYouWin(void){
 13e:	ef 92       	push	r14
 140:	ff 92       	push	r15
 142:	0f 93       	push	r16
 144:	1f 93       	push	r17
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	00 e0       	ldi	r16, 0x00	; 0
 14c:	10 e0       	ldi	r17, 0x00	; 0
 14e:	14 c0       	rjmp	.+40     	; 0x178 <fYouWin+0x3a>
          for (uint16_t conter = 0; conter <7; conter++){
                  for (uint8_t i = 0; i < 8; i++) {
                  DDRF = DDRs[i];    // Configura direccion (sin desplazamiento)
 150:	88 81       	ld	r24, Y
 152:	80 bb       	out	0x10, r24	; 16
                  PORTF = leds[i];  // Establece valores LED (sin desplazamiento)
 154:	f7 01       	movw	r30, r14
 156:	81 91       	ld	r24, Z+
 158:	7f 01       	movw	r14, r30
 15a:	81 bb       	out	0x11, r24	; 17
                  delay(2);       // Retardo aumentado para mejor visualizacion
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 10 02 	call	0x420	; 0x420 <delay>
 164:	22 96       	adiw	r28, 0x02	; 2
    }
}

void fYouWin(void){
          for (uint16_t conter = 0; conter <7; conter++){
                  for (uint8_t i = 0; i < 8; i++) {
 166:	f2 e0       	ldi	r31, 0x02	; 2
 168:	c8 31       	cpi	r28, 0x18	; 24
 16a:	df 07       	cpc	r29, r31
 16c:	89 f7       	brne	.-30     	; 0x150 <fYouWin+0x12>
        }
    }
}

void fYouWin(void){
          for (uint16_t conter = 0; conter <7; conter++){
 16e:	0f 5f       	subi	r16, 0xFF	; 255
 170:	1f 4f       	sbci	r17, 0xFF	; 255
 172:	07 30       	cpi	r16, 0x07	; 7
 174:	11 05       	cpc	r17, r1
 176:	39 f0       	breq	.+14     	; 0x186 <fYouWin+0x48>
 178:	c8 e0       	ldi	r28, 0x08	; 8
 17a:	d2 e0       	ldi	r29, 0x02	; 2
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	e8 2e       	mov	r14, r24
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	f8 2e       	mov	r15, r24
 184:	e5 cf       	rjmp	.-54     	; 0x150 <fYouWin+0x12>
    // Espera 100 ms antes de cambiar al siguiente patron
    delay(100);
}

void fEndCount(void){
  DDRF = 0x40;
 186:	80 e4       	ldi	r24, 0x40	; 64
 188:	80 bb       	out	0x10, r24	; 16
  PORTF = 0x40;
 18a:	81 bb       	out	0x11, r24	; 17
                  PORTF = leds[i];  // Establece valores LED (sin desplazamiento)
                  delay(2);       // Retardo aumentado para mejor visualizacion
                  };       // Retardo aumentado para mejor visualizacion
            }
          fEndCount();
          delay(250);
 18c:	8a ef       	ldi	r24, 0xFA	; 250
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 10 02 	call	0x420	; 0x420 <delay>
}
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	ff 90       	pop	r15
 19e:	ef 90       	pop	r14
 1a0:	08 95       	ret

000001a2 <fYouLoose>:
void fEndCount(void){
  DDRF = 0x40;
  PORTF = 0x40;
}

void fYouLoose(void){
 1a2:	df 92       	push	r13
 1a4:	ef 92       	push	r14
 1a6:	ff 92       	push	r15
 1a8:	0f 93       	push	r16
 1aa:	1f 93       	push	r17
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	c0 e0       	ldi	r28, 0x00	; 0
 1b2:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t counter;
    // Mostrar primeros 4 LEDs por 500 ms
    for (counter = 0; counter < 13; counter++) {
        for (uint8_t i = 0; i < 4; i++) {
            DDRF = DDRs[i];
 1b4:	63 e4       	ldi	r22, 0x43	; 67
 1b6:	f6 2e       	mov	r15, r22
            PORTF = leds[i];
 1b8:	02 e4       	ldi	r16, 0x42	; 66
 1ba:	51 e4       	ldi	r21, 0x41	; 65
 1bc:	d5 2e       	mov	r13, r21
void fYouLoose(void){
  uint16_t counter;
    // Mostrar primeros 4 LEDs por 500 ms
    for (counter = 0; counter < 13; counter++) {
        for (uint8_t i = 0; i < 4; i++) {
            DDRF = DDRs[i];
 1be:	16 e4       	ldi	r17, 0x46	; 70
            PORTF = leds[i];
 1c0:	44 e4       	ldi	r20, 0x44	; 68
 1c2:	e4 2e       	mov	r14, r20
void fYouLoose(void){
  uint16_t counter;
    // Mostrar primeros 4 LEDs por 500 ms
    for (counter = 0; counter < 13; counter++) {
        for (uint8_t i = 0; i < 4; i++) {
            DDRF = DDRs[i];
 1c4:	f0 ba       	out	0x10, r15	; 16
            PORTF = leds[i];
 1c6:	01 bb       	out	0x11, r16	; 17
            delay(2);  // Peque?o retardo entre cada LED
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 10 02 	call	0x420	; 0x420 <delay>
void fYouLoose(void){
  uint16_t counter;
    // Mostrar primeros 4 LEDs por 500 ms
    for (counter = 0; counter < 13; counter++) {
        for (uint8_t i = 0; i < 4; i++) {
            DDRF = DDRs[i];
 1d0:	f0 ba       	out	0x10, r15	; 16
            PORTF = leds[i];
 1d2:	d1 ba       	out	0x11, r13	; 17
            delay(2);  // Peque?o retardo entre cada LED
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 10 02 	call	0x420	; 0x420 <delay>
void fYouLoose(void){
  uint16_t counter;
    // Mostrar primeros 4 LEDs por 500 ms
    for (counter = 0; counter < 13; counter++) {
        for (uint8_t i = 0; i < 4; i++) {
            DDRF = DDRs[i];
 1dc:	10 bb       	out	0x10, r17	; 16
            PORTF = leds[i];
 1de:	e1 ba       	out	0x11, r14	; 17
            delay(2);  // Peque?o retardo entre cada LED
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 10 02 	call	0x420	; 0x420 <delay>
void fYouLoose(void){
  uint16_t counter;
    // Mostrar primeros 4 LEDs por 500 ms
    for (counter = 0; counter < 13; counter++) {
        for (uint8_t i = 0; i < 4; i++) {
            DDRF = DDRs[i];
 1e8:	10 bb       	out	0x10, r17	; 16
            PORTF = leds[i];
 1ea:	01 bb       	out	0x11, r16	; 17
            delay(2);  // Peque?o retardo entre cada LED
 1ec:	82 e0       	ldi	r24, 0x02	; 2
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 10 02 	call	0x420	; 0x420 <delay>
}

void fYouLoose(void){
  uint16_t counter;
    // Mostrar primeros 4 LEDs por 500 ms
    for (counter = 0; counter < 13; counter++) {
 1f4:	21 96       	adiw	r28, 0x01	; 1
 1f6:	cd 30       	cpi	r28, 0x0D	; 13
 1f8:	d1 05       	cpc	r29, r1
 1fa:	21 f7       	brne	.-56     	; 0x1c4 <fYouLoose+0x22>
 1fc:	c0 e0       	ldi	r28, 0x00	; 0
 1fe:	d0 e0       	ldi	r29, 0x00	; 0
    }

    // Mostrar altimos 4 LEDs por 500 ms
    for (counter = 0; counter < 13; counter++) {
        for (uint8_t i = 4; i < 8; i++) {
            DDRF = DDRs[i];
 200:	35 e4       	ldi	r19, 0x45	; 69
 202:	f3 2e       	mov	r15, r19
            PORTF = leds[i];
 204:	21 e4       	ldi	r18, 0x41	; 65
 206:	d2 2e       	mov	r13, r18
 208:	04 e4       	ldi	r16, 0x44	; 68
    }

    // Mostrar altimos 4 LEDs por 500 ms
    for (counter = 0; counter < 13; counter++) {
        for (uint8_t i = 4; i < 8; i++) {
            DDRF = DDRs[i];
 20a:	1c e4       	ldi	r17, 0x4C	; 76
            PORTF = leds[i];
 20c:	98 e4       	ldi	r25, 0x48	; 72
 20e:	e9 2e       	mov	r14, r25
    }

    // Mostrar altimos 4 LEDs por 500 ms
    for (counter = 0; counter < 13; counter++) {
        for (uint8_t i = 4; i < 8; i++) {
            DDRF = DDRs[i];
 210:	f0 ba       	out	0x10, r15	; 16
            PORTF = leds[i];
 212:	d1 ba       	out	0x11, r13	; 17
            delay(2);  // Peque?o retardo entre cada LED
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 10 02 	call	0x420	; 0x420 <delay>
    }

    // Mostrar altimos 4 LEDs por 500 ms
    for (counter = 0; counter < 13; counter++) {
        for (uint8_t i = 4; i < 8; i++) {
            DDRF = DDRs[i];
 21c:	f0 ba       	out	0x10, r15	; 16
            PORTF = leds[i];
 21e:	01 bb       	out	0x11, r16	; 17
            delay(2);  // Peque?o retardo entre cada LED
 220:	82 e0       	ldi	r24, 0x02	; 2
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 10 02 	call	0x420	; 0x420 <delay>
    }

    // Mostrar altimos 4 LEDs por 500 ms
    for (counter = 0; counter < 13; counter++) {
        for (uint8_t i = 4; i < 8; i++) {
            DDRF = DDRs[i];
 228:	10 bb       	out	0x10, r17	; 16
            PORTF = leds[i];
 22a:	e1 ba       	out	0x11, r14	; 17
            delay(2);  // Peque?o retardo entre cada LED
 22c:	82 e0       	ldi	r24, 0x02	; 2
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 10 02 	call	0x420	; 0x420 <delay>
    }

    // Mostrar altimos 4 LEDs por 500 ms
    for (counter = 0; counter < 13; counter++) {
        for (uint8_t i = 4; i < 8; i++) {
            DDRF = DDRs[i];
 234:	10 bb       	out	0x10, r17	; 16
            PORTF = leds[i];
 236:	01 bb       	out	0x11, r16	; 17
            delay(2);  // Peque?o retardo entre cada LED
 238:	82 e0       	ldi	r24, 0x02	; 2
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 10 02 	call	0x420	; 0x420 <delay>
            delay(2);  // Peque?o retardo entre cada LED
        }
    }

    // Mostrar altimos 4 LEDs por 500 ms
    for (counter = 0; counter < 13; counter++) {
 240:	21 96       	adiw	r28, 0x01	; 1
 242:	cd 30       	cpi	r28, 0x0D	; 13
 244:	d1 05       	cpc	r29, r1
 246:	21 f7       	brne	.-56     	; 0x210 <fYouLoose+0x6e>
            DDRF = DDRs[i];
            PORTF = leds[i];
            delay(2);  // Peque?o retardo entre cada LED
        }
    }
}
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	1f 91       	pop	r17
 24e:	0f 91       	pop	r16
 250:	ff 90       	pop	r15
 252:	ef 90       	pop	r14
 254:	df 90       	pop	r13
 256:	08 95       	ret

00000258 <fWaitForStart>:
            fEndCount();               // Seguridad por si acaso
            break;
    }
}

void fWaitForStart(void){
 258:	0f 93       	push	r16
 25a:	1f 93       	push	r17
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	c8 e0       	ldi	r28, 0x08	; 8
 262:	d2 e0       	ldi	r29, 0x02	; 2
 264:	00 e0       	ldi	r16, 0x00	; 0
 266:	12 e0       	ldi	r17, 0x02	; 2
  for (uint8_t i = 0; i < 8; i++) {
  DDRF = DDRs[i];    // Configura direccion (sin desplazamiento)
 268:	88 81       	ld	r24, Y
 26a:	80 bb       	out	0x10, r24	; 16
  PORTF = leds[i];  // Establece valores LED (sin desplazamiento)
 26c:	f8 01       	movw	r30, r16
 26e:	81 91       	ld	r24, Z+
 270:	8f 01       	movw	r16, r30
 272:	81 bb       	out	0x11, r24	; 17
  delay(2);       // Retardo aumentado para mejor visualizacion
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 10 02 	call	0x420	; 0x420 <delay>
 27c:	22 96       	adiw	r28, 0x02	; 2
            break;
    }
}

void fWaitForStart(void){
  for (uint8_t i = 0; i < 8; i++) {
 27e:	f2 e0       	ldi	r31, 0x02	; 2
 280:	c8 31       	cpi	r28, 0x18	; 24
 282:	df 07       	cpc	r29, r31
 284:	89 f7       	brne	.-30     	; 0x268 <fWaitForStart+0x10>
  DDRF = DDRs[i];    // Configura direccion (sin desplazamiento)
  PORTF = leds[i];  // Establece valores LED (sin desplazamiento)
  delay(2);       // Retardo aumentado para mejor visualizacion
  }
}
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	1f 91       	pop	r17
 28c:	0f 91       	pop	r16
 28e:	08 95       	ret

00000290 <fStartCount>:

void fStartCount(void)
{
    static uint8_t seed = SEED;
    // Genera nuevo numero aleatorio
    seed = myRand( rand() );
 290:	0e 94 b8 02 	call	0x570	; 0x570 <rand>
 294:	0e 94 07 02 	call	0x40e	; 0x40e <myRand>
 298:	a8 2f       	mov	r26, r24
 29a:	80 93 18 02 	sts	0x0218, r24
    // Asegura un indice va?lido entre 0 y 7
    uint8_t index = seed % 8;

    // Configura la direccion del puerto y el valor del LED
    DDRF = DDRs[index];
 29e:	a7 70       	andi	r26, 0x07	; 7
 2a0:	b0 e0       	ldi	r27, 0x00	; 0
 2a2:	fd 01       	movw	r30, r26
 2a4:	ee 0f       	add	r30, r30
 2a6:	ff 1f       	adc	r31, r31
 2a8:	e8 5f       	subi	r30, 0xF8	; 248
 2aa:	fd 4f       	sbci	r31, 0xFD	; 253
 2ac:	80 81       	ld	r24, Z
 2ae:	80 bb       	out	0x10, r24	; 16
    PORTF = leds[index];
 2b0:	a0 50       	subi	r26, 0x00	; 0
 2b2:	be 4f       	sbci	r27, 0xFE	; 254
 2b4:	8c 91       	ld	r24, X
 2b6:	81 bb       	out	0x11, r24	; 17
    // Espera 100 ms antes de cambiar al siguiente patron
    delay(100);
 2b8:	84 e6       	ldi	r24, 0x64	; 100
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 10 02 	call	0x420	; 0x420 <delay>
}
 2c0:	08 95       	ret

000002c2 <updateLeds>:
    return eBtnUndefined; // Si nunca hubo un 1 en BTN_PIN
}

void updateLeds(uint8_t gameState)
{
    switch(gameState)
 2c2:	83 30       	cpi	r24, 0x03	; 3
 2c4:	c1 f0       	breq	.+48     	; 0x2f6 <updateLeds+0x34>
 2c6:	84 30       	cpi	r24, 0x04	; 4
 2c8:	28 f4       	brcc	.+10     	; 0x2d4 <updateLeds+0x12>
 2ca:	81 30       	cpi	r24, 0x01	; 1
 2cc:	41 f0       	breq	.+16     	; 0x2de <updateLeds+0x1c>
 2ce:	82 30       	cpi	r24, 0x02	; 2
 2d0:	91 f4       	brne	.+36     	; 0x2f6 <updateLeds+0x34>
 2d2:	08 c0       	rjmp	.+16     	; 0x2e4 <updateLeds+0x22>
 2d4:	85 30       	cpi	r24, 0x05	; 5
 2d6:	61 f0       	breq	.+24     	; 0x2f0 <updateLeds+0x2e>
 2d8:	86 30       	cpi	r24, 0x06	; 6
 2da:	69 f4       	brne	.+26     	; 0x2f6 <updateLeds+0x34>
 2dc:	06 c0       	rjmp	.+12     	; 0x2ea <updateLeds+0x28>
    {
        case eWaitForStart:
            fWaitForStart();       // Secuencia MSB a LSB
 2de:	0e 94 2c 01 	call	0x258	; 0x258 <fWaitForStart>
 2e2:	08 95       	ret
            break;

        case eStartCount:
            fStartCount();     // Aleatorio cada 100ms
 2e4:	0e 94 48 01 	call	0x290	; 0x290 <fStartCount>
 2e8:	08 95       	ret
        case eEndCount:
            fEndCount();               // Apaga todos
            break;

        case eYouLoose:
            fYouLoose();  // Nibble ON/OFF alternado
 2ea:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <fYouLoose>
 2ee:	08 95       	ret
            break;

        case eYouWin:
            fYouWin();          // Todos ON/OFF simultaneo
 2f0:	0e 94 9f 00 	call	0x13e	; 0x13e <fYouWin>
 2f4:	08 95       	ret
    // Espera 100 ms antes de cambiar al siguiente patron
    delay(100);
}

void fEndCount(void){
  DDRF = 0x40;
 2f6:	80 e4       	ldi	r24, 0x40	; 64
 2f8:	80 bb       	out	0x10, r24	; 16
  PORTF = 0x40;
 2fa:	81 bb       	out	0x11, r24	; 17
 2fc:	08 95       	ret

000002fe <check_Btn>:
    SetBitPort(PORTE,1);   //Poner en alto nivel al pin PE1. Usando la macro SetBirPort
}


uint8_t check_Btn(void)
{
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
    if ((PINF & (1 << BTN_PIN)))     // Si tenemos un 1 en BTN_PIN
 302:	7f 9b       	sbis	0x0f, 7	; 15
 304:	18 c0       	rjmp	.+48     	; 0x336 <check_Btn+0x38>
    {
        uint16_t cont = 0;          // Contador para validar si es Largo o Corto
        delay(30);                  // Esperamos al rebote
 306:	8e e1       	ldi	r24, 0x1E	; 30
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	0e 94 10 02 	call	0x420	; 0x420 <delay>
        if (!(PINF & (1 << BTN_PIN))) // Si despues del rebote ya no esta presionado
 30e:	7f 9b       	sbis	0x0f, 7	; 15
 310:	12 c0       	rjmp	.+36     	; 0x336 <check_Btn+0x38>
 312:	0b c0       	rjmp	.+22     	; 0x32a <check_Btn+0x2c>
        {
            return eBtnUndefined;     // No fue presionado realmente
        }
        while ((PINF & (1 << BTN_PIN))) // Mientras siga presionado
        {
            delay103uS();            // Esperamos 103 microsegundos
 314:	0e 94 2f 02 	call	0x45e	; 0x45e <delay103uS>
            cont++;                  // Contamos los ciclos
 318:	21 96       	adiw	r28, 0x01	; 1
            if (cont >= 9708)        // Si superamos el tiempo para 1 segundo
 31a:	85 e2       	ldi	r24, 0x25	; 37
 31c:	cc 3e       	cpi	r28, 0xEC	; 236
 31e:	d8 07       	cpc	r29, r24
 320:	31 f4       	brne	.+12     	; 0x32e <check_Btn+0x30>
            {
                while ((PINF & (1 << BTN_PIN))); // Esperamos que se suelte
 322:	7f 99       	sbic	0x0f, 7	; 15
 324:	fe cf       	rjmp	.-4      	; 0x322 <check_Btn+0x24>
 326:	82 e0       	ldi	r24, 0x02	; 2
 328:	07 c0       	rjmp	.+14     	; 0x338 <check_Btn+0x3a>
 32a:	c0 e0       	ldi	r28, 0x00	; 0
 32c:	d0 e0       	ldi	r29, 0x00	; 0
        delay(30);                  // Esperamos al rebote
        if (!(PINF & (1 << BTN_PIN))) // Si despues del rebote ya no esta presionado
        {
            return eBtnUndefined;     // No fue presionado realmente
        }
        while ((PINF & (1 << BTN_PIN))) // Mientras siga presionado
 32e:	7f 99       	sbic	0x0f, 7	; 15
 330:	f1 cf       	rjmp	.-30     	; 0x314 <check_Btn+0x16>
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	01 c0       	rjmp	.+2      	; 0x338 <check_Btn+0x3a>
 336:	80 e0       	ldi	r24, 0x00	; 0
            }
        }// Si salir del while antes de llegar a 9708 ciclos, fue corto
        return eBtnShortPressed;
    }
    return eBtnUndefined; // Si nunca hubo un 1 en BTN_PIN
}
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	08 95       	ret

0000033e <main>:

// Global variable
uint32_t millis;

int main(void)
{
 33e:	ef 92       	push	r14
 340:	ff 92       	push	r15
 342:	1f 93       	push	r17
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
    uint8_t  currentGameState = eGameRestart;
    uint16_t countdown = 0;
    uint16_t countup = 0;
    InitPorts();
 348:	0e 94 95 00 	call	0x12a	; 0x12a <InitPorts>
 34c:	10 e0       	ldi	r17, 0x00	; 0
 34e:	c0 e0       	ldi	r28, 0x00	; 0
 350:	d0 e0       	ldi	r29, 0x00	; 0
 352:	ee 24       	eor	r14, r14
 354:	ff 24       	eor	r15, r15

    while(1)
    {    
        switch(check_Btn())
 356:	0e 94 7f 01 	call	0x2fe	; 0x2fe <check_Btn>
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	19 f0       	breq	.+6      	; 0x364 <main+0x26>
 35e:	82 30       	cpi	r24, 0x02	; 2
 360:	11 f4       	brne	.+4      	; 0x366 <main+0x28>
 362:	0d c0       	rjmp	.+26     	; 0x37e <main+0x40>
        {
            case eBtnShortPressed: currentGameState++;
 364:	1f 5f       	subi	r17, 0xFF	; 255
                break;
            case eBtnLongPressed:  currentGameState = eGameRestart;
                break;
        }
        
        switch(currentGameState)
 366:	12 30       	cpi	r17, 0x02	; 2
 368:	11 f1       	breq	.+68     	; 0x3ae <main+0x70>
 36a:	13 30       	cpi	r17, 0x03	; 3
 36c:	18 f4       	brcc	.+6      	; 0x374 <main+0x36>
 36e:	11 23       	and	r17, r17
 370:	31 f0       	breq	.+12     	; 0x37e <main+0x40>
 372:	32 c0       	rjmp	.+100    	; 0x3d8 <main+0x9a>
 374:	13 30       	cpi	r17, 0x03	; 3
 376:	f9 f0       	breq	.+62     	; 0x3b6 <main+0x78>
 378:	14 30       	cpi	r17, 0x04	; 4
 37a:	71 f5       	brne	.+92     	; 0x3d8 <main+0x9a>
 37c:	24 c0       	rjmp	.+72     	; 0x3c6 <main+0x88>
        {
            case eGameRestart:
            {
                countdown = (( myRand(SEED) + 1) * 10)%50;
 37e:	8a e0       	ldi	r24, 0x0A	; 10
 380:	0e 94 07 02 	call	0x40e	; 0x40e <myRand>
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	01 96       	adiw	r24, 0x01	; 1
 388:	9c 01       	movw	r18, r24
 38a:	f3 e0       	ldi	r31, 0x03	; 3
 38c:	22 0f       	add	r18, r18
 38e:	33 1f       	adc	r19, r19
 390:	fa 95       	dec	r31
 392:	e1 f7       	brne	.-8      	; 0x38c <main+0x4e>
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	82 0f       	add	r24, r18
 39a:	93 1f       	adc	r25, r19
 39c:	62 e3       	ldi	r22, 0x32	; 50
 39e:	70 e0       	ldi	r23, 0x00	; 0
 3a0:	0e 94 36 02 	call	0x46c	; 0x46c <__divmodhi4>
 3a4:	ec 01       	movw	r28, r24
 3a6:	11 e0       	ldi	r17, 0x01	; 1
 3a8:	ee 24       	eor	r14, r14
 3aa:	ff 24       	eor	r15, r15
 3ac:	15 c0       	rjmp	.+42     	; 0x3d8 <main+0x9a>
            }
            case eWaitForStart:
                break;
            case eStartCount:
            {
                countdown--;
 3ae:	21 97       	sbiw	r28, 0x01	; 1
                if (countdown == 0)
 3b0:	99 f4       	brne	.+38     	; 0x3d8 <main+0x9a>
 3b2:	13 e0       	ldi	r17, 0x03	; 3
 3b4:	11 c0       	rjmp	.+34     	; 0x3d8 <main+0x9a>
                currentGameState++;
                break;
            }
            case eEndCount:
            {
                if (countdown != 0)
 3b6:	20 97       	sbiw	r28, 0x00	; 0
 3b8:	11 f0       	breq	.+4      	; 0x3be <main+0x80>
 3ba:	14 e0       	ldi	r17, 0x04	; 4
 3bc:	0d c0       	rjmp	.+26     	; 0x3d8 <main+0x9a>
                    currentGameState++;
                else
                    countup++;
 3be:	08 94       	sec
 3c0:	e1 1c       	adc	r14, r1
 3c2:	f1 1c       	adc	r15, r1
 3c4:	09 c0       	rjmp	.+18     	; 0x3d8 <main+0x9a>
                break;
            }
            case eGameOver:
            {
                if ( (countdown + countup) > TIME_WINDOW)
 3c6:	c7 01       	movw	r24, r14
 3c8:	8c 0f       	add	r24, r28
 3ca:	9d 1f       	adc	r25, r29
 3cc:	8d 52       	subi	r24, 0x2D	; 45
 3ce:	91 40       	sbci	r25, 0x01	; 1
 3d0:	10 f4       	brcc	.+4      	; 0x3d6 <main+0x98>
 3d2:	15 e0       	ldi	r17, 0x05	; 5
 3d4:	01 c0       	rjmp	.+2      	; 0x3d8 <main+0x9a>
 3d6:	16 e0       	ldi	r17, 0x06	; 6
                else 
                    currentGameState = eYouWin;
                break;
            }
        }  
        updateLeds(currentGameState);
 3d8:	81 2f       	mov	r24, r17
 3da:	0e 94 61 01 	call	0x2c2	; 0x2c2 <updateLeds>
        delay(1);
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 10 02 	call	0x420	; 0x420 <delay>
        millis++;
 3e6:	80 91 1e 02 	lds	r24, 0x021E
 3ea:	90 91 1f 02 	lds	r25, 0x021F
 3ee:	a0 91 20 02 	lds	r26, 0x0220
 3f2:	b0 91 21 02 	lds	r27, 0x0221
 3f6:	01 96       	adiw	r24, 0x01	; 1
 3f8:	a1 1d       	adc	r26, r1
 3fa:	b1 1d       	adc	r27, r1
 3fc:	80 93 1e 02 	sts	0x021E, r24
 400:	90 93 1f 02 	sts	0x021F, r25
 404:	a0 93 20 02 	sts	0x0220, r26
 408:	b0 93 21 02 	sts	0x0221, r27
 40c:	a4 cf       	rjmp	.-184    	; 0x356 <main+0x18>

0000040e <myRand>:

myRand:
    ; Entrada: seed en r24
    ; Salida: n mero pseudoaleatorio en r24

    mov r16, r24      ; r16 = seed
 40e:	08 2f       	mov	r16, r24

    ; Multiplicar X por 5: (X << 2) + X
    mov r18, r16      ; r18 = copia de X
 410:	20 2f       	mov	r18, r16
    lsl r16           ; X * 2
 412:	00 0f       	add	r16, r16
    lsl r16           ; X * 4
 414:	00 0f       	add	r16, r16
    add r16, r18      ; X * 5
 416:	02 0f       	add	r16, r18

    ; Sumar 1
    ldi r18, 1
 418:	21 e0       	ldi	r18, 0x01	; 1
    add r16, r18      ; 5*X + 1 (mod 256 autom ticamente)
 41a:	02 0f       	add	r16, r18

    ; Devolver resultado en r24
    mov r24, r16
 41c:	80 2f       	mov	r24, r16

    ret
 41e:	08 95       	ret

00000420 <delay>:



delay:
	cpi r24,0   			//1
 420:	80 30       	cpi	r24, 0x00	; 0
	breq final				//2-1
 422:	39 f0       	breq	.+14     	; 0x432 <final>

	cpi r24,1				//1
 424:	81 30       	cpi	r24, 0x01	; 1
	breq delay1miliS		//2-1
 426:	81 f0       	breq	.+32     	; 0x448 <delay1miliS>

00000428 <loop>:

	loop:
		call delay1mS
 428:	0e 94 1a 02 	call	0x434	; 0x434 <delay1mS>
		sbiw r24,1
 42c:	01 97       	sbiw	r24, 0x01	; 1
	
		cpi r24,1				//1
 42e:	81 30       	cpi	r24, 0x01	; 1
		brsh loop				//	Salta si r24 >= X (Mayor o igual) //1
 430:	d8 f7       	brcc	.-10     	; 0x428 <loop>

00000432 <final>:

	final:
ret
 432:	08 95       	ret

00000434 <delay1mS>:




delay1mS:    
	ldi R25,130;					//1
 434:	92 e8       	ldi	r25, 0x82	; 130

00000436 <nxt3>:
	nxt3:ldi R26,10;			//1x
 436:	aa e0       	ldi	r26, 0x0A	; 10

00000438 <nxt4>:
		nxt4:ldi R27,3;		//1x*1y
 438:	b3 e0       	ldi	r27, 0x03	; 3

0000043a <nxt5>:
			nxt5:dec R27;		//1x*1y*1z
 43a:	ba 95       	dec	r27
				brne nxt5;		//(2z-1)xy
 43c:	f1 f7       	brne	.-4      	; 0x43a <nxt5>
			dec R26;			//1x*1y
 43e:	aa 95       	dec	r26
			brne nxt4;			//(2y-1)x
 440:	d9 f7       	brne	.-10     	; 0x438 <nxt4>
		dec R25;				//1x
 442:	9a 95       	dec	r25
		brne nxt3;				//2x-1
 444:	c1 f7       	brne	.-16     	; 0x436 <nxt3>
	ret
 446:	08 95       	ret

00000448 <delay1miliS>:

delay1miliS:    
	ldi R25,130;				//1
 448:	92 e8       	ldi	r25, 0x82	; 130

0000044a <nxt6>:
	nxt6:ldi R26,10;			//1x
 44a:	aa e0       	ldi	r26, 0x0A	; 10

0000044c <nxt7>:
		nxt7:ldi R27,3;		//1x*1y
 44c:	b3 e0       	ldi	r27, 0x03	; 3

0000044e <nxt8>:
			nxt8:dec R27;	//1x*1y*1z
 44e:	ba 95       	dec	r27
				brne nxt8;	//(2z-1)xy
 450:	f1 f7       	brne	.-4      	; 0x44e <nxt8>
			dec R26;		//1x*1y
 452:	aa 95       	dec	r26
			brne nxt7;		//(2y-1)x
 454:	d9 f7       	brne	.-10     	; 0x44c <nxt7>
		dec R25;			//1x
 456:	9a 95       	dec	r25
		brne nxt6;			//2x-1
 458:	c1 f7       	brne	.-16     	; 0x44a <nxt6>
	jmp final
 45a:	0c 94 19 02 	jmp	0x432	; 0x432 <final>

0000045e <delay103uS>:


delay103uS:
	ldi R25,7;				//1
 45e:	97 e0       	ldi	r25, 0x07	; 7

00000460 <nxt>:
	nxt:ldi R26,77;			//1n
 460:	ad e4       	ldi	r26, 0x4D	; 77

00000462 <nxt2>:
		nxt2:dec R26;		//1m*1n
 462:	aa 95       	dec	r26
			brne nxt2;		//(2m-1)*n
 464:	f1 f7       	brne	.-4      	; 0x462 <nxt2>
		dec R25;			//1n
 466:	9a 95       	dec	r25
		brne nxt;			//2n-1
 468:	d9 f7       	brne	.-10     	; 0x460 <nxt>
	ret
 46a:	08 95       	ret

0000046c <__divmodhi4>:
 46c:	97 fb       	bst	r25, 7
 46e:	09 2e       	mov	r0, r25
 470:	07 26       	eor	r0, r23
 472:	0a d0       	rcall	.+20     	; 0x488 <__divmodhi4_neg1>
 474:	77 fd       	sbrc	r23, 7
 476:	04 d0       	rcall	.+8      	; 0x480 <__divmodhi4_neg2>
 478:	0c d0       	rcall	.+24     	; 0x492 <__udivmodhi4>
 47a:	06 d0       	rcall	.+12     	; 0x488 <__divmodhi4_neg1>
 47c:	00 20       	and	r0, r0
 47e:	1a f4       	brpl	.+6      	; 0x486 <__divmodhi4_exit>

00000480 <__divmodhi4_neg2>:
 480:	70 95       	com	r23
 482:	61 95       	neg	r22
 484:	7f 4f       	sbci	r23, 0xFF	; 255

00000486 <__divmodhi4_exit>:
 486:	08 95       	ret

00000488 <__divmodhi4_neg1>:
 488:	f6 f7       	brtc	.-4      	; 0x486 <__divmodhi4_exit>
 48a:	90 95       	com	r25
 48c:	81 95       	neg	r24
 48e:	9f 4f       	sbci	r25, 0xFF	; 255
 490:	08 95       	ret

00000492 <__udivmodhi4>:
 492:	aa 1b       	sub	r26, r26
 494:	bb 1b       	sub	r27, r27
 496:	51 e1       	ldi	r21, 0x11	; 17
 498:	07 c0       	rjmp	.+14     	; 0x4a8 <__udivmodhi4_ep>

0000049a <__udivmodhi4_loop>:
 49a:	aa 1f       	adc	r26, r26
 49c:	bb 1f       	adc	r27, r27
 49e:	a6 17       	cp	r26, r22
 4a0:	b7 07       	cpc	r27, r23
 4a2:	10 f0       	brcs	.+4      	; 0x4a8 <__udivmodhi4_ep>
 4a4:	a6 1b       	sub	r26, r22
 4a6:	b7 0b       	sbc	r27, r23

000004a8 <__udivmodhi4_ep>:
 4a8:	88 1f       	adc	r24, r24
 4aa:	99 1f       	adc	r25, r25
 4ac:	5a 95       	dec	r21
 4ae:	a9 f7       	brne	.-22     	; 0x49a <__udivmodhi4_loop>
 4b0:	80 95       	com	r24
 4b2:	90 95       	com	r25
 4b4:	bc 01       	movw	r22, r24
 4b6:	cd 01       	movw	r24, r26
 4b8:	08 95       	ret

000004ba <do_rand>:
 4ba:	af 92       	push	r10
 4bc:	bf 92       	push	r11
 4be:	cf 92       	push	r12
 4c0:	df 92       	push	r13
 4c2:	ef 92       	push	r14
 4c4:	ff 92       	push	r15
 4c6:	0f 93       	push	r16
 4c8:	1f 93       	push	r17
 4ca:	cf 93       	push	r28
 4cc:	df 93       	push	r29
 4ce:	ec 01       	movw	r28, r24
 4d0:	a8 80       	ld	r10, Y
 4d2:	b9 80       	ldd	r11, Y+1	; 0x01
 4d4:	ca 80       	ldd	r12, Y+2	; 0x02
 4d6:	db 80       	ldd	r13, Y+3	; 0x03
 4d8:	a1 14       	cp	r10, r1
 4da:	b1 04       	cpc	r11, r1
 4dc:	c1 04       	cpc	r12, r1
 4de:	d1 04       	cpc	r13, r1
 4e0:	41 f4       	brne	.+16     	; 0x4f2 <do_rand+0x38>
 4e2:	84 e2       	ldi	r24, 0x24	; 36
 4e4:	a8 2e       	mov	r10, r24
 4e6:	89 ed       	ldi	r24, 0xD9	; 217
 4e8:	b8 2e       	mov	r11, r24
 4ea:	8b e5       	ldi	r24, 0x5B	; 91
 4ec:	c8 2e       	mov	r12, r24
 4ee:	87 e0       	ldi	r24, 0x07	; 7
 4f0:	d8 2e       	mov	r13, r24
 4f2:	c6 01       	movw	r24, r12
 4f4:	b5 01       	movw	r22, r10
 4f6:	2d e1       	ldi	r18, 0x1D	; 29
 4f8:	33 ef       	ldi	r19, 0xF3	; 243
 4fa:	41 e0       	ldi	r20, 0x01	; 1
 4fc:	50 e0       	ldi	r21, 0x00	; 0
 4fe:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__divmodsi4>
 502:	27 ea       	ldi	r18, 0xA7	; 167
 504:	31 e4       	ldi	r19, 0x41	; 65
 506:	40 e0       	ldi	r20, 0x00	; 0
 508:	50 e0       	ldi	r21, 0x00	; 0
 50a:	0e 94 c8 02 	call	0x590	; 0x590 <__mulsi3>
 50e:	7b 01       	movw	r14, r22
 510:	8c 01       	movw	r16, r24
 512:	c6 01       	movw	r24, r12
 514:	b5 01       	movw	r22, r10
 516:	2d e1       	ldi	r18, 0x1D	; 29
 518:	33 ef       	ldi	r19, 0xF3	; 243
 51a:	41 e0       	ldi	r20, 0x01	; 1
 51c:	50 e0       	ldi	r21, 0x00	; 0
 51e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__divmodsi4>
 522:	ca 01       	movw	r24, r20
 524:	b9 01       	movw	r22, r18
 526:	2c ee       	ldi	r18, 0xEC	; 236
 528:	34 ef       	ldi	r19, 0xF4	; 244
 52a:	4f ef       	ldi	r20, 0xFF	; 255
 52c:	5f ef       	ldi	r21, 0xFF	; 255
 52e:	0e 94 c8 02 	call	0x590	; 0x590 <__mulsi3>
 532:	6e 0d       	add	r22, r14
 534:	7f 1d       	adc	r23, r15
 536:	80 1f       	adc	r24, r16
 538:	91 1f       	adc	r25, r17
 53a:	97 ff       	sbrs	r25, 7
 53c:	04 c0       	rjmp	.+8      	; 0x546 <do_rand+0x8c>
 53e:	61 50       	subi	r22, 0x01	; 1
 540:	70 40       	sbci	r23, 0x00	; 0
 542:	80 40       	sbci	r24, 0x00	; 0
 544:	90 48       	sbci	r25, 0x80	; 128
 546:	68 83       	st	Y, r22
 548:	79 83       	std	Y+1, r23	; 0x01
 54a:	8a 83       	std	Y+2, r24	; 0x02
 54c:	9b 83       	std	Y+3, r25	; 0x03
 54e:	9b 01       	movw	r18, r22
 550:	3f 77       	andi	r19, 0x7F	; 127
 552:	c9 01       	movw	r24, r18
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	1f 91       	pop	r17
 55a:	0f 91       	pop	r16
 55c:	ff 90       	pop	r15
 55e:	ef 90       	pop	r14
 560:	df 90       	pop	r13
 562:	cf 90       	pop	r12
 564:	bf 90       	pop	r11
 566:	af 90       	pop	r10
 568:	08 95       	ret

0000056a <rand_r>:
 56a:	0e 94 5d 02 	call	0x4ba	; 0x4ba <do_rand>
 56e:	08 95       	ret

00000570 <rand>:
 570:	89 e1       	ldi	r24, 0x19	; 25
 572:	92 e0       	ldi	r25, 0x02	; 2
 574:	0e 94 5d 02 	call	0x4ba	; 0x4ba <do_rand>
 578:	08 95       	ret

0000057a <srand>:
 57a:	a0 e0       	ldi	r26, 0x00	; 0
 57c:	b0 e0       	ldi	r27, 0x00	; 0
 57e:	80 93 19 02 	sts	0x0219, r24
 582:	90 93 1a 02 	sts	0x021A, r25
 586:	a0 93 1b 02 	sts	0x021B, r26
 58a:	b0 93 1c 02 	sts	0x021C, r27
 58e:	08 95       	ret

00000590 <__mulsi3>:
 590:	62 9f       	mul	r22, r18
 592:	d0 01       	movw	r26, r0
 594:	73 9f       	mul	r23, r19
 596:	f0 01       	movw	r30, r0
 598:	82 9f       	mul	r24, r18
 59a:	e0 0d       	add	r30, r0
 59c:	f1 1d       	adc	r31, r1
 59e:	64 9f       	mul	r22, r20
 5a0:	e0 0d       	add	r30, r0
 5a2:	f1 1d       	adc	r31, r1
 5a4:	92 9f       	mul	r25, r18
 5a6:	f0 0d       	add	r31, r0
 5a8:	83 9f       	mul	r24, r19
 5aa:	f0 0d       	add	r31, r0
 5ac:	74 9f       	mul	r23, r20
 5ae:	f0 0d       	add	r31, r0
 5b0:	65 9f       	mul	r22, r21
 5b2:	f0 0d       	add	r31, r0
 5b4:	99 27       	eor	r25, r25
 5b6:	72 9f       	mul	r23, r18
 5b8:	b0 0d       	add	r27, r0
 5ba:	e1 1d       	adc	r30, r1
 5bc:	f9 1f       	adc	r31, r25
 5be:	63 9f       	mul	r22, r19
 5c0:	b0 0d       	add	r27, r0
 5c2:	e1 1d       	adc	r30, r1
 5c4:	f9 1f       	adc	r31, r25
 5c6:	bd 01       	movw	r22, r26
 5c8:	cf 01       	movw	r24, r30
 5ca:	11 24       	eor	r1, r1
 5cc:	08 95       	ret

000005ce <__divmodsi4>:
 5ce:	97 fb       	bst	r25, 7
 5d0:	09 2e       	mov	r0, r25
 5d2:	05 26       	eor	r0, r21
 5d4:	0e d0       	rcall	.+28     	; 0x5f2 <__divmodsi4_neg1>
 5d6:	57 fd       	sbrc	r21, 7
 5d8:	04 d0       	rcall	.+8      	; 0x5e2 <__divmodsi4_neg2>
 5da:	14 d0       	rcall	.+40     	; 0x604 <__udivmodsi4>
 5dc:	0a d0       	rcall	.+20     	; 0x5f2 <__divmodsi4_neg1>
 5de:	00 1c       	adc	r0, r0
 5e0:	38 f4       	brcc	.+14     	; 0x5f0 <__divmodsi4_exit>

000005e2 <__divmodsi4_neg2>:
 5e2:	50 95       	com	r21
 5e4:	40 95       	com	r20
 5e6:	30 95       	com	r19
 5e8:	21 95       	neg	r18
 5ea:	3f 4f       	sbci	r19, 0xFF	; 255
 5ec:	4f 4f       	sbci	r20, 0xFF	; 255
 5ee:	5f 4f       	sbci	r21, 0xFF	; 255

000005f0 <__divmodsi4_exit>:
 5f0:	08 95       	ret

000005f2 <__divmodsi4_neg1>:
 5f2:	f6 f7       	brtc	.-4      	; 0x5f0 <__divmodsi4_exit>
 5f4:	90 95       	com	r25
 5f6:	80 95       	com	r24
 5f8:	70 95       	com	r23
 5fa:	61 95       	neg	r22
 5fc:	7f 4f       	sbci	r23, 0xFF	; 255
 5fe:	8f 4f       	sbci	r24, 0xFF	; 255
 600:	9f 4f       	sbci	r25, 0xFF	; 255
 602:	08 95       	ret

00000604 <__udivmodsi4>:
 604:	a1 e2       	ldi	r26, 0x21	; 33
 606:	1a 2e       	mov	r1, r26
 608:	aa 1b       	sub	r26, r26
 60a:	bb 1b       	sub	r27, r27
 60c:	fd 01       	movw	r30, r26
 60e:	0d c0       	rjmp	.+26     	; 0x62a <__udivmodsi4_ep>

00000610 <__udivmodsi4_loop>:
 610:	aa 1f       	adc	r26, r26
 612:	bb 1f       	adc	r27, r27
 614:	ee 1f       	adc	r30, r30
 616:	ff 1f       	adc	r31, r31
 618:	a2 17       	cp	r26, r18
 61a:	b3 07       	cpc	r27, r19
 61c:	e4 07       	cpc	r30, r20
 61e:	f5 07       	cpc	r31, r21
 620:	20 f0       	brcs	.+8      	; 0x62a <__udivmodsi4_ep>
 622:	a2 1b       	sub	r26, r18
 624:	b3 0b       	sbc	r27, r19
 626:	e4 0b       	sbc	r30, r20
 628:	f5 0b       	sbc	r31, r21

0000062a <__udivmodsi4_ep>:
 62a:	66 1f       	adc	r22, r22
 62c:	77 1f       	adc	r23, r23
 62e:	88 1f       	adc	r24, r24
 630:	99 1f       	adc	r25, r25
 632:	1a 94       	dec	r1
 634:	69 f7       	brne	.-38     	; 0x610 <__udivmodsi4_loop>
 636:	60 95       	com	r22
 638:	70 95       	com	r23
 63a:	80 95       	com	r24
 63c:	90 95       	com	r25
 63e:	9b 01       	movw	r18, r22
 640:	ac 01       	movw	r20, r24
 642:	bd 01       	movw	r22, r26
 644:	cf 01       	movw	r24, r30
 646:	08 95       	ret

00000648 <_exit>:
 648:	f8 94       	cli

0000064a <__stop_program>:
 64a:	ff cf       	rjmp	.-2      	; 0x64a <__stop_program>
