
practica5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800200  000003a6  0000043a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800212  00800212  0000044c  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000450  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000097  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000031d  00000000  00000000  00000527  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000173  00000000  00000000  00000844  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d5  00000000  00000000  000009b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00000c8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000021c  00000000  00000000  00000d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006f  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 ea       	ldi	r30, 0xA6	; 166
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 31       	cpi	r26, 0x12	; 18
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a2 e1       	ldi	r26, 0x12	; 18
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a7 31       	cpi	r26, 0x17	; 23
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 14 01 	call	0x228	; 0x228 <main>
 122:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <InitPorts>:

void InitPorts(void)
{

    // 0 configura de entrada en los puertos
    DDRF &= ~(1 << PF7); // entrada
 12a:	87 98       	cbi	0x10, 7	; 16
    DDRF |= (1 << PF6);  // salida
 12c:	86 9a       	sbi	0x10, 6	; 16
        0000 0000     0000 0000
        ~1100 0000 -> 0011 1111
                      0000 0000

    */
     PORTF |= (1 << PF6) | (1 << PF7); // Enable pull-up for PF7 and set PF6 high  quiero que constantemente se este sacando un 1 por el pin 6 del puerto, por esa razon lo asigno
 12e:	81 b3       	in	r24, 0x11	; 17
 130:	80 6c       	ori	r24, 0xC0	; 192
 132:	81 bb       	out	0x11, r24	; 17
    // con un OR
}
 134:	08 95       	ret

00000136 <endCount>:
}


void endCount(){

    DDRF =0x40;
 136:	80 e4       	ldi	r24, 0x40	; 64
 138:	80 bb       	out	0x10, r24	; 16
    PORTF =0x40;
 13a:	81 bb       	out	0x11, r24	; 17

}
 13c:	08 95       	ret

0000013e <startGame>:
    static uint8_t seed = SEED; // Variable estática para mantener la semilla actualizada

    // Genera un número aleatorio y actualiza la semilla

    //uint8_t random = myRand(seed + (millis % 255));
    uint8_t random = myRand(seed);
 13e:	80 91 10 02 	lds	r24, 0x0210
 142:	0e 94 a3 01 	call	0x346	; 0x346 <myRand>
 146:	e8 2f       	mov	r30, r24
    seed = random; // Actualiza la semilla para la próxima llamada
 148:	80 93 10 02 	sts	0x0210, r24

    // Asegura que el índice esté entre 0-7 usando módulo 8
    uint8_t indice = random % 8;

    // Configura el LED correspondiente
    DDRF = _CONF_DDR[indice];
 14c:	e7 70       	andi	r30, 0x07	; 7
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	df 01       	movw	r26, r30
 152:	a8 5f       	subi	r26, 0xF8	; 248
 154:	bd 4f       	sbci	r27, 0xFD	; 253
 156:	8c 91       	ld	r24, X
 158:	80 bb       	out	0x10, r24	; 16
    PORTF = _CONF_PORT[indice];
 15a:	e0 50       	subi	r30, 0x00	; 0
 15c:	fe 4f       	sbci	r31, 0xFE	; 254
 15e:	80 81       	ld	r24, Z
 160:	81 bb       	out	0x11, r24	; 17
    delay(100);
 162:	84 e6       	ldi	r24, 0x64	; 100
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 80 01 	call	0x300	; 0x300 <delay>
}
 16a:	08 95       	ret

0000016c <waitState>:


void waitState() {

    static volatile uint8_t indice = 0; //para amantener el valor entre llamadas
    DDRF = _CONF_DDR[indice];
 16c:	80 91 16 02 	lds	r24, 0x0216
 170:	e8 e0       	ldi	r30, 0x08	; 8
 172:	f2 e0       	ldi	r31, 0x02	; 2
 174:	e8 0f       	add	r30, r24
 176:	f1 1d       	adc	r31, r1
 178:	80 81       	ld	r24, Z
 17a:	80 bb       	out	0x10, r24	; 16
    PORTF =_CONF_PORT[indice];
 17c:	80 91 16 02 	lds	r24, 0x0216
 180:	e0 e0       	ldi	r30, 0x00	; 0
 182:	f2 e0       	ldi	r31, 0x02	; 2
 184:	e8 0f       	add	r30, r24
 186:	f1 1d       	adc	r31, r1
 188:	80 81       	ld	r24, Z
 18a:	81 bb       	out	0x11, r24	; 17
    delay(100);
 18c:	84 e6       	ldi	r24, 0x64	; 100
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 80 01 	call	0x300	; 0x300 <delay>

    indice = (indice + 1) % 8;
 194:	80 91 16 02 	lds	r24, 0x0216
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	87 70       	andi	r24, 0x07	; 7
 19e:	90 70       	andi	r25, 0x00	; 0
 1a0:	80 93 16 02 	sts	0x0216, r24
}
 1a4:	08 95       	ret

000001a6 <updateLeds>:
    // esta funcion debe de devolver estos estados en los cuales se esta haceindo los cambios necesarios para los leds

    // por lo que creo que deberia de ser un switch o esta funcion invocar a otras que haga ese proceso.


    switch (gameState)
 1a6:	82 30       	cpi	r24, 0x02	; 2
 1a8:	39 f0       	breq	.+14     	; 0x1b8 <updateLeds+0x12>
 1aa:	83 30       	cpi	r24, 0x03	; 3
 1ac:	41 f0       	breq	.+16     	; 0x1be <updateLeds+0x18>
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	49 f4       	brne	.+18     	; 0x1c4 <updateLeds+0x1e>
    {

        case eWaitForStart:
        {
            waitState();
 1b2:	0e 94 b6 00 	call	0x16c	; 0x16c <waitState>
 1b6:	08 95       	ret
            break;
        }

        case eStartCount:
            startGame();
 1b8:	0e 94 9f 00 	call	0x13e	; 0x13e <startGame>
 1bc:	08 95       	ret
}


void endCount(){

    DDRF =0x40;
 1be:	80 e4       	ldi	r24, 0x40	; 64
 1c0:	80 bb       	out	0x10, r24	; 16
    PORTF =0x40;
 1c2:	81 bb       	out	0x11, r24	; 17
 1c4:	08 95       	ret

000001c6 <check_Btn>:
/*
ok el check btn no esta del todo bien, esto porque

*/
uint8_t check_Btn(void)
{
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
    // el circuoto del boton esta en pull - up, por lo que para verificar si el boton
    // esta presionado o no, no presiondado = 1 - HIGH
    //  presionado = 0 - LOW
    // PINx lee el estado fisico del pin

    if(PINF & (1<<BTN_PIN)) return eBtnUndefined;
 1ca:	7f 99       	sbic	0x0f, 7	; 15
 1cc:	29 c0       	rjmp	.+82     	; 0x220 <check_Btn+0x5a>

    delay(20); // esperar 20 ms antes de actuar
 1ce:	84 e1       	ldi	r24, 0x14	; 20
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 80 01 	call	0x300	; 0x300 <delay>

    if (PINF & (1 << BTN_PIN)) return eBtnUndefined;
 1d6:	7f 99       	sbic	0x0f, 7	; 15
 1d8:	23 c0       	rjmp	.+70     	; 0x220 <check_Btn+0x5a>
 1da:	c0 e0       	ldi	r28, 0x00	; 0
 1dc:	d0 e0       	ldi	r29, 0x00	; 0
    uint16_t tiempo_presionado = 0;

    while (1)
    {

        delay(1);
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 80 01 	call	0x300	; 0x300 <delay>
        tiempo_presionado++;

        if (PINF & (1 << BTN_PIN))
 1e6:	7f 99       	sbic	0x0f, 7	; 15
 1e8:	12 c0       	rjmp	.+36     	; 0x20e <check_Btn+0x48>

    while (1)
    {

        delay(1);
        tiempo_presionado++;
 1ea:	21 96       	adiw	r28, 0x01	; 1
            break;
        }

        // si se superoa el segundo se detecta como largo

        if (tiempo_presionado >= 1000)
 1ec:	83 e0       	ldi	r24, 0x03	; 3
 1ee:	c8 3e       	cpi	r28, 0xE8	; 232
 1f0:	d8 07       	cpc	r29, r24
 1f2:	a9 f7       	brne	.-22     	; 0x1de <check_Btn+0x18>
 1f4:	04 c0       	rjmp	.+8      	; 0x1fe <check_Btn+0x38>
        {

            //
            while (!(PINF & (1 << BTN_PIN)))
            {
                delay(1);
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 80 01 	call	0x300	; 0x300 <delay>

        if (tiempo_presionado >= 1000)
        {

            //
            while (!(PINF & (1 << BTN_PIN)))
 1fe:	7f 9b       	sbis	0x0f, 7	; 15
 200:	fa cf       	rjmp	.-12     	; 0x1f6 <check_Btn+0x30>
            {
                delay(1);
            }
            delay(20);
 202:	84 e1       	ldi	r24, 0x14	; 20
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 80 01 	call	0x300	; 0x300 <delay>
 20a:	82 e0       	ldi	r24, 0x02	; 2
 20c:	0a c0       	rjmp	.+20     	; 0x222 <check_Btn+0x5c>
            return  eBtnLongPressed;
        }
    }

    delay(20);
 20e:	84 e1       	ldi	r24, 0x14	; 20
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 80 01 	call	0x300	; 0x300 <delay>
    if (PINF & (1 << BTN_PIN))
 216:	8f b1       	in	r24, 0x0f	; 15
 218:	88 1f       	adc	r24, r24
 21a:	88 27       	eor	r24, r24
 21c:	88 1f       	adc	r24, r24
 21e:	01 c0       	rjmp	.+2      	; 0x222 <check_Btn+0x5c>
 220:	80 e0       	ldi	r24, 0x00	; 0

        return eBtnShortPressed;
    }

    return eBtnUndefined;
}
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	08 95       	ret

00000228 <main>:

// Global variable
uint32_t millis=0;

int main(void)
{
 228:	ef 92       	push	r14
 22a:	ff 92       	push	r15
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
    uint8_t currentGameState = eGameRestart;
    uint16_t countdown = 0;
    uint16_t countup = 0;

    // varibale para el modod wait para que este contantemente ciclado siempre y cunado no se ha presionado el boton.
    InitPorts();
 232:	0e 94 95 00 	call	0x12a	; 0x12a <InitPorts>
 236:	10 e0       	ldi	r17, 0x00	; 0
 238:	c0 e0       	ldi	r28, 0x00	; 0
 23a:	d0 e0       	ldi	r29, 0x00	; 0
 23c:	ee 24       	eor	r14, r14
 23e:	ff 24       	eor	r15, r15
    while (1)
    {

        //btn=  check_Bt();

        switch (check_Btn())
 240:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <check_Btn>
 244:	81 30       	cpi	r24, 0x01	; 1
 246:	19 f0       	breq	.+6      	; 0x24e <main+0x26>
 248:	82 30       	cpi	r24, 0x02	; 2
 24a:	11 f4       	brne	.+4      	; 0x250 <main+0x28>
 24c:	0d c0       	rjmp	.+26     	; 0x268 <main+0x40>
        {
        case eBtnShortPressed:
            currentGameState++;
 24e:	1f 5f       	subi	r17, 0xFF	; 255
        case eBtnLongPressed:
            currentGameState = eGameRestart;
            break;
        }

        switch (currentGameState)
 250:	12 30       	cpi	r17, 0x02	; 2
 252:	11 f1       	breq	.+68     	; 0x298 <main+0x70>
 254:	13 30       	cpi	r17, 0x03	; 3
 256:	18 f4       	brcc	.+6      	; 0x25e <main+0x36>
 258:	11 23       	and	r17, r17
 25a:	31 f0       	breq	.+12     	; 0x268 <main+0x40>
 25c:	36 c0       	rjmp	.+108    	; 0x2ca <main+0xa2>
 25e:	13 30       	cpi	r17, 0x03	; 3
 260:	11 f1       	breq	.+68     	; 0x2a6 <main+0x7e>
 262:	14 30       	cpi	r17, 0x04	; 4
 264:	91 f5       	brne	.+100    	; 0x2ca <main+0xa2>
 266:	28 c0       	rjmp	.+80     	; 0x2b8 <main+0x90>
        {
        case eGameRestart:
        {
            countdown = ((myRand(SEED) + 1) * 10) % 25;
 268:	85 e0       	ldi	r24, 0x05	; 5
 26a:	0e 94 a3 01 	call	0x346	; 0x346 <myRand>
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	9c 01       	movw	r18, r24
 274:	53 e0       	ldi	r21, 0x03	; 3
 276:	22 0f       	add	r18, r18
 278:	33 1f       	adc	r19, r19
 27a:	5a 95       	dec	r21
 27c:	e1 f7       	brne	.-8      	; 0x276 <main+0x4e>
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	82 0f       	add	r24, r18
 284:	93 1f       	adc	r25, r19
 286:	69 e1       	ldi	r22, 0x19	; 25
 288:	70 e0       	ldi	r23, 0x00	; 0
 28a:	0e 94 aa 01 	call	0x354	; 0x354 <__divmodhi4>
 28e:	ec 01       	movw	r28, r24
 290:	11 e0       	ldi	r17, 0x01	; 1
 292:	ee 24       	eor	r14, r14
 294:	ff 24       	eor	r15, r15
 296:	19 c0       	rjmp	.+50     	; 0x2ca <main+0xa2>

            break;
        case eStartCount:
        {

            countdown--;
 298:	21 97       	sbiw	r28, 0x01	; 1
            DDRB |= (1<<PB7);
 29a:	27 9a       	sbi	0x04, 7	; 4
            SetBitPort(PORTB,7);
 29c:	2f 9a       	sbi	0x05, 7	; 5
            if (countdown == 0){
 29e:	20 97       	sbiw	r28, 0x00	; 0
 2a0:	a1 f4       	brne	.+40     	; 0x2ca <main+0xa2>
 2a2:	13 e0       	ldi	r17, 0x03	; 3
 2a4:	12 c0       	rjmp	.+36     	; 0x2ca <main+0xa2>

            break;
        }
        case eEndCount:
        {
            ClrBitPort(PORTB,7);
 2a6:	2f 98       	cbi	0x05, 7	; 5
            if (countdown != 0)
 2a8:	20 97       	sbiw	r28, 0x00	; 0
 2aa:	11 f0       	breq	.+4      	; 0x2b0 <main+0x88>
 2ac:	14 e0       	ldi	r17, 0x04	; 4
 2ae:	0d c0       	rjmp	.+26     	; 0x2ca <main+0xa2>
                currentGameState++;
            else
                countup++;
 2b0:	08 94       	sec
 2b2:	e1 1c       	adc	r14, r1
 2b4:	f1 1c       	adc	r15, r1
 2b6:	09 c0       	rjmp	.+18     	; 0x2ca <main+0xa2>
            break;
        }
        case eGameOver:
        {
            if ((countdown + countup) > TIME_WINDOW)
 2b8:	c7 01       	movw	r24, r14
 2ba:	8c 0f       	add	r24, r28
 2bc:	9d 1f       	adc	r25, r29
 2be:	8d 52       	subi	r24, 0x2D	; 45
 2c0:	91 40       	sbci	r25, 0x01	; 1
 2c2:	10 f4       	brcc	.+4      	; 0x2c8 <main+0xa0>
 2c4:	15 e0       	ldi	r17, 0x05	; 5
 2c6:	01 c0       	rjmp	.+2      	; 0x2ca <main+0xa2>
 2c8:	16 e0       	ldi	r17, 0x06	; 6
                currentGameState = eYouWin;
            break;
        }
        }

        updateLeds(currentGameState);
 2ca:	81 2f       	mov	r24, r17
 2cc:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <updateLeds>
        delay(1);
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 80 01 	call	0x300	; 0x300 <delay>
        millis++;
 2d8:	80 91 12 02 	lds	r24, 0x0212
 2dc:	90 91 13 02 	lds	r25, 0x0213
 2e0:	a0 91 14 02 	lds	r26, 0x0214
 2e4:	b0 91 15 02 	lds	r27, 0x0215
 2e8:	01 96       	adiw	r24, 0x01	; 1
 2ea:	a1 1d       	adc	r26, r1
 2ec:	b1 1d       	adc	r27, r1
 2ee:	80 93 12 02 	sts	0x0212, r24
 2f2:	90 93 13 02 	sts	0x0213, r25
 2f6:	a0 93 14 02 	sts	0x0214, r26
 2fa:	b0 93 15 02 	sts	0x0215, r27
 2fe:	a0 cf       	rjmp	.-192    	; 0x240 <main+0x18>

00000300 <delay>:
delay:

	; en este tendre que hacer muchos descuentos por esto de
	;cunado sea 0 y  lo demas

	cpi r24, 0x00 ; 1
 300:	80 30       	cpi	r24, 0x00	; 0
	breq final ;2 - 1
 302:	49 f0       	breq	.+18     	; 0x316 <final>

	cpi r24, 0x01
 304:	81 30       	cpi	r24, 0x01	; 1
	breq un_mSeg; si r24 es 1 ms entonces ira a una subrutina la cual durara
 306:	41 f0       	breq	.+16     	; 0x318 <un_mSeg>

00000308 <ciclo>:
	;dira 1ms segun lo que se mando por parametro


	ciclo:

		call delay_general
 308:	0e 94 98 01 	call	0x330	; 0x330 <delay_general>

		sbiw r24, 1 ; 2
 30c:	01 97       	sbiw	r24, 0x01	; 1

		cpi r24, 0x01 ;1
 30e:	81 30       	cpi	r24, 0x01	; 1
		brne ciclo ; 2 - 1
 310:	d9 f7       	brne	.-10     	; 0x308 <ciclo>

		cpi r24,0x01
 312:	81 30       	cpi	r24, 0x01	; 1
		breq un_mSeg ; se cumple siempre
 314:	09 f0       	breq	.+2      	; 0x318 <un_mSeg>

00000316 <final>:


final:
	; agrego un nop porque al final

	ret
 316:	08 95       	ret

00000318 <un_mSeg>:
	; jmp -> 3 ciclos

	;usaremos de igual r16-r17-r18


	ldi r16,2 ; 1
 318:	02 e0       	ldi	r16, 0x02	; 2

0000031a <ciclo0_1mS>:
	ciclo0_1mS:
		ldi r17,11 ; 1x
 31a:	1b e0       	ldi	r17, 0x0B	; 11
	...

0000031e <ciclo1_1mS>:
		nop ; 1x

		ciclo1_1mS:
			ldi r18, 241 ; 1xy
 31e:	21 ef       	ldi	r18, 0xF1	; 241

00000320 <ciclo2_1mS>:

			ciclo2_1mS:
				dec r18 ; 1xyz
 320:	2a 95       	dec	r18
				brne ciclo2_1mS ; xy(2z-1)
 322:	f1 f7       	brne	.-4      	; 0x320 <ciclo2_1mS>

			dec r17 ; 1xy
 324:	1a 95       	dec	r17
			brne ciclo1_1mS ;x(2y-1)
 326:	d9 f7       	brne	.-10     	; 0x31e <ciclo1_1mS>

		dec r16 ; 1x
 328:	0a 95       	dec	r16
		brne ciclo0_1mS ; (2x-1)
 32a:	b9 f7       	brne	.-18     	; 0x31a <ciclo0_1mS>

	jmp final
 32c:	0c 94 8b 01 	jmp	0x316	; 0x316 <final>

00000330 <delay_general>:

	; este no va a durar exactamento delo 16,000 porque va a contar
	;en su ciclo las comparaciones fuera y al parecer tan solo tendra
	;en el ultimo que le faltaria 1 de la comparacion que no es correcta

	ldi r16, 115 ; 1
 330:	03 e7       	ldi	r16, 0x73	; 115

00000332 <ciclo_0>:

	ciclo_0:
		ldi r17, 1 ; 1x
 332:	11 e0       	ldi	r17, 0x01	; 1
	...

00000336 <ciclo_1>:
		nop

		ciclo_1:

			ldi r18, 44 ; 1xy
 336:	2c e2       	ldi	r18, 0x2C	; 44

00000338 <ciclo_2>:
			ciclo_2:
				dec r18 ; 1zxy
 338:	2a 95       	dec	r18
				brne ciclo_2 ; xy(2z-1)
 33a:	f1 f7       	brne	.-4      	; 0x338 <ciclo_2>

			dec r17 ; 1xy
 33c:	1a 95       	dec	r17
			brne ciclo_1 ;x(2y-1)
 33e:	d9 f7       	brne	.-10     	; 0x336 <ciclo_1>

		dec r16 ; 1x
 340:	0a 95       	dec	r16
		brne ciclo_0 ;(2x-1)
 342:	b9 f7       	brne	.-18     	; 0x332 <ciclo_0>
	ret
 344:	08 95       	ret

00000346 <myRand>:



myRand:

	ldi R16, 0xA5      ; Multiplicador (a = 165)
 346:	05 ea       	ldi	r16, 0xA5	; 165
    mul R24, R16       ; Multiplica semilla por 'a' (R1:R0 = R24 * R16)
 348:	80 9f       	mul	r24, r16
    ldi R17, 0x4D      ; Constante aditiva (c = 77)
 34a:	1d e4       	ldi	r17, 0x4D	; 77
    add R0, R17        ; Suma constante al byte bajo del resultado
 34c:	01 0e       	add	r0, r17
    mov R24, R0        ; Mueve resultado a registro de retorno
 34e:	80 2d       	mov	r24, r0
    clr R1             ; Limpia registro alto (requerido por convención AVR-GCC)
 350:	11 24       	eor	r1, r1
    ret
 352:	08 95       	ret

00000354 <__divmodhi4>:
 354:	97 fb       	bst	r25, 7
 356:	09 2e       	mov	r0, r25
 358:	07 26       	eor	r0, r23
 35a:	0a d0       	rcall	.+20     	; 0x370 <__divmodhi4_neg1>
 35c:	77 fd       	sbrc	r23, 7
 35e:	04 d0       	rcall	.+8      	; 0x368 <__divmodhi4_neg2>
 360:	0c d0       	rcall	.+24     	; 0x37a <__udivmodhi4>
 362:	06 d0       	rcall	.+12     	; 0x370 <__divmodhi4_neg1>
 364:	00 20       	and	r0, r0
 366:	1a f4       	brpl	.+6      	; 0x36e <__divmodhi4_exit>

00000368 <__divmodhi4_neg2>:
 368:	70 95       	com	r23
 36a:	61 95       	neg	r22
 36c:	7f 4f       	sbci	r23, 0xFF	; 255

0000036e <__divmodhi4_exit>:
 36e:	08 95       	ret

00000370 <__divmodhi4_neg1>:
 370:	f6 f7       	brtc	.-4      	; 0x36e <__divmodhi4_exit>
 372:	90 95       	com	r25
 374:	81 95       	neg	r24
 376:	9f 4f       	sbci	r25, 0xFF	; 255
 378:	08 95       	ret

0000037a <__udivmodhi4>:
 37a:	aa 1b       	sub	r26, r26
 37c:	bb 1b       	sub	r27, r27
 37e:	51 e1       	ldi	r21, 0x11	; 17
 380:	07 c0       	rjmp	.+14     	; 0x390 <__udivmodhi4_ep>

00000382 <__udivmodhi4_loop>:
 382:	aa 1f       	adc	r26, r26
 384:	bb 1f       	adc	r27, r27
 386:	a6 17       	cp	r26, r22
 388:	b7 07       	cpc	r27, r23
 38a:	10 f0       	brcs	.+4      	; 0x390 <__udivmodhi4_ep>
 38c:	a6 1b       	sub	r26, r22
 38e:	b7 0b       	sbc	r27, r23

00000390 <__udivmodhi4_ep>:
 390:	88 1f       	adc	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	5a 95       	dec	r21
 396:	a9 f7       	brne	.-22     	; 0x382 <__udivmodhi4_loop>
 398:	80 95       	com	r24
 39a:	90 95       	com	r25
 39c:	bc 01       	movw	r22, r24
 39e:	cd 01       	movw	r24, r26
 3a0:	08 95       	ret

000003a2 <_exit>:
 3a2:	f8 94       	cli

000003a4 <__stop_program>:
 3a4:	ff cf       	rjmp	.-2      	; 0x3a4 <__stop_program>
