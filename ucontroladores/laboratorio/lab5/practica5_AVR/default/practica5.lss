
practica5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  00000306  0000039a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000306  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800210  00800210  000003aa  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  000003b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000009c  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002ef  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000146  00000000  00000000  0000077b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026e  00000000  00000000  000008c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00000b30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000223  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000046  00000000  00000000  00000db3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e0       	ldi	r30, 0x06	; 6
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 31       	cpi	r26, 0x10	; 16
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a0 e1       	ldi	r26, 0x10	; 16
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a9 31       	cpi	r26, 0x19	; 25
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <main>
 122:	0c 94 81 01 	jmp	0x302	; 0x302 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <InitPorts>:

void InitPorts(void)
{

    // 0 configura de entrada en los puertos
    DDRF &= ~(1 << PF7); // entrada
 12a:	87 98       	cbi	0x10, 7	; 16
    DDRF |= (1 << PF6);  // salida
 12c:	86 9a       	sbi	0x10, 6	; 16
        0000 0000     0000 0000
        ~1100 0000 -> 0011 1111
                      0000 0000

    */
    PORTF |= (1 << PF6); // quiero que constantemente se este sacando un 1 por el pin 6 del puerto, por esa razon lo asigno
 12e:	8e 9a       	sbi	0x11, 6	; 17
    // con un OR
}
 130:	08 95       	ret

00000132 <waitState>:
            break;
        }
    }
}*/

void waitState() {
 132:	df 93       	push	r29
 134:	cf 93       	push	r28
 136:	0f 92       	push	r0
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62

    volatile uint8_t indice=0;
 13c:	19 82       	std	Y+1, r1	; 0x01
 13e:	0f c0       	rjmp	.+30     	; 0x15e <waitState+0x2c>
    while(indice<8){
        DDRF = _CONF_DDR[indice];
 140:	e9 81       	ldd	r30, Y+1	; 0x01
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	e8 5f       	subi	r30, 0xF8	; 248
 146:	fd 4f       	sbci	r31, 0xFD	; 253
 148:	80 81       	ld	r24, Z
 14a:	80 bb       	out	0x10, r24	; 16
        PORTF =_CONF_PORT[indice];
 14c:	e9 81       	ldd	r30, Y+1	; 0x01
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	e0 50       	subi	r30, 0x00	; 0
 152:	fe 4f       	sbci	r31, 0xFE	; 254
 154:	80 81       	ld	r24, Z
 156:	81 bb       	out	0x11, r24	; 17
        indice++;
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	8f 5f       	subi	r24, 0xFF	; 255
 15c:	89 83       	std	Y+1, r24	; 0x01
}*/

void waitState() {

    volatile uint8_t indice=0;
    while(indice<8){
 15e:	89 81       	ldd	r24, Y+1	; 0x01
 160:	88 30       	cpi	r24, 0x08	; 8
 162:	70 f3       	brcs	.-36     	; 0x140 <waitState+0xe>
        DDRF = _CONF_DDR[indice];
        PORTF =_CONF_PORT[indice];
        indice++;
    }
}
 164:	0f 90       	pop	r0
 166:	cf 91       	pop	r28
 168:	df 91       	pop	r29
 16a:	08 95       	ret

0000016c <updateLeds>:
    // esta funcion debe de devolver estos estados en los cuales se esta haceindo los cambios necesarios para los leds

    // por lo que creo que deberia de ser un switch o esta funcion invocar a otras que haga ese proceso.


    switch (gameState)
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	11 f4       	brne	.+4      	; 0x174 <updateLeds+0x8>
    {

        case eWaitForStart:
        {
            waitState();
 170:	0e 94 99 00 	call	0x132	; 0x132 <waitState>
 174:	08 95       	ret

00000176 <check_Btn>:
/*
ok el check btn no esta del todo bien, esto porque

*/
uint8_t check_Btn(void)
{
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
    // el circuoto del boton esta en pull - up, por lo que para verificar si el boton
    // esta presionado o no, no presiondado = 1 - HIGH
    //  presionado = 0 - LOW
    // PINx lee el estado fisico del pin

    delay(20); // esperar 20 ms antes de actuar
 17a:	84 e1       	ldi	r24, 0x14	; 20
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 55 01 	call	0x2aa	; 0x2aa <delay>

    if (PINF & (1 << BTN_PIN))
 182:	7f 99       	sbic	0x0f, 7	; 15
 184:	23 c0       	rjmp	.+70     	; 0x1cc <check_Btn+0x56>
 186:	c0 e0       	ldi	r28, 0x00	; 0
 188:	d0 e0       	ldi	r29, 0x00	; 0
    uint16_t tiempo_presionado = 0;

    while (1)
    {

        delay(1);
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 55 01 	call	0x2aa	; 0x2aa <delay>
        tiempo_presionado++;

        if (PINF & (1 << BTN_PIN))
 192:	7f 99       	sbic	0x0f, 7	; 15
 194:	12 c0       	rjmp	.+36     	; 0x1ba <check_Btn+0x44>

    while (1)
    {

        delay(1);
        tiempo_presionado++;
 196:	21 96       	adiw	r28, 0x01	; 1
            break;
        }

        // si se superoa el segundo se detecta como largo

        if (tiempo_presionado >= 1000)
 198:	83 e0       	ldi	r24, 0x03	; 3
 19a:	c8 3e       	cpi	r28, 0xE8	; 232
 19c:	d8 07       	cpc	r29, r24
 19e:	a9 f7       	brne	.-22     	; 0x18a <check_Btn+0x14>
 1a0:	04 c0       	rjmp	.+8      	; 0x1aa <check_Btn+0x34>
        {

            //
            while (!(PINF & (1 << BTN_PIN)))
            {
                delay(1);
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 55 01 	call	0x2aa	; 0x2aa <delay>

        if (tiempo_presionado >= 1000)
        {

            //
            while (!(PINF & (1 << BTN_PIN)))
 1aa:	7f 9b       	sbis	0x0f, 7	; 15
 1ac:	fa cf       	rjmp	.-12     	; 0x1a2 <check_Btn+0x2c>
            {
                delay(1);
            }
            delay(20);
 1ae:	84 e1       	ldi	r24, 0x14	; 20
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 55 01 	call	0x2aa	; 0x2aa <delay>
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	0a c0       	rjmp	.+20     	; 0x1ce <check_Btn+0x58>
            return  eBtnLongPressed;
        }
    }

    delay(20);
 1ba:	84 e1       	ldi	r24, 0x14	; 20
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 55 01 	call	0x2aa	; 0x2aa <delay>
    if (PINF & (1 << BTN_PIN))
 1c2:	7f 9b       	sbis	0x0f, 7	; 15
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <check_Btn+0x54>
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <check_Btn+0x58>
 1ca:	01 c0       	rjmp	.+2      	; 0x1ce <check_Btn+0x58>
    {

        return eBtnShortPressed;
    }
}
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <main>:
uint32_t millis;
uint32_t lastUpdate=0;
volatile uint8_t _start_game_=0;

int main(void)
{
 1d4:	cf 92       	push	r12
 1d6:	df 92       	push	r13
 1d8:	ef 92       	push	r14
 1da:	ff 92       	push	r15
 1dc:	1f 93       	push	r17
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
    uint8_t bucle = 1;
    // InitPorts();
    uint8_t lectura;
    uint8_t btn;
	
	btn = (myRand(SEED) + 1) * 20;
 1e2:	80 e1       	ldi	r24, 0x10	; 16
 1e4:	0e 94 78 01 	call	0x2f0	; 0x2f0 <myRand>
    // configurar los pines 0 - 3  como salida
	
	__asm__("nop");
 1e8:	00 00       	nop
    // prueba

		btn = (myRand(SEED) + 1) * 20;
 1ea:	80 e1       	ldi	r24, 0x10	; 16
 1ec:	0e 94 78 01 	call	0x2f0	; 0x2f0 <myRand>
    // configurar los pines 0 - 3  como salida
	
	__asm__("nop");
 1f0:	00 00       	nop
 1f2:	10 e0       	ldi	r17, 0x00	; 0
 1f4:	c0 e0       	ldi	r28, 0x00	; 0
 1f6:	d0 e0       	ldi	r29, 0x00	; 0
 1f8:	ee 24       	eor	r14, r14
 1fa:	ff 24       	eor	r15, r15

        switch (currentGameState)
        {
        case eGameRestart:
        {
            countdown = (myRand(SEED) + 1) * 20;
 1fc:	84 e1       	ldi	r24, 0x14	; 20
 1fe:	c8 2e       	mov	r12, r24
 200:	d1 2c       	mov	r13, r1
    while (1)
    {

        //btn=  check_Bt();

        switch (check_Btn())
 202:	0e 94 bb 00 	call	0x176	; 0x176 <check_Btn>
 206:	81 30       	cpi	r24, 0x01	; 1
 208:	19 f0       	breq	.+6      	; 0x210 <main+0x3c>
 20a:	82 30       	cpi	r24, 0x02	; 2
 20c:	11 f4       	brne	.+4      	; 0x212 <main+0x3e>
 20e:	0d c0       	rjmp	.+26     	; 0x22a <main+0x56>
        {
        case eBtnShortPressed:
            currentGameState++;
 210:	1f 5f       	subi	r17, 0xFF	; 255
        case eBtnLongPressed:
            currentGameState = eGameRestart;
            break;
        }

        switch (currentGameState)
 212:	12 30       	cpi	r17, 0x02	; 2
 214:	d1 f0       	breq	.+52     	; 0x24a <main+0x76>
 216:	13 30       	cpi	r17, 0x03	; 3
 218:	18 f4       	brcc	.+6      	; 0x220 <main+0x4c>
 21a:	11 23       	and	r17, r17
 21c:	31 f0       	breq	.+12     	; 0x22a <main+0x56>
 21e:	2a c0       	rjmp	.+84     	; 0x274 <main+0xa0>
 220:	13 30       	cpi	r17, 0x03	; 3
 222:	b9 f0       	breq	.+46     	; 0x252 <main+0x7e>
 224:	14 30       	cpi	r17, 0x04	; 4
 226:	31 f5       	brne	.+76     	; 0x274 <main+0xa0>
 228:	1c c0       	rjmp	.+56     	; 0x262 <main+0x8e>
        {
        case eGameRestart:
        {
            countdown = (myRand(SEED) + 1) * 20;
 22a:	80 e1       	ldi	r24, 0x10	; 16
 22c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <myRand>
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	8c 9d       	mul	r24, r12
 236:	e0 01       	movw	r28, r0
 238:	8d 9d       	mul	r24, r13
 23a:	d0 0d       	add	r29, r0
 23c:	9c 9d       	mul	r25, r12
 23e:	d0 0d       	add	r29, r0
 240:	11 24       	eor	r1, r1
 242:	11 e0       	ldi	r17, 0x01	; 1
 244:	ee 24       	eor	r14, r14
 246:	ff 24       	eor	r15, r15
 248:	15 c0       	rjmp	.+42     	; 0x274 <main+0xa0>
            }*/

            break;
        case eStartCount:
        {
            countdown--;
 24a:	21 97       	sbiw	r28, 0x01	; 1
            if (countdown == 0)
 24c:	99 f4       	brne	.+38     	; 0x274 <main+0xa0>
 24e:	13 e0       	ldi	r17, 0x03	; 3
 250:	11 c0       	rjmp	.+34     	; 0x274 <main+0xa0>

            break;
        }
        case eEndCount:
        {
            if (countdown != 0)
 252:	20 97       	sbiw	r28, 0x00	; 0
 254:	11 f0       	breq	.+4      	; 0x25a <main+0x86>
 256:	14 e0       	ldi	r17, 0x04	; 4
 258:	0d c0       	rjmp	.+26     	; 0x274 <main+0xa0>
                currentGameState++;
            else
                countup++;
 25a:	08 94       	sec
 25c:	e1 1c       	adc	r14, r1
 25e:	f1 1c       	adc	r15, r1
 260:	09 c0       	rjmp	.+18     	; 0x274 <main+0xa0>
            break;
        }
        case eGameOver:
        {
            if ((countdown + countup) > TIME_WINDOW)
 262:	c7 01       	movw	r24, r14
 264:	8c 0f       	add	r24, r28
 266:	9d 1f       	adc	r25, r29
 268:	8d 52       	subi	r24, 0x2D	; 45
 26a:	91 40       	sbci	r25, 0x01	; 1
 26c:	10 f4       	brcc	.+4      	; 0x272 <main+0x9e>
 26e:	15 e0       	ldi	r17, 0x05	; 5
 270:	01 c0       	rjmp	.+2      	; 0x274 <main+0xa0>
 272:	16 e0       	ldi	r17, 0x06	; 6
                currentGameState = eYouWin;
            break;
        }
        }

        updateLeds(currentGameState);
 274:	81 2f       	mov	r24, r17
 276:	0e 94 b6 00 	call	0x16c	; 0x16c <updateLeds>
        delay(1);
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 55 01 	call	0x2aa	; 0x2aa <delay>
        millis++;
 282:	80 91 15 02 	lds	r24, 0x0215
 286:	90 91 16 02 	lds	r25, 0x0216
 28a:	a0 91 17 02 	lds	r26, 0x0217
 28e:	b0 91 18 02 	lds	r27, 0x0218
 292:	01 96       	adiw	r24, 0x01	; 1
 294:	a1 1d       	adc	r26, r1
 296:	b1 1d       	adc	r27, r1
 298:	80 93 15 02 	sts	0x0215, r24
 29c:	90 93 16 02 	sts	0x0216, r25
 2a0:	a0 93 17 02 	sts	0x0217, r26
 2a4:	b0 93 18 02 	sts	0x0218, r27
 2a8:	ac cf       	rjmp	.-168    	; 0x202 <main+0x2e>

000002aa <delay>:
delay:

	; en este tendre que hacer muchos descuentos por esto de
	;cunado sea 0 y  lo demas

	cpi r24, 0x00 ; 1
 2aa:	80 30       	cpi	r24, 0x00	; 0
	breq final ;2 - 1
 2ac:	49 f0       	breq	.+18     	; 0x2c0 <final>

	cpi r24, 0x01
 2ae:	81 30       	cpi	r24, 0x01	; 1
	breq un_mSeg; si r24 es 1 ms entonces ira a una subrutina la cual durara
 2b0:	41 f0       	breq	.+16     	; 0x2c2 <un_mSeg>

000002b2 <ciclo>:
	;dira 1ms segun lo que se mando por parametro


	ciclo:

		call delay_general
 2b2:	0e 94 6d 01 	call	0x2da	; 0x2da <delay_general>

		sbiw r24, 1 ; 2
 2b6:	01 97       	sbiw	r24, 0x01	; 1

		cpi r24, 0x01 ;1
 2b8:	81 30       	cpi	r24, 0x01	; 1
		brne ciclo ; 2 - 1
 2ba:	d9 f7       	brne	.-10     	; 0x2b2 <ciclo>

		cpi r24,0x01
 2bc:	81 30       	cpi	r24, 0x01	; 1
		breq un_mSeg ; se cumple siempre
 2be:	09 f0       	breq	.+2      	; 0x2c2 <un_mSeg>

000002c0 <final>:


final:
	; agrego un nop porque al final

	ret
 2c0:	08 95       	ret

000002c2 <un_mSeg>:
	; jmp -> 3 ciclos

	;usaremos de igual r16-r17-r18


	ldi r16,2 ; 1
 2c2:	02 e0       	ldi	r16, 0x02	; 2

000002c4 <ciclo0_1mS>:
	ciclo0_1mS:
		ldi r17,11 ; 1x
 2c4:	1b e0       	ldi	r17, 0x0B	; 11
	...

000002c8 <ciclo1_1mS>:
		nop ; 1x

		ciclo1_1mS:
			ldi r18, 241 ; 1xy
 2c8:	21 ef       	ldi	r18, 0xF1	; 241

000002ca <ciclo2_1mS>:

			ciclo2_1mS:
				dec r18 ; 1xyz
 2ca:	2a 95       	dec	r18
				brne ciclo2_1mS ; xy(2z-1)
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <ciclo2_1mS>

			dec r17 ; 1xy
 2ce:	1a 95       	dec	r17
			brne ciclo1_1mS ;x(2y-1)
 2d0:	d9 f7       	brne	.-10     	; 0x2c8 <ciclo1_1mS>

		dec r16 ; 1x
 2d2:	0a 95       	dec	r16
		brne ciclo0_1mS ; (2x-1)
 2d4:	b9 f7       	brne	.-18     	; 0x2c4 <ciclo0_1mS>

	jmp final
 2d6:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <final>

000002da <delay_general>:

	; este no va a durar exactamento delo 16,000 porque va a contar
	;en su ciclo las comparaciones fuera y al parecer tan solo tendra
	;en el ultimo que le faltaria 1 de la comparacion que no es correcta

	ldi r16, 115 ; 1
 2da:	03 e7       	ldi	r16, 0x73	; 115

000002dc <ciclo_0>:

	ciclo_0:
		ldi r17, 1 ; 1x
 2dc:	11 e0       	ldi	r17, 0x01	; 1
	...

000002e0 <ciclo_1>:
		nop

		ciclo_1:

			ldi r18, 44 ; 1xy
 2e0:	2c e2       	ldi	r18, 0x2C	; 44

000002e2 <ciclo_2>:
			ciclo_2:
				dec r18 ; 1zxy
 2e2:	2a 95       	dec	r18
				brne ciclo_2 ; xy(2z-1)
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <ciclo_2>

			dec r17 ; 1xy
 2e6:	1a 95       	dec	r17
			brne ciclo_1 ;x(2y-1)
 2e8:	d9 f7       	brne	.-10     	; 0x2e0 <ciclo_1>

		dec r16 ; 1x
 2ea:	0a 95       	dec	r16
		brne ciclo_0 ;(2x-1)
 2ec:	b9 f7       	brne	.-18     	; 0x2dc <ciclo_0>
	ret
 2ee:	08 95       	ret

000002f0 <myRand>:

myRand:
    ; Entrada: seed en r24
    ; Salida: n?mero pseudoaleatorio en r24

    mov r16, r24      ; r16 = seed
 2f0:	08 2f       	mov	r16, r24

    ; Multiplicar X por 5: (X << 2) + X
    mov r18, r16      ; r18 = copia de X
 2f2:	20 2f       	mov	r18, r16
    lsl r16           ; X * 2
 2f4:	00 0f       	add	r16, r16
    lsl r16           ; X * 4
 2f6:	00 0f       	add	r16, r16
    add r16, r18      ; X * 5
 2f8:	02 0f       	add	r16, r18

    ; Sumar 1
    ldi r18, 1
 2fa:	21 e0       	ldi	r18, 0x01	; 1
    add r16, r18      ; 5*X + 1 (mod 256 autom?ticamente)
 2fc:	02 0f       	add	r16, r18

    ; Devolver resultado en r24
    mov r24, r16
 2fe:	80 2f       	mov	r24, r16

    ret
 300:	08 95       	ret

00000302 <_exit>:
 302:	f8 94       	cli

00000304 <__stop_program>:
 304:	ff cf       	rjmp	.-2      	; 0x304 <__stop_program>
