
practica6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800200  000005aa  0000063e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080023a  0080023a  00000678  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000bd  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006bb  00000000  00000000  00000775  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002fa  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000047a  00000000  00000000  0000112a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  000015a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d6  00000000  00000000  00001654  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003a8  00000000  00000000  0000182a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  00001bd2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ea       	ldi	r30, 0xAA	; 170
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 33       	cpi	r26, 0x3A	; 58
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	aa e3       	ldi	r26, 0x3A	; 58
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 34       	cpi	r26, 0x40	; 64
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 95 00 	call	0x12a	; 0x12a <main>
 122:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <main>:
#include "UART.h"



int main( void )
{
 12a:	ef 92       	push	r14
 12c:	ff 92       	push	r15
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	df 93       	push	r29
 134:	cf 93       	push	r28
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
 13a:	ac 97       	sbiw	r28, 0x2c	; 44
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	f8 94       	cli
 140:	de bf       	out	0x3e, r29	; 62
 142:	0f be       	out	0x3f, r0	; 63
 144:	cd bf       	out	0x3d, r28	; 61
    char cad[22];
    char cadUart3[22];
    uint16_t num;


    UART_Ini(0,12345,8,1,2); //comunicacion con teraterm
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	49 e3       	ldi	r20, 0x39	; 57
 14a:	50 e3       	ldi	r21, 0x30	; 48
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	28 e0       	ldi	r18, 0x08	; 8
 152:	01 e0       	ldi	r16, 0x01	; 1
 154:	92 e0       	ldi	r25, 0x02	; 2
 156:	e9 2e       	mov	r14, r25
 158:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Ini>
    UART_Ini(2,115200,8,0,1);
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	40 e0       	ldi	r20, 0x00	; 0
 160:	52 ec       	ldi	r21, 0xC2	; 194
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	28 e0       	ldi	r18, 0x08	; 8
 168:	00 e0       	ldi	r16, 0x00	; 0
 16a:	ee 24       	eor	r14, r14
 16c:	e3 94       	inc	r14
 16e:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Ini>
    UART_Ini(3,115200,8,0,1);
 172:	83 e0       	ldi	r24, 0x03	; 3
 174:	40 e0       	ldi	r20, 0x00	; 0
 176:	52 ec       	ldi	r21, 0xC2	; 194
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	70 e0       	ldi	r23, 0x00	; 0
 17c:	28 e0       	ldi	r18, 0x08	; 8
 17e:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Ini>
        UART_setColor(0,YELLOW);
        UART_puts(0,"Introduce un n?mero:\0"); //terminamos con un caracter nulo, funciona bien puts

        //UART_gotoxy(0,22,2);
        UART_setColor(0,GREEN);
        UART_gets(0,cad); //vreremos si este funciona correcto
 182:	8e 01       	movw	r16, r28
 184:	0f 5f       	subi	r16, 0xFF	; 255
 186:	1f 4f       	sbci	r17, 0xFF	; 255
// -------------------------------------------
        // Cycle through UART2->UART3
        UART_puts(2,cad);
        UART_puts(2,"\r");
        UART_gets(3,cadUart3);
 188:	87 e1       	ldi	r24, 0x17	; 23
 18a:	e8 2e       	mov	r14, r24
 18c:	f1 2c       	mov	r15, r1
 18e:	ec 0e       	add	r14, r28
 190:	fd 1e       	adc	r15, r29
    UART_Ini(0,12345,8,1,2); //comunicacion con teraterm
    UART_Ini(2,115200,8,0,1);
    UART_Ini(3,115200,8,0,1);
    while(1)
    {
        UART_getchar(0);//getchar funciona OK
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 a8 01 	call	0x350	; 0x350 <UART_getchar>
        UART_clrscr(0);
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 b6 01 	call	0x36c	; 0x36c <UART_clrscr>

        //UART_gotoxy(0,2,2);
        UART_setColor(0,YELLOW);
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	61 e2       	ldi	r22, 0x21	; 33
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	0e 94 c3 01 	call	0x386	; 0x386 <UART_setColor>
        UART_puts(0,"Introduce un n?mero:\0"); //terminamos con un caracter nulo, funciona bien puts
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	60 e0       	ldi	r22, 0x00	; 0
 1b4:	72 e0       	ldi	r23, 0x02	; 2
 1b6:	0e 94 89 01 	call	0x312	; 0x312 <UART_puts>

        //UART_gotoxy(0,22,2);
        UART_setColor(0,GREEN);
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	60 e2       	ldi	r22, 0x20	; 32
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	0e 94 c3 01 	call	0x386	; 0x386 <UART_setColor>
        UART_gets(0,cad); //vreremos si este funciona correcto
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	b8 01       	movw	r22, r16
 1cc:	0e 94 fe 01 	call	0x3fc	; 0x3fc <UART_gets>
// -------------------------------------------
        // Cycle through UART2->UART3
        UART_puts(2,cad);
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	b8 01       	movw	r22, r16
 1d6:	0e 94 89 01 	call	0x312	; 0x312 <UART_puts>
        UART_puts(2,"\r");
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	66 e1       	ldi	r22, 0x16	; 22
 1e0:	72 e0       	ldi	r23, 0x02	; 2
 1e2:	0e 94 89 01 	call	0x312	; 0x312 <UART_puts>
        UART_gets(3,cadUart3);
 1e6:	83 e0       	ldi	r24, 0x03	; 3
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	b7 01       	movw	r22, r14
 1ec:	0e 94 fe 01 	call	0x3fc	; 0x3fc <UART_gets>
        //UART_gotoxy(0,5,3);
        UART_puts(0,cadUart3);
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	b7 01       	movw	r22, r14
 1f6:	0e 94 89 01 	call	0x312	; 0x312 <UART_puts>
// -------------------------------------------
        //num = atoi(cad);
        //itoa(num,cad,16);

        //UART_gotoxy(0,5,4);
        UART_setColor(0,BLUE);
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	62 e2       	ldi	r22, 0x22	; 34
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	0e 94 c3 01 	call	0x386	; 0x386 <UART_setColor>
        UART_puts(0,"Hex: ");
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	68 e1       	ldi	r22, 0x18	; 24
 20c:	72 e0       	ldi	r23, 0x02	; 2
 20e:	0e 94 89 01 	call	0x312	; 0x312 <UART_puts>
        UART_puts(0,cad);
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	b8 01       	movw	r22, r16
 218:	0e 94 89 01 	call	0x312	; 0x312 <UART_puts>
        //itoa(num,cad,2);

        //UART_gotoxy(0,5,5);
        UART_puts(0,"Bin: ");
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	6e e1       	ldi	r22, 0x1E	; 30
 222:	72 e0       	ldi	r23, 0x02	; 2
 224:	0e 94 89 01 	call	0x312	; 0x312 <UART_puts>
        UART_puts(0,cad);
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	b8 01       	movw	r22, r16
 22e:	0e 94 89 01 	call	0x312	; 0x312 <UART_puts>
 232:	af cf       	rjmp	.-162    	; 0x192 <main+0x68>

00000234 <UART_Ini>:

};



UART_Ini(uint8_t com, uint32_t baudrate, uint8_t size, uint8_t parity, uint8_t stop){
 234:	af 92       	push	r10
 236:	bf 92       	push	r11
 238:	cf 92       	push	r12
 23a:	df 92       	push	r13
 23c:	ef 92       	push	r14
 23e:	0f 93       	push	r16
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	5a 01       	movw	r10, r20
 246:	6b 01       	movw	r12, r22
 248:	92 2f       	mov	r25, r18
 24a:	2e 2d       	mov	r18, r14

    UART_reg_t *myUART = UART_offset[com]; // eligo a mi UART
 24c:	e8 2f       	mov	r30, r24
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	ee 0f       	add	r30, r30
 252:	ff 1f       	adc	r31, r31
 254:	ee 5c       	subi	r30, 0xCE	; 206
 256:	fd 4f       	sbci	r31, 0xFD	; 253
 258:	c0 81       	ld	r28, Z
 25a:	d1 81       	ldd	r29, Z+1	; 0x01

    myUART->UCSRB = (1 << TXEN0) | (1 << RXEN0); // Habilita TX y RX para UART0
 25c:	88 e1       	ldi	r24, 0x18	; 24
 25e:	89 83       	std	Y+1, r24	; 0x01
    //establecer las paridades
	//uint8_t parity_mode= (parity == 1) ? 2 : 3;  // 2: Paridad par, 3: Paridad impar

    uint8_t parity_mode=0;

    switch(parity){
 260:	01 30       	cpi	r16, 0x01	; 1
 262:	21 f0       	breq	.+8      	; 0x26c <UART_Ini+0x38>
 264:	02 30       	cpi	r16, 0x02	; 2
 266:	21 f4       	brne	.+8      	; 0x270 <UART_Ini+0x3c>
 268:	82 e0       	ldi	r24, 0x02	; 2
 26a:	03 c0       	rjmp	.+6      	; 0x272 <UART_Ini+0x3e>
 26c:	83 e0       	ldi	r24, 0x03	; 3
 26e:	01 c0       	rjmp	.+2      	; 0x272 <UART_Ini+0x3e>
 270:	80 e0       	ldi	r24, 0x00	; 0
    //me manda sde de 1 o 2 por lo que ocn este ternearo decivo si es 1 sera 1 bit de parada 0
    //pero si es otro valor seran 2 bits de parada

    uint8_t stop_mode= (stop == 1)? 0:1;

    myUART->UCSRC = (parity_mode << UPM00) | (stop_mode <<USBS0);
 272:	e8 2f       	mov	r30, r24
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	54 e0       	ldi	r21, 0x04	; 4
 278:	ee 0f       	add	r30, r30
 27a:	ff 1f       	adc	r31, r31
 27c:	5a 95       	dec	r21
 27e:	e1 f7       	brne	.-8      	; 0x278 <UART_Ini+0x44>
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	70 e0       	ldi	r23, 0x00	; 0
 284:	21 30       	cpi	r18, 0x01	; 1
 286:	11 f0       	breq	.+4      	; 0x28c <UART_Ini+0x58>
 288:	61 e0       	ldi	r22, 0x01	; 1
 28a:	70 e0       	ldi	r23, 0x00	; 0
 28c:	43 e0       	ldi	r20, 0x03	; 3
 28e:	66 0f       	add	r22, r22
 290:	77 1f       	adc	r23, r23
 292:	4a 95       	dec	r20
 294:	e1 f7       	brne	.-8      	; 0x28e <UART_Ini+0x5a>
 296:	8e 2f       	mov	r24, r30
 298:	86 2b       	or	r24, r22
 29a:	8a 83       	std	Y+2, r24	; 0x02

		myUART->UCSRC = 3 << UCSZ00;
		myUART->UCSRB = 1<< UCSZ02; //habilitamos los 9 bits
	}*/

	if (size == 9) {
 29c:	99 30       	cpi	r25, 0x09	; 9
 29e:	39 f4       	brne	.+14     	; 0x2ae <UART_Ini+0x7a>
        myUART->UCSRC |= (3 << UCSZ00); // UCSZ01:UCSZ00 = 0b11
 2a0:	8a 81       	ldd	r24, Y+2	; 0x02
 2a2:	86 60       	ori	r24, 0x06	; 6
 2a4:	8a 83       	std	Y+2, r24	; 0x02
        myUART->UCSRB |= (1 << UCSZ02); // Habilitar bit 9
 2a6:	89 81       	ldd	r24, Y+1	; 0x01
 2a8:	84 60       	ori	r24, 0x04	; 4
 2aa:	89 83       	std	Y+1, r24	; 0x01
 2ac:	08 c0       	rjmp	.+16     	; 0x2be <UART_Ini+0x8a>
    } else
     {
        myUART->UCSRC |= ((size - 5) << UCSZ00); // Ej: 8 bits ? 3 << UCSZ00
 2ae:	2a 81       	ldd	r18, Y+2	; 0x02
 2b0:	89 2f       	mov	r24, r25
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	05 97       	sbiw	r24, 0x05	; 5
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	28 2b       	or	r18, r24
 2bc:	2a 83       	std	Y+2, r18	; 0x02
    }

    uint16_t v_UBRR = (FOSC / (16 * baudrate)) - 1 ;
 2be:	84 e0       	ldi	r24, 0x04	; 4
 2c0:	aa 0c       	add	r10, r10
 2c2:	bb 1c       	adc	r11, r11
 2c4:	cc 1c       	adc	r12, r12
 2c6:	dd 1c       	adc	r13, r13
 2c8:	8a 95       	dec	r24
 2ca:	d1 f7       	brne	.-12     	; 0x2c0 <UART_Ini+0x8c>
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	74 e2       	ldi	r23, 0x24	; 36
 2d0:	84 ef       	ldi	r24, 0xF4	; 244
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	a6 01       	movw	r20, r12
 2d6:	95 01       	movw	r18, r10
 2d8:	0e 94 7e 02 	call	0x4fc	; 0x4fc <__udivmodsi4>
 2dc:	21 50       	subi	r18, 0x01	; 1
 2de:	30 40       	sbci	r19, 0x00	; 0
    myUART->UBRR = v_UBRR;
 2e0:	3d 83       	std	Y+5, r19	; 0x05
 2e2:	2c 83       	std	Y+4, r18	; 0x04
}
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	0f 91       	pop	r16
 2ea:	ef 90       	pop	r14
 2ec:	df 90       	pop	r13
 2ee:	cf 90       	pop	r12
 2f0:	bf 90       	pop	r11
 2f2:	af 90       	pop	r10
 2f4:	08 95       	ret

000002f6 <UART_putchar>:
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 2f6:	e8 2f       	mov	r30, r24
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	ee 0f       	add	r30, r30
 2fc:	ff 1f       	adc	r31, r31
 2fe:	ee 5c       	subi	r30, 0xCE	; 206
 300:	fd 4f       	sbci	r31, 0xFD	; 253
 302:	01 90       	ld	r0, Z+
 304:	f0 81       	ld	r31, Z
 306:	e0 2d       	mov	r30, r0
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 308:	80 81       	ld	r24, Z
 30a:	85 ff       	sbrs	r24, 5
 30c:	fd cf       	rjmp	.-6      	; 0x308 <UART_putchar+0x12>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 30e:	66 83       	std	Z+6, r22	; 0x06
}
 310:	08 95       	ret

00000312 <UART_puts>:
*/


//este haria lo mismo de putchar la unica deiferente es que este estara
//recorriendo la cadena que se quiere imprimir
void UART_puts(uint8_t com, char *str){
 312:	1f 93       	push	r17
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	18 2f       	mov	r17, r24
 31a:	eb 01       	movw	r28, r22
 31c:	06 c0       	rjmp	.+12     	; 0x32a <UART_puts+0x18>

	//TXn trasmitir el contenido
	while(*str!= '\0'){
		//mientras haya contenido en el apuntador, que sea diferente a NULL
		UART_putchar(com,*str++);
 31e:	21 96       	adiw	r28, 0x01	; 1
 320:	81 2f       	mov	r24, r17
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	70 e0       	ldi	r23, 0x00	; 0
 326:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <UART_putchar>
//este haria lo mismo de putchar la unica deiferente es que este estara
//recorriendo la cadena que se quiere imprimir
void UART_puts(uint8_t com, char *str){

	//TXn trasmitir el contenido
	while(*str!= '\0'){
 32a:	68 81       	ld	r22, Y
 32c:	66 23       	and	r22, r22
 32e:	b9 f7       	brne	.-18     	; 0x31e <UART_puts+0xc>
		//mientras haya contenido en el apuntador, que sea diferente a NULL
		UART_putchar(com,*str++);
	}
}
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	1f 91       	pop	r17
 336:	08 95       	ret

00000338 <UART_available>:
uint8_t UART_available(uint8_t com){

	//RXC0 sta en 1 cuando hay un dato sin leer en RXC
	//y esta en 0 cunado este no tiene nada

	UART_reg_t *myUART = UART_offset[com];
 338:	e8 2f       	mov	r30, r24
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	ee 0f       	add	r30, r30
 33e:	ff 1f       	adc	r31, r31
 340:	ee 5c       	subi	r30, 0xCE	; 206
 342:	fd 4f       	sbci	r31, 0xFD	; 253
 344:	01 90       	ld	r0, Z+
 346:	f0 81       	ld	r31, Z
 348:	e0 2d       	mov	r30, r0

	return (myUART->UCSRA & (1 << RXC0)) ; // Hay dato disponible
 34a:	80 81       	ld	r24, Z
	//creo que va a asi pero si hay errores podemos invertirlo
}
 34c:	80 78       	andi	r24, 0x80	; 128
 34e:	08 95       	ret

00000350 <UART_getchar>:
	return myUART->UDR;
}*/


char UART_getchar(uint8_t com) {
    UART_reg_t *myUART = UART_offset[com];
 350:	e8 2f       	mov	r30, r24
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	ee 0f       	add	r30, r30
 356:	ff 1f       	adc	r31, r31
 358:	ee 5c       	subi	r30, 0xCE	; 206
 35a:	fd 4f       	sbci	r31, 0xFD	; 253
 35c:	01 90       	ld	r0, Z+
 35e:	f0 81       	ld	r31, Z
 360:	e0 2d       	mov	r30, r0
	//RXC0 sta en 1 cuando hay un dato sin leer en RXC
	//y esta en 0 cunado este no tiene nada

	UART_reg_t *myUART = UART_offset[com];

	return (myUART->UCSRA & (1 << RXC0)) ; // Hay dato disponible
 362:	80 81       	ld	r24, Z
}*/


char UART_getchar(uint8_t com) {
    UART_reg_t *myUART = UART_offset[com];
    while (!(UART_available(com))); // Espera dato
 364:	87 ff       	sbrs	r24, 7
 366:	fd cf       	rjmp	.-6      	; 0x362 <UART_getchar+0x12>
    return myUART->UDR;
 368:	86 81       	ldd	r24, Z+6	; 0x06
}
 36a:	08 95       	ret

0000036c <UART_clrscr>:

}


// Escape sequences
UART_clrscr( uint8_t com ){
 36c:	1f 93       	push	r17
 36e:	18 2f       	mov	r17, r24
        que con ESC[2J se borra toda la pantalla

        lo mismo para con posicionar al inicio de la termianl
        sin parametros H se estbalce en la fila1 - columna1
    */
    UART_puts(com,"\x1B[2J"); //borra toda la pantalla
 370:	64 e2       	ldi	r22, 0x24	; 36
 372:	72 e0       	ldi	r23, 0x02	; 2
 374:	0e 94 89 01 	call	0x312	; 0x312 <UART_puts>
    UART_puts(com,"\x1B[H"); // poen el curso al incio fila 1, columna 1
 378:	81 2f       	mov	r24, r17
 37a:	69 e2       	ldi	r22, 0x29	; 41
 37c:	72 e0       	ldi	r23, 0x02	; 2
 37e:	0e 94 89 01 	call	0x312	; 0x312 <UART_puts>


}
 382:	1f 91       	pop	r17
 384:	08 95       	ret

00000386 <UART_setColor>:
    UART_puts(com,x+1);
    UART_puts(com,"f");
}
*/

UART_setColor(uint8_t com, uint8_t color){
 386:	0f 93       	push	r16
 388:	1f 93       	push	r17
 38a:	18 2f       	mov	r17, r24
 38c:	06 2f       	mov	r16, r22


    UART_puts(com,"\x1B["); //incio del comando espace
 38e:	6d e2       	ldi	r22, 0x2D	; 45
 390:	72 e0       	ldi	r23, 0x02	; 2
 392:	0e 94 89 01 	call	0x312	; 0x312 <UART_puts>
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 396:	a1 2f       	mov	r26, r17
 398:	b0 e0       	ldi	r27, 0x00	; 0
 39a:	fd 01       	movw	r30, r26
 39c:	ee 0f       	add	r30, r30
 39e:	ff 1f       	adc	r31, r31
 3a0:	ee 5c       	subi	r30, 0xCE	; 206
 3a2:	fd 4f       	sbci	r31, 0xFD	; 253
 3a4:	01 90       	ld	r0, Z+
 3a6:	f0 81       	ld	r31, Z
 3a8:	e0 2d       	mov	r30, r0
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 3aa:	80 81       	ld	r24, Z
 3ac:	85 ff       	sbrs	r24, 5
 3ae:	fd cf       	rjmp	.-6      	; 0x3aa <UART_setColor+0x24>

UART_setColor(uint8_t com, uint8_t color){


    UART_puts(com,"\x1B["); //incio del comando espace
    UART_putchar(com, '0'+(color/10)); //decena del caracter
 3b0:	80 2f       	mov	r24, r16
 3b2:	6a e0       	ldi	r22, 0x0A	; 10
 3b4:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__udivmodqi4>
 3b8:	80 5d       	subi	r24, 0xD0	; 208

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 3ba:	86 83       	std	Z+6, r24	; 0x06
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 3bc:	fd 01       	movw	r30, r26
 3be:	ee 0f       	add	r30, r30
 3c0:	ff 1f       	adc	r31, r31
 3c2:	ee 5c       	subi	r30, 0xCE	; 206
 3c4:	fd 4f       	sbci	r31, 0xFD	; 253
 3c6:	01 90       	ld	r0, Z+
 3c8:	f0 81       	ld	r31, Z
 3ca:	e0 2d       	mov	r30, r0
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 3cc:	80 81       	ld	r24, Z
 3ce:	85 ff       	sbrs	r24, 5
 3d0:	fd cf       	rjmp	.-6      	; 0x3cc <UART_setColor+0x46>
UART_setColor(uint8_t com, uint8_t color){


    UART_puts(com,"\x1B["); //incio del comando espace
    UART_putchar(com, '0'+(color/10)); //decena del caracter
    UART_putchar(com, '0'+(color%10)); //unidad del caracter
 3d2:	80 2f       	mov	r24, r16
 3d4:	6a e0       	ldi	r22, 0x0A	; 10
 3d6:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__udivmodqi4>
 3da:	90 5d       	subi	r25, 0xD0	; 208

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 3dc:	96 83       	std	Z+6, r25	; 0x06
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 3de:	aa 0f       	add	r26, r26
 3e0:	bb 1f       	adc	r27, r27
 3e2:	ae 5c       	subi	r26, 0xCE	; 206
 3e4:	bd 4f       	sbci	r27, 0xFD	; 253
 3e6:	ed 91       	ld	r30, X+
 3e8:	fc 91       	ld	r31, X
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 3ea:	80 81       	ld	r24, Z
 3ec:	85 ff       	sbrs	r24, 5
 3ee:	fd cf       	rjmp	.-6      	; 0x3ea <UART_setColor+0x64>


    UART_puts(com,"\x1B["); //incio del comando espace
    UART_putchar(com, '0'+(color/10)); //decena del caracter
    UART_putchar(com, '0'+(color%10)); //unidad del caracter
    UART_putchar(com,"m"); //final del comando
 3f0:	80 e3       	ldi	r24, 0x30	; 48
 3f2:	92 e0       	ldi	r25, 0x02	; 2

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 3f4:	86 83       	std	Z+6, r24	; 0x06
    UART_puts(com,"\x1B["); //incio del comando espace
    UART_putchar(com, '0'+(color/10)); //decena del caracter
    UART_putchar(com, '0'+(color%10)); //unidad del caracter
    UART_putchar(com,"m"); //final del comando

 }
 3f6:	1f 91       	pop	r17
 3f8:	0f 91       	pop	r16
 3fa:	08 95       	ret

000003fc <UART_gets>:
    while (!(UART_available(com))); // Espera dato
    return myUART->UDR;
}


void UART_gets(uint8_t com, char *str){
 3fc:	bf 92       	push	r11
 3fe:	cf 92       	push	r12
 400:	df 92       	push	r13
 402:	ef 92       	push	r14
 404:	ff 92       	push	r15
 406:	0f 93       	push	r16
 408:	1f 93       	push	r17
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	6b 01       	movw	r12, r22
 410:	ff 24       	eor	r15, r15
	return myUART->UDR;
}*/


char UART_getchar(uint8_t com) {
    UART_reg_t *myUART = UART_offset[com];
 412:	c8 2f       	mov	r28, r24
 414:	d0 e0       	ldi	r29, 0x00	; 0
 416:	8e 01       	movw	r16, r28
 418:	00 0f       	add	r16, r16
 41a:	11 1f       	adc	r17, r17
 41c:	0e 5c       	subi	r16, 0xCE	; 206
 41e:	1d 4f       	sbci	r17, 0xFD	; 253

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 420:	58 e0       	ldi	r21, 0x08	; 8
 422:	e5 2e       	mov	r14, r21
	return myUART->UDR;
}*/


char UART_getchar(uint8_t com) {
    UART_reg_t *myUART = UART_offset[com];
 424:	40 e2       	ldi	r20, 0x20	; 32
 426:	b4 2e       	mov	r11, r20
 428:	d8 01       	movw	r26, r16
 42a:	ed 91       	ld	r30, X+
 42c:	fc 91       	ld	r31, X
	//RXC0 sta en 1 cuando hay un dato sin leer en RXC
	//y esta en 0 cunado este no tiene nada

	UART_reg_t *myUART = UART_offset[com];

	return (myUART->UCSRA & (1 << RXC0)) ; // Hay dato disponible
 42e:	80 81       	ld	r24, Z
}*/


char UART_getchar(uint8_t com) {
    UART_reg_t *myUART = UART_offset[com];
    while (!(UART_available(com))); // Espera dato
 430:	87 ff       	sbrs	r24, 7
 432:	fd cf       	rjmp	.-6      	; 0x42e <UART_gets+0x32>
    return myUART->UDR;
 434:	66 81       	ldd	r22, Z+6	; 0x06

		-cuando se limpia la pantalla

		*/
		//verificamos si se quiere borrar que en efecto haya algo que borrar
		if(c=='\b'){
 436:	68 30       	cpi	r22, 0x08	; 8
 438:	e9 f4       	brne	.+58     	; 0x474 <UART_gets+0x78>
			if(i>0){
 43a:	ff 20       	and	r15, r15
 43c:	a9 f3       	breq	.-22     	; 0x428 <UART_gets+0x2c>

				str[--i] = '\0'; //sustitumos el utlimo caracter con el nulo
 43e:	fa 94       	dec	r15
 440:	f6 01       	movw	r30, r12
 442:	ef 0d       	add	r30, r15
 444:	f1 1d       	adc	r31, r1
 446:	10 82       	st	Z, r1
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 448:	d8 01       	movw	r26, r16
 44a:	ed 91       	ld	r30, X+
 44c:	fc 91       	ld	r31, X
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 44e:	80 81       	ld	r24, Z
 450:	85 ff       	sbrs	r24, 5
 452:	fd cf       	rjmp	.-6      	; 0x44e <UART_gets+0x52>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 454:	e6 82       	std	Z+6, r14	; 0x06
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 456:	d8 01       	movw	r26, r16
 458:	ed 91       	ld	r30, X+
 45a:	fc 91       	ld	r31, X
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 45c:	80 81       	ld	r24, Z
 45e:	85 ff       	sbrs	r24, 5
 460:	fd cf       	rjmp	.-6      	; 0x45c <UART_gets+0x60>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 462:	b6 82       	std	Z+6, r11	; 0x06
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 464:	d8 01       	movw	r26, r16
 466:	ed 91       	ld	r30, X+
 468:	fc 91       	ld	r31, X
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 46a:	80 81       	ld	r24, Z
 46c:	85 ff       	sbrs	r24, 5
 46e:	fd cf       	rjmp	.-6      	; 0x46a <UART_gets+0x6e>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 470:	e6 82       	std	Z+6, r14	; 0x06
 472:	da cf       	rjmp	.-76     	; 0x428 <UART_gets+0x2c>
				UART_putchar(com,'\b');
			}

			continue; // si no hay nada que borrar o si hay algoq ue borrar sigue con el ciclo
		}
		if(c == '\r' || c== '\n'){
 474:	6d 30       	cpi	r22, 0x0D	; 13
 476:	11 f0       	breq	.+4      	; 0x47c <UART_gets+0x80>
 478:	6a 30       	cpi	r22, 0x0A	; 10
 47a:	31 f5       	brne	.+76     	; 0x4c8 <UART_gets+0xcc>
		//retorno de carro o salto de linea lo que quiere decir que se terminao de escribir el
		//texto actual.

			str[i]='\0'; //caracter nulo denotando que la
 47c:	cf 0c       	add	r12, r15
 47e:	d1 1c       	adc	r13, r1
 480:	f6 01       	movw	r30, r12
 482:	10 82       	st	Z, r1
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 484:	fe 01       	movw	r30, r28
 486:	ee 0f       	add	r30, r30
 488:	ff 1f       	adc	r31, r31
 48a:	ee 5c       	subi	r30, 0xCE	; 206
 48c:	fd 4f       	sbci	r31, 0xFD	; 253
 48e:	01 90       	ld	r0, Z+
 490:	f0 81       	ld	r31, Z
 492:	e0 2d       	mov	r30, r0
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 494:	80 81       	ld	r24, Z
 496:	85 ff       	sbrs	r24, 5
 498:	fd cf       	rjmp	.-6      	; 0x494 <UART_gets+0x98>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 49a:	8d e0       	ldi	r24, 0x0D	; 13
 49c:	86 83       	std	Z+6, r24	; 0x06
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 49e:	cc 0f       	add	r28, r28
 4a0:	dd 1f       	adc	r29, r29
 4a2:	ce 5c       	subi	r28, 0xCE	; 206
 4a4:	dd 4f       	sbci	r29, 0xFD	; 253
 4a6:	e8 81       	ld	r30, Y
 4a8:	f9 81       	ldd	r31, Y+1	; 0x01
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 4aa:	80 81       	ld	r24, Z
 4ac:	85 ff       	sbrs	r24, 5
 4ae:	fd cf       	rjmp	.-6      	; 0x4aa <UART_gets+0xae>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 4b0:	8a e0       	ldi	r24, 0x0A	; 10
 4b2:	86 83       	std	Z+6, r24	; 0x06

	}
*/


}
 4b4:	df 91       	pop	r29
 4b6:	cf 91       	pop	r28
 4b8:	1f 91       	pop	r17
 4ba:	0f 91       	pop	r16
 4bc:	ff 90       	pop	r15
 4be:	ef 90       	pop	r14
 4c0:	df 90       	pop	r13
 4c2:	cf 90       	pop	r12
 4c4:	bf 90       	pop	r11
 4c6:	08 95       	ret
			UART_putchar(com,'\r'); //vuelve al inicio de la linea
			UART_putchar(com,'\n'); //salto de linea
			break; //rompesmos el ciclo y a esperar que se vuelva a escribir algo
		}

		if(i<127){
 4c8:	fe e7       	ldi	r31, 0x7E	; 126
 4ca:	ff 15       	cp	r31, r15
 4cc:	08 f4       	brcc	.+2      	; 0x4d0 <UART_gets+0xd4>
 4ce:	ac cf       	rjmp	.-168    	; 0x428 <UART_gets+0x2c>

			str[i++]= c;
 4d0:	f6 01       	movw	r30, r12
 4d2:	ef 0d       	add	r30, r15
 4d4:	f1 1d       	adc	r31, r1
 4d6:	60 83       	st	Z, r22
 4d8:	f3 94       	inc	r15
			putchar(com, c);
 4da:	ce 01       	movw	r24, r28
 4dc:	70 e0       	ldi	r23, 0x00	; 0
 4de:	0e 94 a0 02 	call	0x540	; 0x540 <putchar>
 4e2:	a2 cf       	rjmp	.-188    	; 0x428 <UART_gets+0x2c>

000004e4 <__udivmodqi4>:
 4e4:	99 1b       	sub	r25, r25
 4e6:	79 e0       	ldi	r23, 0x09	; 9
 4e8:	04 c0       	rjmp	.+8      	; 0x4f2 <__udivmodqi4_ep>

000004ea <__udivmodqi4_loop>:
 4ea:	99 1f       	adc	r25, r25
 4ec:	96 17       	cp	r25, r22
 4ee:	08 f0       	brcs	.+2      	; 0x4f2 <__udivmodqi4_ep>
 4f0:	96 1b       	sub	r25, r22

000004f2 <__udivmodqi4_ep>:
 4f2:	88 1f       	adc	r24, r24
 4f4:	7a 95       	dec	r23
 4f6:	c9 f7       	brne	.-14     	; 0x4ea <__udivmodqi4_loop>
 4f8:	80 95       	com	r24
 4fa:	08 95       	ret

000004fc <__udivmodsi4>:
 4fc:	a1 e2       	ldi	r26, 0x21	; 33
 4fe:	1a 2e       	mov	r1, r26
 500:	aa 1b       	sub	r26, r26
 502:	bb 1b       	sub	r27, r27
 504:	fd 01       	movw	r30, r26
 506:	0d c0       	rjmp	.+26     	; 0x522 <__udivmodsi4_ep>

00000508 <__udivmodsi4_loop>:
 508:	aa 1f       	adc	r26, r26
 50a:	bb 1f       	adc	r27, r27
 50c:	ee 1f       	adc	r30, r30
 50e:	ff 1f       	adc	r31, r31
 510:	a2 17       	cp	r26, r18
 512:	b3 07       	cpc	r27, r19
 514:	e4 07       	cpc	r30, r20
 516:	f5 07       	cpc	r31, r21
 518:	20 f0       	brcs	.+8      	; 0x522 <__udivmodsi4_ep>
 51a:	a2 1b       	sub	r26, r18
 51c:	b3 0b       	sbc	r27, r19
 51e:	e4 0b       	sbc	r30, r20
 520:	f5 0b       	sbc	r31, r21

00000522 <__udivmodsi4_ep>:
 522:	66 1f       	adc	r22, r22
 524:	77 1f       	adc	r23, r23
 526:	88 1f       	adc	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	1a 94       	dec	r1
 52c:	69 f7       	brne	.-38     	; 0x508 <__udivmodsi4_loop>
 52e:	60 95       	com	r22
 530:	70 95       	com	r23
 532:	80 95       	com	r24
 534:	90 95       	com	r25
 536:	9b 01       	movw	r18, r22
 538:	ac 01       	movw	r20, r24
 53a:	bd 01       	movw	r22, r26
 53c:	cf 01       	movw	r24, r30
 53e:	08 95       	ret

00000540 <putchar>:
 540:	60 91 3c 02 	lds	r22, 0x023C
 544:	70 91 3d 02 	lds	r23, 0x023D
 548:	0e 94 a7 02 	call	0x54e	; 0x54e <fputc>
 54c:	08 95       	ret

0000054e <fputc>:
 54e:	0f 93       	push	r16
 550:	1f 93       	push	r17
 552:	cf 93       	push	r28
 554:	df 93       	push	r29
 556:	8c 01       	movw	r16, r24
 558:	eb 01       	movw	r28, r22
 55a:	8b 81       	ldd	r24, Y+3	; 0x03
 55c:	81 ff       	sbrs	r24, 1
 55e:	1b c0       	rjmp	.+54     	; 0x596 <fputc+0x48>
 560:	82 ff       	sbrs	r24, 2
 562:	0d c0       	rjmp	.+26     	; 0x57e <fputc+0x30>
 564:	2e 81       	ldd	r18, Y+6	; 0x06
 566:	3f 81       	ldd	r19, Y+7	; 0x07
 568:	8c 81       	ldd	r24, Y+4	; 0x04
 56a:	9d 81       	ldd	r25, Y+5	; 0x05
 56c:	28 17       	cp	r18, r24
 56e:	39 07       	cpc	r19, r25
 570:	64 f4       	brge	.+24     	; 0x58a <fputc+0x3c>
 572:	e8 81       	ld	r30, Y
 574:	f9 81       	ldd	r31, Y+1	; 0x01
 576:	01 93       	st	Z+, r16
 578:	f9 83       	std	Y+1, r31	; 0x01
 57a:	e8 83       	st	Y, r30
 57c:	06 c0       	rjmp	.+12     	; 0x58a <fputc+0x3c>
 57e:	e8 85       	ldd	r30, Y+8	; 0x08
 580:	f9 85       	ldd	r31, Y+9	; 0x09
 582:	80 2f       	mov	r24, r16
 584:	19 95       	eicall
 586:	89 2b       	or	r24, r25
 588:	31 f4       	brne	.+12     	; 0x596 <fputc+0x48>
 58a:	8e 81       	ldd	r24, Y+6	; 0x06
 58c:	9f 81       	ldd	r25, Y+7	; 0x07
 58e:	01 96       	adiw	r24, 0x01	; 1
 590:	9f 83       	std	Y+7, r25	; 0x07
 592:	8e 83       	std	Y+6, r24	; 0x06
 594:	02 c0       	rjmp	.+4      	; 0x59a <fputc+0x4c>
 596:	0f ef       	ldi	r16, 0xFF	; 255
 598:	1f ef       	ldi	r17, 0xFF	; 255
 59a:	c8 01       	movw	r24, r16
 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	1f 91       	pop	r17
 5a2:	0f 91       	pop	r16
 5a4:	08 95       	ret

000005a6 <_exit>:
 5a6:	f8 94       	cli

000005a8 <__stop_program>:
 5a8:	ff cf       	rjmp	.-2      	; 0x5a8 <__stop_program>
