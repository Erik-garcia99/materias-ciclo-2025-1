
practica6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800200  000007da  0000086e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800248  00800248  000008b6  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  000008b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000ef  00000000  00000000  000008f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000985  00000000  00000000  000009e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000354  00000000  00000000  0000136a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000068e  00000000  00000000  000016be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00001d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000022f  00000000  00000000  00001e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000059c  00000000  00000000  0000206b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b0  00000000  00000000  00002607  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ed       	ldi	r30, 0xDA	; 218
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 34       	cpi	r26, 0x48	; 72
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a8 e4       	ldi	r26, 0x48	; 72
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 34       	cpi	r26, 0x4E	; 78
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 95 00 	call	0x12a	; 0x12a <main>
 122:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <main>:
#include "UART.h"



int main( void )
{
 12a:	ef 92       	push	r14
 12c:	ff 92       	push	r15
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	df 93       	push	r29
 134:	cf 93       	push	r28
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
 13a:	a8 97       	sbiw	r28, 0x28	; 40
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	f8 94       	cli
 140:	de bf       	out	0x3e, r29	; 62
 142:	0f be       	out	0x3f, r0	; 63
 144:	cd bf       	out	0x3d, r28	; 61
    char cad[20];
    char cadUart3[20];
    uint16_t num;


    UART_Ini(0,12345,8,1,2); //comunicacion con teraterm
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	49 e3       	ldi	r20, 0x39	; 57
 14a:	50 e3       	ldi	r21, 0x30	; 48
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	28 e0       	ldi	r18, 0x08	; 8
 152:	01 e0       	ldi	r16, 0x01	; 1
 154:	92 e0       	ldi	r25, 0x02	; 2
 156:	e9 2e       	mov	r14, r25
 158:	0e 94 28 01 	call	0x250	; 0x250 <UART_Ini>
    UART_Ini(2,115200,8,0,1);
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	40 e0       	ldi	r20, 0x00	; 0
 160:	52 ec       	ldi	r21, 0xC2	; 194
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	28 e0       	ldi	r18, 0x08	; 8
 168:	00 e0       	ldi	r16, 0x00	; 0
 16a:	ee 24       	eor	r14, r14
 16c:	e3 94       	inc	r14
 16e:	0e 94 28 01 	call	0x250	; 0x250 <UART_Ini>
    UART_Ini(3,115200,8,0,1);
 172:	83 e0       	ldi	r24, 0x03	; 3
 174:	40 e0       	ldi	r20, 0x00	; 0
 176:	52 ec       	ldi	r21, 0xC2	; 194
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	70 e0       	ldi	r23, 0x00	; 0
 17c:	28 e0       	ldi	r18, 0x08	; 8
 17e:	0e 94 28 01 	call	0x250	; 0x250 <UART_Ini>
        UART_setColor(0,YELLOW);
        UART_puts(0,"Introduce un n?mero:"); //terminamos con un caracter nulo, funciona bien puts

        UART_gotoxy(0,22,2);
        UART_setColor(0,GREEN);
        UART_gets(0,cad); //vreremos si este funciona correcto
 182:	8e 01       	movw	r16, r28
 184:	0f 5f       	subi	r16, 0xFF	; 255
 186:	1f 4f       	sbci	r17, 0xFF	; 255
// -------------------------------------------
        // Cycle through UART2->UART3
        UART_puts(2,cad);
        UART_puts(2,"\r");
        UART_gets(3,cadUart3);
 188:	85 e1       	ldi	r24, 0x15	; 21
 18a:	e8 2e       	mov	r14, r24
 18c:	f1 2c       	mov	r15, r1
 18e:	ec 0e       	add	r14, r28
 190:	fd 1e       	adc	r15, r29
    UART_Ini(0,12345,8,1,2); //comunicacion con teraterm
    UART_Ini(2,115200,8,0,1);
    UART_Ini(3,115200,8,0,1);
    while(1)
    {
        UART_getchar(0);//getchar funciona OK
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	0e 94 bb 01 	call	0x376	; 0x376 <UART_getchar>
        UART_clrscr(0);
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	0e 94 c9 01 	call	0x392	; 0x392 <UART_clrscr>

        UART_gotoxy(0,2,2);
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	62 e0       	ldi	r22, 0x02	; 2
 1a2:	42 e0       	ldi	r20, 0x02	; 2
 1a4:	0e 94 17 02 	call	0x42e	; 0x42e <UART_gotoxy>
        UART_setColor(0,YELLOW);
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	61 e2       	ldi	r22, 0x21	; 33
 1ac:	0e 94 4d 02 	call	0x49a	; 0x49a <UART_setColor>
        UART_puts(0,"Introduce un n?mero:"); //terminamos con un caracter nulo, funciona bien puts
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	60 e0       	ldi	r22, 0x00	; 0
 1b4:	72 e0       	ldi	r23, 0x02	; 2
 1b6:	0e 94 89 01 	call	0x312	; 0x312 <UART_puts>

        UART_gotoxy(0,22,2);
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	66 e1       	ldi	r22, 0x16	; 22
 1be:	42 e0       	ldi	r20, 0x02	; 2
 1c0:	0e 94 17 02 	call	0x42e	; 0x42e <UART_gotoxy>
        UART_setColor(0,GREEN);
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	60 e2       	ldi	r22, 0x20	; 32
 1c8:	0e 94 4d 02 	call	0x49a	; 0x49a <UART_setColor>
        UART_gets(0,cad); //vreremos si este funciona correcto
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	b8 01       	movw	r22, r16
 1d0:	0e 94 12 03 	call	0x624	; 0x624 <UART_gets>
// -------------------------------------------
        // Cycle through UART2->UART3
        UART_puts(2,cad);
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	b8 01       	movw	r22, r16
 1d8:	0e 94 89 01 	call	0x312	; 0x312 <UART_puts>
        UART_puts(2,"\r");
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	65 e1       	ldi	r22, 0x15	; 21
 1e0:	72 e0       	ldi	r23, 0x02	; 2
 1e2:	0e 94 89 01 	call	0x312	; 0x312 <UART_puts>
        UART_gets(3,cadUart3);
 1e6:	83 e0       	ldi	r24, 0x03	; 3
 1e8:	b7 01       	movw	r22, r14
 1ea:	0e 94 12 03 	call	0x624	; 0x624 <UART_gets>
        UART_gotoxy(0,5,3);
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	65 e0       	ldi	r22, 0x05	; 5
 1f2:	43 e0       	ldi	r20, 0x03	; 3
 1f4:	0e 94 17 02 	call	0x42e	; 0x42e <UART_gotoxy>
        UART_puts(0,cadUart3);
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	b7 01       	movw	r22, r14
 1fc:	0e 94 89 01 	call	0x312	; 0x312 <UART_puts>
// -------------------------------------------
        num = atoi(cad);
 200:	c8 01       	movw	r24, r16
 202:	0e 94 b3 02 	call	0x566	; 0x566 <atoi>
        itoa(num,cad,16);
 206:	b8 01       	movw	r22, r16
 208:	40 e1       	ldi	r20, 0x10	; 16
 20a:	0e 94 87 02 	call	0x50e	; 0x50e <itoa>

        UART_gotoxy(0,5,4);
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	65 e0       	ldi	r22, 0x05	; 5
 212:	44 e0       	ldi	r20, 0x04	; 4
 214:	0e 94 17 02 	call	0x42e	; 0x42e <UART_gotoxy>
        UART_setColor(0,BLUE);
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	62 e2       	ldi	r22, 0x22	; 34
 21c:	0e 94 4d 02 	call	0x49a	; 0x49a <UART_setColor>
        UART_puts(0,"Hex: ");
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	67 e1       	ldi	r22, 0x17	; 23
 224:	72 e0       	ldi	r23, 0x02	; 2
 226:	0e 94 89 01 	call	0x312	; 0x312 <UART_puts>
        UART_puts(0,cad);
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	b8 01       	movw	r22, r16
 22e:	0e 94 89 01 	call	0x312	; 0x312 <UART_puts>
        //itoa(num,cad,2);

        UART_gotoxy(0,5,5);
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	65 e0       	ldi	r22, 0x05	; 5
 236:	45 e0       	ldi	r20, 0x05	; 5
 238:	0e 94 17 02 	call	0x42e	; 0x42e <UART_gotoxy>
        UART_puts(0,"Bin: ");
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	6d e1       	ldi	r22, 0x1D	; 29
 240:	72 e0       	ldi	r23, 0x02	; 2
 242:	0e 94 89 01 	call	0x312	; 0x312 <UART_puts>
        UART_puts(0,cad);
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	b8 01       	movw	r22, r16
 24a:	0e 94 89 01 	call	0x312	; 0x312 <UART_puts>
 24e:	a1 cf       	rjmp	.-190    	; 0x192 <main+0x68>

00000250 <UART_Ini>:

};



UART_Ini(uint8_t com, uint32_t baudrate, uint8_t size, uint8_t parity, uint8_t stop){
 250:	af 92       	push	r10
 252:	bf 92       	push	r11
 254:	cf 92       	push	r12
 256:	df 92       	push	r13
 258:	ef 92       	push	r14
 25a:	0f 93       	push	r16
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	5a 01       	movw	r10, r20
 262:	6b 01       	movw	r12, r22
 264:	92 2f       	mov	r25, r18
 266:	2e 2d       	mov	r18, r14

    UART_reg_t *myUART = UART_offset[com]; // eligo a mi UART
 268:	e8 2f       	mov	r30, r24
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	ee 0f       	add	r30, r30
 26e:	ff 1f       	adc	r31, r31
 270:	e1 5d       	subi	r30, 0xD1	; 209
 272:	fd 4f       	sbci	r31, 0xFD	; 253
 274:	c0 81       	ld	r28, Z
 276:	d1 81       	ldd	r29, Z+1	; 0x01

    myUART->UCSRB = (1 << TXEN0) | (1 << RXEN0); // Habilita TX y RX para UART0
 278:	88 e1       	ldi	r24, 0x18	; 24
 27a:	89 83       	std	Y+1, r24	; 0x01
    //establecer las paridades
	//uint8_t parity_mode= (parity == 1) ? 2 : 3;  // 2: Paridad par, 3: Paridad impar

    uint8_t parity_mode=0;

    switch(parity){
 27c:	01 30       	cpi	r16, 0x01	; 1
 27e:	21 f0       	breq	.+8      	; 0x288 <UART_Ini+0x38>
 280:	02 30       	cpi	r16, 0x02	; 2
 282:	21 f4       	brne	.+8      	; 0x28c <UART_Ini+0x3c>
 284:	82 e0       	ldi	r24, 0x02	; 2
 286:	03 c0       	rjmp	.+6      	; 0x28e <UART_Ini+0x3e>
 288:	83 e0       	ldi	r24, 0x03	; 3
 28a:	01 c0       	rjmp	.+2      	; 0x28e <UART_Ini+0x3e>
 28c:	80 e0       	ldi	r24, 0x00	; 0
    //me manda sde de 1 o 2 por lo que ocn este ternearo decivo si es 1 sera 1 bit de parada 0
    //pero si es otro valor seran 2 bits de parada

    uint8_t stop_mode= (stop == 1)? 0:1;

    myUART->UCSRC = (parity_mode << UPM00) | (stop_mode <<USBS0);
 28e:	e8 2f       	mov	r30, r24
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	54 e0       	ldi	r21, 0x04	; 4
 294:	ee 0f       	add	r30, r30
 296:	ff 1f       	adc	r31, r31
 298:	5a 95       	dec	r21
 29a:	e1 f7       	brne	.-8      	; 0x294 <UART_Ini+0x44>
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	21 30       	cpi	r18, 0x01	; 1
 2a2:	11 f0       	breq	.+4      	; 0x2a8 <UART_Ini+0x58>
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	43 e0       	ldi	r20, 0x03	; 3
 2aa:	66 0f       	add	r22, r22
 2ac:	77 1f       	adc	r23, r23
 2ae:	4a 95       	dec	r20
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <UART_Ini+0x5a>
 2b2:	8e 2f       	mov	r24, r30
 2b4:	86 2b       	or	r24, r22
 2b6:	8a 83       	std	Y+2, r24	; 0x02

		myUART->UCSRC = 3 << UCSZ00;
		myUART->UCSRB = 1<< UCSZ02; //habilitamos los 9 bits
	}*/

	if (size == 9) {
 2b8:	99 30       	cpi	r25, 0x09	; 9
 2ba:	39 f4       	brne	.+14     	; 0x2ca <UART_Ini+0x7a>
        myUART->UCSRC |= (3 << UCSZ00); // UCSZ01:UCSZ00 = 0b11
 2bc:	8a 81       	ldd	r24, Y+2	; 0x02
 2be:	86 60       	ori	r24, 0x06	; 6
 2c0:	8a 83       	std	Y+2, r24	; 0x02
        myUART->UCSRB |= (1 << UCSZ02); // Habilitar bit 9
 2c2:	89 81       	ldd	r24, Y+1	; 0x01
 2c4:	84 60       	ori	r24, 0x04	; 4
 2c6:	89 83       	std	Y+1, r24	; 0x01
 2c8:	08 c0       	rjmp	.+16     	; 0x2da <UART_Ini+0x8a>
    } else
     {
        myUART->UCSRC |= ((size - 5) << UCSZ00); // Ej: 8 bits ? 3 << UCSZ00
 2ca:	2a 81       	ldd	r18, Y+2	; 0x02
 2cc:	89 2f       	mov	r24, r25
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	05 97       	sbiw	r24, 0x05	; 5
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	28 2b       	or	r18, r24
 2d8:	2a 83       	std	Y+2, r18	; 0x02
    }

    uint16_t v_UBRR = (FOSC / (16 * baudrate)) - 1 ;
 2da:	84 e0       	ldi	r24, 0x04	; 4
 2dc:	aa 0c       	add	r10, r10
 2de:	bb 1c       	adc	r11, r11
 2e0:	cc 1c       	adc	r12, r12
 2e2:	dd 1c       	adc	r13, r13
 2e4:	8a 95       	dec	r24
 2e6:	d1 f7       	brne	.-12     	; 0x2dc <UART_Ini+0x8c>
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	74 e2       	ldi	r23, 0x24	; 36
 2ec:	84 ef       	ldi	r24, 0xF4	; 244
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	a6 01       	movw	r20, r12
 2f2:	95 01       	movw	r18, r10
 2f4:	0e 94 96 03 	call	0x72c	; 0x72c <__udivmodsi4>
 2f8:	21 50       	subi	r18, 0x01	; 1
 2fa:	30 40       	sbci	r19, 0x00	; 0
    myUART->UBRR = v_UBRR;
 2fc:	3d 83       	std	Y+5, r19	; 0x05
 2fe:	2c 83       	std	Y+4, r18	; 0x04
}
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	0f 91       	pop	r16
 306:	ef 90       	pop	r14
 308:	df 90       	pop	r13
 30a:	cf 90       	pop	r12
 30c:	bf 90       	pop	r11
 30e:	af 90       	pop	r10
 310:	08 95       	ret

00000312 <UART_puts>:
*/


//este haria lo mismo de putchar la unica deiferente es que este estara
//recorriendo la cadena que se quiere imprimir
void UART_puts(uint8_t com, char *str){
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	eb 01       	movw	r28, r22
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 318:	e8 2f       	mov	r30, r24
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	ee 0f       	add	r30, r30
 31e:	ff 1f       	adc	r31, r31
 320:	e1 5d       	subi	r30, 0xD1	; 209
 322:	fd 4f       	sbci	r31, 0xFD	; 253
 324:	08 c0       	rjmp	.+16     	; 0x336 <UART_puts+0x24>
 326:	a0 81       	ld	r26, Z
 328:	b1 81       	ldd	r27, Z+1	; 0x01
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 32a:	8c 91       	ld	r24, X
 32c:	85 ff       	sbrs	r24, 5
 32e:	fd cf       	rjmp	.-6      	; 0x32a <UART_puts+0x18>
void UART_puts(uint8_t com, char *str){

	//TXn trasmitir el contenido
	while(*str!= '\0'){
		//mientras haya contenido en el apuntador, que sea diferente a NULL
		UART_putchar(com,*str++);
 330:	21 96       	adiw	r28, 0x01	; 1

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 332:	16 96       	adiw	r26, 0x06	; 6
 334:	9c 93       	st	X, r25
//este haria lo mismo de putchar la unica deiferente es que este estara
//recorriendo la cadena que se quiere imprimir
void UART_puts(uint8_t com, char *str){

	//TXn trasmitir el contenido
	while(*str!= '\0'){
 336:	98 81       	ld	r25, Y
 338:	99 23       	and	r25, r25
 33a:	a9 f7       	brne	.-22     	; 0x326 <UART_puts+0x14>
		//mientras haya contenido en el apuntador, que sea diferente a NULL
		UART_putchar(com,*str++);
	}
}
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	08 95       	ret

00000342 <UART_putchar>:
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 342:	e8 2f       	mov	r30, r24
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	ee 0f       	add	r30, r30
 348:	ff 1f       	adc	r31, r31
 34a:	e1 5d       	subi	r30, 0xD1	; 209
 34c:	fd 4f       	sbci	r31, 0xFD	; 253
 34e:	01 90       	ld	r0, Z+
 350:	f0 81       	ld	r31, Z
 352:	e0 2d       	mov	r30, r0
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 354:	80 81       	ld	r24, Z
 356:	85 ff       	sbrs	r24, 5
 358:	fd cf       	rjmp	.-6      	; 0x354 <UART_putchar+0x12>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 35a:	66 83       	std	Z+6, r22	; 0x06
}
 35c:	08 95       	ret

0000035e <UART_available>:
uint8_t UART_available(uint8_t com){

	//RXC0 sta en 1 cuando hay un dato sin leer en RXC
	//y esta en 0 cunado este no tiene nada

	UART_reg_t *myUART = UART_offset[com];
 35e:	e8 2f       	mov	r30, r24
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	ee 0f       	add	r30, r30
 364:	ff 1f       	adc	r31, r31
 366:	e1 5d       	subi	r30, 0xD1	; 209
 368:	fd 4f       	sbci	r31, 0xFD	; 253
 36a:	01 90       	ld	r0, Z+
 36c:	f0 81       	ld	r31, Z
 36e:	e0 2d       	mov	r30, r0

	return (myUART->UCSRA & (1 << RXC0)) ; // Hay dato disponible
 370:	80 81       	ld	r24, Z
	//creo que va a asi pero si hay errores podemos invertirlo
}
 372:	80 78       	andi	r24, 0x80	; 128
 374:	08 95       	ret

00000376 <UART_getchar>:
	return myUART->UDR;
}*/


char UART_getchar(uint8_t com) {
    UART_reg_t *myUART = UART_offset[com];
 376:	e8 2f       	mov	r30, r24
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	ee 0f       	add	r30, r30
 37c:	ff 1f       	adc	r31, r31
 37e:	e1 5d       	subi	r30, 0xD1	; 209
 380:	fd 4f       	sbci	r31, 0xFD	; 253
 382:	01 90       	ld	r0, Z+
 384:	f0 81       	ld	r31, Z
 386:	e0 2d       	mov	r30, r0
    while (!(myUART->UCSRA & (1 << RXC0))); // Espera dato
 388:	80 81       	ld	r24, Z
 38a:	87 ff       	sbrs	r24, 7
 38c:	fd cf       	rjmp	.-6      	; 0x388 <UART_getchar+0x12>
    return myUART->UDR;
 38e:	86 81       	ldd	r24, Z+6	; 0x06
}
 390:	08 95       	ret

00000392 <UART_clrscr>:

}


// Escape sequences
UART_clrscr( uint8_t com ){
 392:	1f 93       	push	r17
 394:	18 2f       	mov	r17, r24
        que con ESC[2J se borra toda la pantalla

        lo mismo para con posicionar al inicio de la termianl
        sin parametros H se estbalce en la fila1 - columna1
    */
    UART_puts(com,"\x1B[2J"); //borra toda la pantalla
 396:	63 e2       	ldi	r22, 0x23	; 35
 398:	72 e0       	ldi	r23, 0x02	; 2
 39a:	0e 94 89 01 	call	0x312	; 0x312 <UART_puts>
    UART_puts(com,"\x1B[H"); // poen el curso al incio fila 1, columna 1
 39e:	81 2f       	mov	r24, r17
 3a0:	68 e2       	ldi	r22, 0x28	; 40
 3a2:	72 e0       	ldi	r23, 0x02	; 2
 3a4:	0e 94 89 01 	call	0x312	; 0x312 <UART_puts>


}
 3a8:	1f 91       	pop	r17
 3aa:	08 95       	ret

000003ac <UART_putnum>:


void UART_putnum(uint8_t com, uint8_t num){
 3ac:	38 2f       	mov	r19, r24
 3ae:	26 2f       	mov	r18, r22

    if(num >= 100){
 3b0:	64 36       	cpi	r22, 0x64	; 100
 3b2:	b0 f0       	brcs	.+44     	; 0x3e0 <UART_putnum+0x34>
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 3b4:	e8 2f       	mov	r30, r24
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	ee 0f       	add	r30, r30
 3ba:	ff 1f       	adc	r31, r31
 3bc:	e1 5d       	subi	r30, 0xD1	; 209
 3be:	fd 4f       	sbci	r31, 0xFD	; 253
 3c0:	01 90       	ld	r0, Z+
 3c2:	f0 81       	ld	r31, Z
 3c4:	e0 2d       	mov	r30, r0
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 3c6:	80 81       	ld	r24, Z
 3c8:	85 ff       	sbrs	r24, 5
 3ca:	fd cf       	rjmp	.-6      	; 0x3c6 <UART_putnum+0x1a>


void UART_putnum(uint8_t com, uint8_t num){

    if(num >= 100){
        UART_putchar(com, '0'+(num/100));
 3cc:	82 2f       	mov	r24, r18
 3ce:	64 e6       	ldi	r22, 0x64	; 100
 3d0:	0e 94 8a 03 	call	0x714	; 0x714 <__udivmodqi4>
 3d4:	80 5d       	subi	r24, 0xD0	; 208

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 3d6:	86 83       	std	Z+6, r24	; 0x06

void UART_putnum(uint8_t com, uint8_t num){

    if(num >= 100){
        UART_putchar(com, '0'+(num/100));
        num%=100;
 3d8:	82 2f       	mov	r24, r18
 3da:	0e 94 8a 03 	call	0x714	; 0x714 <__udivmodqi4>
 3de:	29 2f       	mov	r18, r25
    }
    if(num>=10){
 3e0:	2a 30       	cpi	r18, 0x0A	; 10
 3e2:	b0 f0       	brcs	.+44     	; 0x410 <UART_putnum+0x64>
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 3e4:	e3 2f       	mov	r30, r19
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	ee 0f       	add	r30, r30
 3ea:	ff 1f       	adc	r31, r31
 3ec:	e1 5d       	subi	r30, 0xD1	; 209
 3ee:	fd 4f       	sbci	r31, 0xFD	; 253
 3f0:	01 90       	ld	r0, Z+
 3f2:	f0 81       	ld	r31, Z
 3f4:	e0 2d       	mov	r30, r0
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 3f6:	80 81       	ld	r24, Z
 3f8:	85 ff       	sbrs	r24, 5
 3fa:	fd cf       	rjmp	.-6      	; 0x3f6 <UART_putnum+0x4a>
    if(num >= 100){
        UART_putchar(com, '0'+(num/100));
        num%=100;
    }
    if(num>=10){
        UART_putchar(com, '0'+(num/10));
 3fc:	82 2f       	mov	r24, r18
 3fe:	6a e0       	ldi	r22, 0x0A	; 10
 400:	0e 94 8a 03 	call	0x714	; 0x714 <__udivmodqi4>
 404:	80 5d       	subi	r24, 0xD0	; 208

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 406:	86 83       	std	Z+6, r24	; 0x06
        UART_putchar(com, '0'+(num/100));
        num%=100;
    }
    if(num>=10){
        UART_putchar(com, '0'+(num/10));
        num%=10;
 408:	82 2f       	mov	r24, r18
 40a:	0e 94 8a 03 	call	0x714	; 0x714 <__udivmodqi4>
 40e:	29 2f       	mov	r18, r25
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 410:	e3 2f       	mov	r30, r19
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	ee 0f       	add	r30, r30
 416:	ff 1f       	adc	r31, r31
 418:	e1 5d       	subi	r30, 0xD1	; 209
 41a:	fd 4f       	sbci	r31, 0xFD	; 253
 41c:	01 90       	ld	r0, Z+
 41e:	f0 81       	ld	r31, Z
 420:	e0 2d       	mov	r30, r0
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 422:	80 81       	ld	r24, Z
 424:	85 ff       	sbrs	r24, 5
 426:	fd cf       	rjmp	.-6      	; 0x422 <UART_putnum+0x76>
    if(num>=10){
        UART_putchar(com, '0'+(num/10));
        num%=10;
    }

    UART_putchar(com,'0'+num);
 428:	20 5d       	subi	r18, 0xD0	; 208

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 42a:	26 83       	std	Z+6, r18	; 0x06
        num%=10;
    }

    UART_putchar(com,'0'+num);

}
 42c:	08 95       	ret

0000042e <UART_gotoxy>:


UART_gotoxy(uint8_t com, uint8_t x, uint8_t y){
 42e:	ff 92       	push	r15
 430:	0f 93       	push	r16
 432:	1f 93       	push	r17
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	08 2f       	mov	r16, r24
 43a:	f6 2e       	mov	r15, r22
 43c:	14 2f       	mov	r17, r20

    UART_puts(com,"\x1B["); //inicio de la secuencia de esapce
 43e:	6c e2       	ldi	r22, 0x2C	; 44
 440:	72 e0       	ldi	r23, 0x02	; 2
 442:	0e 94 89 01 	call	0x312	; 0x312 <UART_puts>

    UART_putnum(com,y+1); //convertir a caracter
 446:	1f 5f       	subi	r17, 0xFF	; 255
 448:	80 2f       	mov	r24, r16
 44a:	61 2f       	mov	r22, r17
 44c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <UART_putnum>
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 450:	c0 2f       	mov	r28, r16
 452:	d0 e0       	ldi	r29, 0x00	; 0
 454:	fe 01       	movw	r30, r28
 456:	ee 0f       	add	r30, r30
 458:	ff 1f       	adc	r31, r31
 45a:	e1 5d       	subi	r30, 0xD1	; 209
 45c:	fd 4f       	sbci	r31, 0xFD	; 253
 45e:	01 90       	ld	r0, Z+
 460:	f0 81       	ld	r31, Z
 462:	e0 2d       	mov	r30, r0
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 464:	80 81       	ld	r24, Z
 466:	85 ff       	sbrs	r24, 5
 468:	fd cf       	rjmp	.-6      	; 0x464 <UART_gotoxy+0x36>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 46a:	8b e3       	ldi	r24, 0x3B	; 59
 46c:	86 83       	std	Z+6, r24	; 0x06

    UART_puts(com,"\x1B["); //inicio de la secuencia de esapce

    UART_putnum(com,y+1); //convertir a caracter
    UART_putchar(com,';');
    UART_putnum(com,x+1);
 46e:	f3 94       	inc	r15
 470:	80 2f       	mov	r24, r16
 472:	6f 2d       	mov	r22, r15
 474:	0e 94 d6 01 	call	0x3ac	; 0x3ac <UART_putnum>
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 478:	cc 0f       	add	r28, r28
 47a:	dd 1f       	adc	r29, r29
 47c:	c1 5d       	subi	r28, 0xD1	; 209
 47e:	dd 4f       	sbci	r29, 0xFD	; 253
 480:	e8 81       	ld	r30, Y
 482:	f9 81       	ldd	r31, Y+1	; 0x01
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 484:	80 81       	ld	r24, Z
 486:	85 ff       	sbrs	r24, 5
 488:	fd cf       	rjmp	.-6      	; 0x484 <UART_gotoxy+0x56>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 48a:	88 e4       	ldi	r24, 0x48	; 72
 48c:	86 83       	std	Z+6, r24	; 0x06
    UART_putnum(com,y+1); //convertir a caracter
    UART_putchar(com,';');
    UART_putnum(com,x+1);
    UART_putchar(com,'H'); //final de la secuencia

}
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	1f 91       	pop	r17
 494:	0f 91       	pop	r16
 496:	ff 90       	pop	r15
 498:	08 95       	ret

0000049a <UART_setColor>:





UART_setColor(uint8_t com, uint8_t color){
 49a:	0f 93       	push	r16
 49c:	1f 93       	push	r17
 49e:	18 2f       	mov	r17, r24
 4a0:	06 2f       	mov	r16, r22


    UART_puts(com,"\x1B["); //incio del comando espace
 4a2:	6c e2       	ldi	r22, 0x2C	; 44
 4a4:	72 e0       	ldi	r23, 0x02	; 2
 4a6:	0e 94 89 01 	call	0x312	; 0x312 <UART_puts>
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 4aa:	a1 2f       	mov	r26, r17
 4ac:	b0 e0       	ldi	r27, 0x00	; 0
 4ae:	fd 01       	movw	r30, r26
 4b0:	ee 0f       	add	r30, r30
 4b2:	ff 1f       	adc	r31, r31
 4b4:	e1 5d       	subi	r30, 0xD1	; 209
 4b6:	fd 4f       	sbci	r31, 0xFD	; 253
 4b8:	01 90       	ld	r0, Z+
 4ba:	f0 81       	ld	r31, Z
 4bc:	e0 2d       	mov	r30, r0
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 4be:	80 81       	ld	r24, Z
 4c0:	85 ff       	sbrs	r24, 5
 4c2:	fd cf       	rjmp	.-6      	; 0x4be <UART_setColor+0x24>

UART_setColor(uint8_t com, uint8_t color){


    UART_puts(com,"\x1B["); //incio del comando espace
    UART_putchar(com, '0'+(color/10));
 4c4:	80 2f       	mov	r24, r16
 4c6:	6a e0       	ldi	r22, 0x0A	; 10
 4c8:	0e 94 8a 03 	call	0x714	; 0x714 <__udivmodqi4>
 4cc:	80 5d       	subi	r24, 0xD0	; 208

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 4ce:	86 83       	std	Z+6, r24	; 0x06
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 4d0:	fd 01       	movw	r30, r26
 4d2:	ee 0f       	add	r30, r30
 4d4:	ff 1f       	adc	r31, r31
 4d6:	e1 5d       	subi	r30, 0xD1	; 209
 4d8:	fd 4f       	sbci	r31, 0xFD	; 253
 4da:	01 90       	ld	r0, Z+
 4dc:	f0 81       	ld	r31, Z
 4de:	e0 2d       	mov	r30, r0
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 4e0:	80 81       	ld	r24, Z
 4e2:	85 ff       	sbrs	r24, 5
 4e4:	fd cf       	rjmp	.-6      	; 0x4e0 <UART_setColor+0x46>
UART_setColor(uint8_t com, uint8_t color){


    UART_puts(com,"\x1B["); //incio del comando espace
    UART_putchar(com, '0'+(color/10));
    UART_putchar(com,'0'+(color%10));
 4e6:	80 2f       	mov	r24, r16
 4e8:	6a e0       	ldi	r22, 0x0A	; 10
 4ea:	0e 94 8a 03 	call	0x714	; 0x714 <__udivmodqi4>
 4ee:	90 5d       	subi	r25, 0xD0	; 208

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 4f0:	96 83       	std	Z+6, r25	; 0x06
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 4f2:	aa 0f       	add	r26, r26
 4f4:	bb 1f       	adc	r27, r27
 4f6:	a1 5d       	subi	r26, 0xD1	; 209
 4f8:	bd 4f       	sbci	r27, 0xFD	; 253
 4fa:	ed 91       	ld	r30, X+
 4fc:	fc 91       	ld	r31, X
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 4fe:	80 81       	ld	r24, Z
 500:	85 ff       	sbrs	r24, 5
 502:	fd cf       	rjmp	.-6      	; 0x4fe <UART_setColor+0x64>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 504:	8d e6       	ldi	r24, 0x6D	; 109
 506:	86 83       	std	Z+6, r24	; 0x06

    UART_puts(com,"\x1B["); //incio del comando espace
    UART_putchar(com, '0'+(color/10));
    UART_putchar(com,'0'+(color%10));
    UART_putchar(com,'m'); //final del comando
 }
 508:	1f 91       	pop	r17
 50a:	0f 91       	pop	r16
 50c:	08 95       	ret

0000050e <itoa>:




// Utils
void itoa(uint16_t number, char* str, uint8_t base){
 50e:	df 93       	push	r29
 510:	cf 93       	push	r28
 512:	cd b7       	in	r28, 0x3d	; 61
 514:	de b7       	in	r29, 0x3e	; 62
 516:	60 97       	sbiw	r28, 0x10	; 16
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	f8 94       	cli
 51c:	de bf       	out	0x3e, r29	; 62
 51e:	0f be       	out	0x3f, r0	; 63
 520:	cd bf       	out	0x3d, r28	; 61
	//pimeor debemos saber que base es

	//recibe un caracter con terminacion '\0'

    //arreglo con los caractrers de HEX
    char HEX[]={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
 522:	de 01       	movw	r26, r28
 524:	11 96       	adiw	r26, 0x01	; 1
 526:	e7 e3       	ldi	r30, 0x37	; 55
 528:	f2 e0       	ldi	r31, 0x02	; 2
 52a:	90 e1       	ldi	r25, 0x10	; 16
 52c:	01 90       	ld	r0, Z+
 52e:	0d 92       	st	X+, r0
 530:	91 50       	subi	r25, 0x01	; 1
 532:	e1 f7       	brne	.-8      	; 0x52c <itoa+0x1e>


    //lo cinvertimos a decimla y es lo que recibimos y tenemos que converitr en su valor HEX, octal o binaria pero en ASCII


	if(base == 2){
 534:	42 30       	cpi	r20, 0x02	; 2
 536:	71 f0       	breq	.+28     	; 0x554 <itoa+0x46>
        //octal


	}*/

	else if(base == 16){
 538:	40 31       	cpi	r20, 0x10	; 16
 53a:	61 f4       	brne	.+24     	; 0x554 <itoa+0x46>
        //para converitr el decimal en HEX lo divido por 16 y el resto es lo que me dara que caracter es



        while(caracter>0){
            caracter = number%16; //sacamos el primer valor LSB de 16 bits
 53c:	8f 70       	andi	r24, 0x0F	; 15
            codigo = HEX[caracter-1];
 53e:	fe 01       	movw	r30, r28
 540:	e8 0f       	add	r30, r24
 542:	f1 1d       	adc	r31, r1
 544:	20 81       	ld	r18, Z
            str[idx] = codigo;
 546:	fb 01       	movw	r30, r22
 548:	e9 0f       	add	r30, r25
 54a:	f1 1d       	adc	r31, r1
 54c:	20 83       	st	Z, r18
            idx++;
 54e:	9f 5f       	subi	r25, 0xFF	; 255
        //residuo
        //para converitr el decimal en HEX lo divido por 16 y el resto es lo que me dara que caracter es



        while(caracter>0){
 550:	88 23       	and	r24, r24
 552:	c9 f7       	brne	.-14     	; 0x546 <itoa+0x38>
*/


	}

}
 554:	60 96       	adiw	r28, 0x10	; 16
 556:	0f b6       	in	r0, 0x3f	; 63
 558:	f8 94       	cli
 55a:	de bf       	out	0x3e, r29	; 62
 55c:	0f be       	out	0x3f, r0	; 63
 55e:	cd bf       	out	0x3d, r28	; 61
 560:	cf 91       	pop	r28
 562:	df 91       	pop	r29
 564:	08 95       	ret

00000566 <atoi>:

uint16_t atoi(char *str){
 566:	cf 92       	push	r12
 568:	df 92       	push	r13
 56a:	ef 92       	push	r14
 56c:	ff 92       	push	r15
 56e:	1f 93       	push	r17
 570:	df 93       	push	r29
 572:	cf 93       	push	r28
 574:	cd b7       	in	r28, 0x3d	; 61
 576:	de b7       	in	r29, 0x3e	; 62
 578:	58 2f       	mov	r21, r24
        acum += actual;

    }

    return acum; //retornarme el acumulador
}
 57a:	cd b6       	in	r12, 0x3d	; 61
 57c:	de b6       	in	r13, 0x3e	; 62

	}

}

uint16_t atoi(char *str){
 57e:	28 2f       	mov	r18, r24
 580:	39 2f       	mov	r19, r25
 582:	d9 01       	movw	r26, r18
 584:	01 c0       	rjmp	.+2      	; 0x588 <atoi+0x22>
    uint8_t cantidad=0;

    while(*str!='\0'){

        cantidad++;
        *str++;
 586:	11 96       	adiw	r26, 0x01	; 1
 588:	1a 2f       	mov	r17, r26
 58a:	15 1b       	sub	r17, r21



    uint8_t cantidad=0;

    while(*str!='\0'){
 58c:	8c 91       	ld	r24, X
 58e:	88 23       	and	r24, r24
 590:	d1 f7       	brne	.-12     	; 0x586 <atoi+0x20>

        cantidad++;
        *str++;
    }

    uint8_t items[cantidad]; //arreglo reservado
 592:	8d b7       	in	r24, 0x3d	; 61
 594:	9e b7       	in	r25, 0x3e	; 62
 596:	81 1b       	sub	r24, r17
 598:	91 09       	sbc	r25, r1
 59a:	0f b6       	in	r0, 0x3f	; 63
 59c:	f8 94       	cli
 59e:	9e bf       	out	0x3e, r25	; 62
 5a0:	0f be       	out	0x3f, r0	; 63
 5a2:	8d bf       	out	0x3d, r24	; 61
 5a4:	ed b6       	in	r14, 0x3d	; 61
 5a6:	fe b6       	in	r15, 0x3e	; 62
 5a8:	08 94       	sec
 5aa:	e1 1c       	adc	r14, r1
 5ac:	f1 1c       	adc	r15, r1
    //recorrera cad caraacter a mi parecer desde el inicio hasta el final por lo que debemos de hacer
    //como una pila ingresar desde la ultima ubicacion,

    uint8_t num; // guardada el numero actual y este al ser multiplicado por el exponente sera agregado al la pia

    uint8_t idx= cantidad-1; //me indica en que pisicion del arreglo va
 5ae:	91 2f       	mov	r25, r17
 5b0:	91 50       	subi	r25, 0x01	; 1
 5b2:	07 c0       	rjmp	.+14     	; 0x5c2 <atoi+0x5c>
    //aseguramos doble
    while(*str !='\0' && idx >=0){

        num= *str - 48;

        items[idx]= num; // en la posicion idx ya items
 5b4:	f7 01       	movw	r30, r14
 5b6:	e9 0f       	add	r30, r25
 5b8:	f1 1d       	adc	r31, r1
 5ba:	80 53       	subi	r24, 0x30	; 48
 5bc:	80 83       	st	Z, r24
        //exp*=10;
        //ya se agrego recoremos nustro arreglo
        idx--;
 5be:	91 50       	subi	r25, 0x01	; 1
        *str++;
 5c0:	11 96       	adiw	r26, 0x01	; 1
    uint8_t num; // guardada el numero actual y este al ser multiplicado por el exponente sera agregado al la pia

    uint8_t idx= cantidad-1; //me indica en que pisicion del arreglo va

    //aseguramos doble
    while(*str !='\0' && idx >=0){
 5c2:	8c 91       	ld	r24, X
 5c4:	88 23       	and	r24, r24
 5c6:	b1 f7       	brne	.-20     	; 0x5b4 <atoi+0x4e>
 5c8:	41 e0       	ldi	r20, 0x01	; 1
 5ca:	50 e0       	ldi	r21, 0x00	; 0
 5cc:	70 e0       	ldi	r23, 0x00	; 0
 5ce:	60 e0       	ldi	r22, 0x00	; 0
 5d0:	18 c0       	rjmp	.+48     	; 0x602 <atoi+0x9c>
    for(uint8_t i=0; i< cantidad; i++){
        //vamos a recorrer la pila y calcular ese exponente

        actual = items[i];

        actual*=exp;
 5d2:	f7 01       	movw	r30, r14
 5d4:	e6 0f       	add	r30, r22
 5d6:	f1 1d       	adc	r31, r1
 5d8:	80 81       	ld	r24, Z
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	84 9f       	mul	r24, r20
 5de:	90 01       	movw	r18, r0
 5e0:	85 9f       	mul	r24, r21
 5e2:	30 0d       	add	r19, r0
 5e4:	94 9f       	mul	r25, r20
 5e6:	30 0d       	add	r19, r0
 5e8:	11 24       	eor	r1, r1

        exp*=10; //lo elevamos a la 10 en cada iteracion, pero este tendra un limite claro, cunado ya no cabe en 16 bits
 5ea:	ca 01       	movw	r24, r20
 5ec:	88 0f       	add	r24, r24
 5ee:	99 1f       	adc	r25, r25
 5f0:	33 e0       	ldi	r19, 0x03	; 3
 5f2:	44 0f       	add	r20, r20
 5f4:	55 1f       	adc	r21, r21
 5f6:	3a 95       	dec	r19
 5f8:	e1 f7       	brne	.-8      	; 0x5f2 <atoi+0x8c>
 5fa:	48 0f       	add	r20, r24
 5fc:	59 1f       	adc	r21, r25
        //con al esperanza de que no sean numereos mas grandes de 4 digitos

        acum += actual;
 5fe:	72 0f       	add	r23, r18


    uint16_t exp=1; //el esponente es para poder sumar al final y este represente decimales, decenas, centenas, millaes, etc.
    uint8_t acum = 0;
    uint8_t actual;
    for(uint8_t i=0; i< cantidad; i++){
 600:	6f 5f       	subi	r22, 0xFF	; 255
 602:	61 17       	cp	r22, r17
 604:	30 f3       	brcs	.-52     	; 0x5d2 <atoi+0x6c>
        acum += actual;

    }

    return acum; //retornarme el acumulador
}
 606:	87 2f       	mov	r24, r23
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	0f b6       	in	r0, 0x3f	; 63
 60c:	f8 94       	cli
 60e:	de be       	out	0x3e, r13	; 62
 610:	0f be       	out	0x3f, r0	; 63
 612:	cd be       	out	0x3d, r12	; 61
 614:	cf 91       	pop	r28
 616:	df 91       	pop	r29
 618:	1f 91       	pop	r17
 61a:	ff 90       	pop	r15
 61c:	ef 90       	pop	r14
 61e:	df 90       	pop	r13
 620:	cf 90       	pop	r12
 622:	08 95       	ret

00000624 <UART_gets>:
    while (!(myUART->UCSRA & (1 << RXC0))); // Espera dato
    return myUART->UDR;
}


void UART_gets(uint8_t com, char *str){
 624:	bf 92       	push	r11
 626:	cf 92       	push	r12
 628:	df 92       	push	r13
 62a:	ef 92       	push	r14
 62c:	ff 92       	push	r15
 62e:	0f 93       	push	r16
 630:	1f 93       	push	r17
 632:	cf 93       	push	r28
 634:	df 93       	push	r29
 636:	6b 01       	movw	r12, r22
 638:	ff 24       	eor	r15, r15
	return myUART->UDR;
}*/


char UART_getchar(uint8_t com) {
    UART_reg_t *myUART = UART_offset[com];
 63a:	c8 2f       	mov	r28, r24
 63c:	d0 e0       	ldi	r29, 0x00	; 0
 63e:	8e 01       	movw	r16, r28
 640:	00 0f       	add	r16, r16
 642:	11 1f       	adc	r17, r17
 644:	01 5d       	subi	r16, 0xD1	; 209
 646:	1d 4f       	sbci	r17, 0xFD	; 253

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 648:	88 e0       	ldi	r24, 0x08	; 8
 64a:	e8 2e       	mov	r14, r24
	return myUART->UDR;
}*/


char UART_getchar(uint8_t com) {
    UART_reg_t *myUART = UART_offset[com];
 64c:	b0 e2       	ldi	r27, 0x20	; 32
 64e:	bb 2e       	mov	r11, r27
 650:	d8 01       	movw	r26, r16
 652:	ed 91       	ld	r30, X+
 654:	fc 91       	ld	r31, X
    while (!(myUART->UCSRA & (1 << RXC0))); // Espera dato
 656:	80 81       	ld	r24, Z
 658:	87 ff       	sbrs	r24, 7
 65a:	fd cf       	rjmp	.-6      	; 0x656 <UART_gets+0x32>
    return myUART->UDR;
 65c:	66 81       	ldd	r22, Z+6	; 0x06

		-cuando se limpia la pantalla

		*/
		//verificamos si se quiere borrar que en efecto haya algo que borrar
		if(c=='\b'){
 65e:	68 30       	cpi	r22, 0x08	; 8
 660:	e9 f4       	brne	.+58     	; 0x69c <UART_gets+0x78>
			if(i>0){
 662:	ff 20       	and	r15, r15
 664:	a9 f3       	breq	.-22     	; 0x650 <UART_gets+0x2c>

				str[--i] = '\0'; //sustitumos el utlimo caracter con el nulo
 666:	fa 94       	dec	r15
 668:	f6 01       	movw	r30, r12
 66a:	ef 0d       	add	r30, r15
 66c:	f1 1d       	adc	r31, r1
 66e:	10 82       	st	Z, r1
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 670:	d8 01       	movw	r26, r16
 672:	ed 91       	ld	r30, X+
 674:	fc 91       	ld	r31, X
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 676:	80 81       	ld	r24, Z
 678:	85 ff       	sbrs	r24, 5
 67a:	fd cf       	rjmp	.-6      	; 0x676 <UART_gets+0x52>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 67c:	e6 82       	std	Z+6, r14	; 0x06
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 67e:	d8 01       	movw	r26, r16
 680:	ed 91       	ld	r30, X+
 682:	fc 91       	ld	r31, X
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 684:	80 81       	ld	r24, Z
 686:	85 ff       	sbrs	r24, 5
 688:	fd cf       	rjmp	.-6      	; 0x684 <UART_gets+0x60>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 68a:	b6 82       	std	Z+6, r11	; 0x06
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 68c:	d8 01       	movw	r26, r16
 68e:	ed 91       	ld	r30, X+
 690:	fc 91       	ld	r31, X
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 692:	80 81       	ld	r24, Z
 694:	85 ff       	sbrs	r24, 5
 696:	fd cf       	rjmp	.-6      	; 0x692 <UART_gets+0x6e>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 698:	e6 82       	std	Z+6, r14	; 0x06
 69a:	da cf       	rjmp	.-76     	; 0x650 <UART_gets+0x2c>
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 69c:	80 81       	ld	r24, Z
 69e:	85 ff       	sbrs	r24, 5
 6a0:	fd cf       	rjmp	.-6      	; 0x69c <UART_gets+0x78>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 6a2:	66 83       	std	Z+6, r22	; 0x06
			continue; // si no hay nada que borrar o si hay algoq ue borrar sigue con el ciclo
		}

		UART_putchar(com,c);

		if(c == '\r' || c== '\n'){
 6a4:	6d 30       	cpi	r22, 0x0D	; 13
 6a6:	11 f0       	breq	.+4      	; 0x6ac <UART_gets+0x88>
 6a8:	6a 30       	cpi	r22, 0x0A	; 10
 6aa:	31 f5       	brne	.+76     	; 0x6f8 <UART_gets+0xd4>
		//retorno de carro o salto de linea lo que quiere decir que se terminao de escribir el
		//texto actual.

			str[i]='\0'; //caracter nulo denotando que la
 6ac:	cf 0c       	add	r12, r15
 6ae:	d1 1c       	adc	r13, r1
 6b0:	f6 01       	movw	r30, r12
 6b2:	10 82       	st	Z, r1
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 6b4:	fe 01       	movw	r30, r28
 6b6:	ee 0f       	add	r30, r30
 6b8:	ff 1f       	adc	r31, r31
 6ba:	e1 5d       	subi	r30, 0xD1	; 209
 6bc:	fd 4f       	sbci	r31, 0xFD	; 253
 6be:	01 90       	ld	r0, Z+
 6c0:	f0 81       	ld	r31, Z
 6c2:	e0 2d       	mov	r30, r0
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 6c4:	80 81       	ld	r24, Z
 6c6:	85 ff       	sbrs	r24, 5
 6c8:	fd cf       	rjmp	.-6      	; 0x6c4 <UART_gets+0xa0>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 6ca:	8d e0       	ldi	r24, 0x0D	; 13
 6cc:	86 83       	std	Z+6, r24	; 0x06
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 6ce:	cc 0f       	add	r28, r28
 6d0:	dd 1f       	adc	r29, r29
 6d2:	c1 5d       	subi	r28, 0xD1	; 209
 6d4:	dd 4f       	sbci	r29, 0xFD	; 253
 6d6:	e8 81       	ld	r30, Y
 6d8:	f9 81       	ldd	r31, Y+1	; 0x01
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 6da:	80 81       	ld	r24, Z
 6dc:	85 ff       	sbrs	r24, 5
 6de:	fd cf       	rjmp	.-6      	; 0x6da <UART_gets+0xb6>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 6e0:	8a e0       	ldi	r24, 0x0A	; 10
 6e2:	86 83       	std	Z+6, r24	; 0x06
			putchar(com, c);
		}

	}

}
 6e4:	df 91       	pop	r29
 6e6:	cf 91       	pop	r28
 6e8:	1f 91       	pop	r17
 6ea:	0f 91       	pop	r16
 6ec:	ff 90       	pop	r15
 6ee:	ef 90       	pop	r14
 6f0:	df 90       	pop	r13
 6f2:	cf 90       	pop	r12
 6f4:	bf 90       	pop	r11
 6f6:	08 95       	ret
			UART_putchar(com,'\r'); //vuelve al inicio de la linea
			UART_putchar(com,'\n'); //salto de linea
			break; //rompesmos el ciclo y a esperar que se vuelva a escribir algo
		}

		if(i<127){
 6f8:	fe e7       	ldi	r31, 0x7E	; 126
 6fa:	ff 15       	cp	r31, r15
 6fc:	08 f4       	brcc	.+2      	; 0x700 <UART_gets+0xdc>
 6fe:	a8 cf       	rjmp	.-176    	; 0x650 <UART_gets+0x2c>

			str[i++]= c;
 700:	f6 01       	movw	r30, r12
 702:	ef 0d       	add	r30, r15
 704:	f1 1d       	adc	r31, r1
 706:	60 83       	st	Z, r22
 708:	f3 94       	inc	r15
			putchar(com, c);
 70a:	ce 01       	movw	r24, r28
 70c:	70 e0       	ldi	r23, 0x00	; 0
 70e:	0e 94 b8 03 	call	0x770	; 0x770 <putchar>
 712:	9e cf       	rjmp	.-196    	; 0x650 <UART_gets+0x2c>

00000714 <__udivmodqi4>:
 714:	99 1b       	sub	r25, r25
 716:	79 e0       	ldi	r23, 0x09	; 9
 718:	04 c0       	rjmp	.+8      	; 0x722 <__udivmodqi4_ep>

0000071a <__udivmodqi4_loop>:
 71a:	99 1f       	adc	r25, r25
 71c:	96 17       	cp	r25, r22
 71e:	08 f0       	brcs	.+2      	; 0x722 <__udivmodqi4_ep>
 720:	96 1b       	sub	r25, r22

00000722 <__udivmodqi4_ep>:
 722:	88 1f       	adc	r24, r24
 724:	7a 95       	dec	r23
 726:	c9 f7       	brne	.-14     	; 0x71a <__udivmodqi4_loop>
 728:	80 95       	com	r24
 72a:	08 95       	ret

0000072c <__udivmodsi4>:
 72c:	a1 e2       	ldi	r26, 0x21	; 33
 72e:	1a 2e       	mov	r1, r26
 730:	aa 1b       	sub	r26, r26
 732:	bb 1b       	sub	r27, r27
 734:	fd 01       	movw	r30, r26
 736:	0d c0       	rjmp	.+26     	; 0x752 <__udivmodsi4_ep>

00000738 <__udivmodsi4_loop>:
 738:	aa 1f       	adc	r26, r26
 73a:	bb 1f       	adc	r27, r27
 73c:	ee 1f       	adc	r30, r30
 73e:	ff 1f       	adc	r31, r31
 740:	a2 17       	cp	r26, r18
 742:	b3 07       	cpc	r27, r19
 744:	e4 07       	cpc	r30, r20
 746:	f5 07       	cpc	r31, r21
 748:	20 f0       	brcs	.+8      	; 0x752 <__udivmodsi4_ep>
 74a:	a2 1b       	sub	r26, r18
 74c:	b3 0b       	sbc	r27, r19
 74e:	e4 0b       	sbc	r30, r20
 750:	f5 0b       	sbc	r31, r21

00000752 <__udivmodsi4_ep>:
 752:	66 1f       	adc	r22, r22
 754:	77 1f       	adc	r23, r23
 756:	88 1f       	adc	r24, r24
 758:	99 1f       	adc	r25, r25
 75a:	1a 94       	dec	r1
 75c:	69 f7       	brne	.-38     	; 0x738 <__udivmodsi4_loop>
 75e:	60 95       	com	r22
 760:	70 95       	com	r23
 762:	80 95       	com	r24
 764:	90 95       	com	r25
 766:	9b 01       	movw	r18, r22
 768:	ac 01       	movw	r20, r24
 76a:	bd 01       	movw	r22, r26
 76c:	cf 01       	movw	r24, r30
 76e:	08 95       	ret

00000770 <putchar>:
 770:	60 91 4a 02 	lds	r22, 0x024A
 774:	70 91 4b 02 	lds	r23, 0x024B
 778:	0e 94 bf 03 	call	0x77e	; 0x77e <fputc>
 77c:	08 95       	ret

0000077e <fputc>:
 77e:	0f 93       	push	r16
 780:	1f 93       	push	r17
 782:	cf 93       	push	r28
 784:	df 93       	push	r29
 786:	8c 01       	movw	r16, r24
 788:	eb 01       	movw	r28, r22
 78a:	8b 81       	ldd	r24, Y+3	; 0x03
 78c:	81 ff       	sbrs	r24, 1
 78e:	1b c0       	rjmp	.+54     	; 0x7c6 <fputc+0x48>
 790:	82 ff       	sbrs	r24, 2
 792:	0d c0       	rjmp	.+26     	; 0x7ae <fputc+0x30>
 794:	2e 81       	ldd	r18, Y+6	; 0x06
 796:	3f 81       	ldd	r19, Y+7	; 0x07
 798:	8c 81       	ldd	r24, Y+4	; 0x04
 79a:	9d 81       	ldd	r25, Y+5	; 0x05
 79c:	28 17       	cp	r18, r24
 79e:	39 07       	cpc	r19, r25
 7a0:	64 f4       	brge	.+24     	; 0x7ba <fputc+0x3c>
 7a2:	e8 81       	ld	r30, Y
 7a4:	f9 81       	ldd	r31, Y+1	; 0x01
 7a6:	01 93       	st	Z+, r16
 7a8:	f9 83       	std	Y+1, r31	; 0x01
 7aa:	e8 83       	st	Y, r30
 7ac:	06 c0       	rjmp	.+12     	; 0x7ba <fputc+0x3c>
 7ae:	e8 85       	ldd	r30, Y+8	; 0x08
 7b0:	f9 85       	ldd	r31, Y+9	; 0x09
 7b2:	80 2f       	mov	r24, r16
 7b4:	19 95       	eicall
 7b6:	89 2b       	or	r24, r25
 7b8:	31 f4       	brne	.+12     	; 0x7c6 <fputc+0x48>
 7ba:	8e 81       	ldd	r24, Y+6	; 0x06
 7bc:	9f 81       	ldd	r25, Y+7	; 0x07
 7be:	01 96       	adiw	r24, 0x01	; 1
 7c0:	9f 83       	std	Y+7, r25	; 0x07
 7c2:	8e 83       	std	Y+6, r24	; 0x06
 7c4:	02 c0       	rjmp	.+4      	; 0x7ca <fputc+0x4c>
 7c6:	0f ef       	ldi	r16, 0xFF	; 255
 7c8:	1f ef       	ldi	r17, 0xFF	; 255
 7ca:	c8 01       	movw	r24, r16
 7cc:	df 91       	pop	r29
 7ce:	cf 91       	pop	r28
 7d0:	1f 91       	pop	r17
 7d2:	0f 91       	pop	r16
 7d4:	08 95       	ret

000007d6 <_exit>:
 7d6:	f8 94       	cli

000007d8 <__stop_program>:
 7d8:	ff cf       	rjmp	.-2      	; 0x7d8 <__stop_program>
