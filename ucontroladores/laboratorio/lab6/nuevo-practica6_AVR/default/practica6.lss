
practica6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800200  00000842  000008b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000842  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000040  00000000  00000000  000008fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000ef  00000000  00000000  0000093e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000009f6  00000000  00000000  00000a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000341  00000000  00000000  00001423  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000006cb  00000000  00000000  00001764  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000f0  00000000  00000000  00001e30  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000248  00000000  00000000  00001f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000068d  00000000  00000000  00002168  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000001b0  00000000  00000000  000027f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  8c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  90:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  94:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  98:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  9c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  ac:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  bc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  cc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  dc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  e0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e4       	ldi	r30, 0x42	; 66
  fc:	f8 e0       	ldi	r31, 0x08	; 8
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 34       	cpi	r26, 0x48	; 72
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
 112:	0c 94 1f 04 	jmp	0x83e	; 0x83e <_exit>

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <main>:
#include "UART.h"



int main( void )
{
 11a:	ef 92       	push	r14
 11c:	ff 92       	push	r15
 11e:	0f 93       	push	r16
 120:	1f 93       	push	r17
 122:	df 93       	push	r29
 124:	cf 93       	push	r28
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
 12a:	a8 97       	sbiw	r28, 0x28	; 40
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	f8 94       	cli
 130:	de bf       	out	0x3e, r29	; 62
 132:	0f be       	out	0x3f, r0	; 63
 134:	cd bf       	out	0x3d, r28	; 61
    char cad[20];
    char cadUart3[20];
    uint16_t num;


    UART_Ini(0,12345,8,1,2); //comunicacion con teraterm
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	49 e3       	ldi	r20, 0x39	; 57
 13a:	50 e3       	ldi	r21, 0x30	; 48
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	70 e0       	ldi	r23, 0x00	; 0
 140:	28 e0       	ldi	r18, 0x08	; 8
 142:	01 e0       	ldi	r16, 0x01	; 1
 144:	92 e0       	ldi	r25, 0x02	; 2
 146:	e9 2e       	mov	r14, r25
 148:	0e 94 20 01 	call	0x240	; 0x240 <UART_Ini>
    UART_Ini(2,115200,8,0,1);
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	40 e0       	ldi	r20, 0x00	; 0
 150:	52 ec       	ldi	r21, 0xC2	; 194
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	28 e0       	ldi	r18, 0x08	; 8
 158:	00 e0       	ldi	r16, 0x00	; 0
 15a:	ee 24       	eor	r14, r14
 15c:	e3 94       	inc	r14
 15e:	0e 94 20 01 	call	0x240	; 0x240 <UART_Ini>
    UART_Ini(3,115200,8,0,1);
 162:	83 e0       	ldi	r24, 0x03	; 3
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	52 ec       	ldi	r21, 0xC2	; 194
 168:	61 e0       	ldi	r22, 0x01	; 1
 16a:	70 e0       	ldi	r23, 0x00	; 0
 16c:	28 e0       	ldi	r18, 0x08	; 8
 16e:	0e 94 20 01 	call	0x240	; 0x240 <UART_Ini>
        UART_setColor(0,YELLOW);
        UART_puts(0,"Introduce un n?mero:"); //terminamos con un caracter nulo, funciona bien puts

        UART_gotoxy(0,22,2);
        UART_setColor(0,GREEN);
        UART_gets(0,cad); //vreremos si este funciona correcto
 172:	8e 01       	movw	r16, r28
 174:	0f 5f       	subi	r16, 0xFF	; 255
 176:	1f 4f       	sbci	r17, 0xFF	; 255
// -------------------------------------------
        // Cycle through UART2->UART3
        UART_puts(2,cad);
        UART_puts(2,"\r");
        UART_gets(3,cadUart3);
 178:	85 e1       	ldi	r24, 0x15	; 21
 17a:	e8 2e       	mov	r14, r24
 17c:	f1 2c       	mov	r15, r1
 17e:	ec 0e       	add	r14, r28
 180:	fd 1e       	adc	r15, r29
    UART_Ini(0,12345,8,1,2); //comunicacion con teraterm
    UART_Ini(2,115200,8,0,1);
    UART_Ini(3,115200,8,0,1);
    while(1)
    {
        UART_getchar(0);//getchar funciona OK
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	0e 94 b3 01 	call	0x366	; 0x366 <UART_getchar>
        UART_clrscr(0);
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	0e 94 20 02 	call	0x440	; 0x440 <UART_clrscr>

        UART_gotoxy(0,2,2);
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	62 e0       	ldi	r22, 0x02	; 2
 192:	42 e0       	ldi	r20, 0x02	; 2
 194:	0e 94 6e 02 	call	0x4dc	; 0x4dc <UART_gotoxy>
        UART_setColor(0,YELLOW);
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	61 e2       	ldi	r22, 0x21	; 33
 19c:	0e 94 a4 02 	call	0x548	; 0x548 <UART_setColor>
        UART_puts(0,"Introduce un n?mero:"); //terminamos con un caracter nulo, funciona bien puts
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	72 e0       	ldi	r23, 0x02	; 2
 1a6:	0e 94 81 01 	call	0x302	; 0x302 <UART_puts>

        UART_gotoxy(0,22,2);
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	66 e1       	ldi	r22, 0x16	; 22
 1ae:	42 e0       	ldi	r20, 0x02	; 2
 1b0:	0e 94 6e 02 	call	0x4dc	; 0x4dc <UART_gotoxy>
        UART_setColor(0,GREEN);
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	60 e2       	ldi	r22, 0x20	; 32
 1b8:	0e 94 a4 02 	call	0x548	; 0x548 <UART_setColor>
        UART_gets(0,cad); //vreremos si este funciona correcto
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	b8 01       	movw	r22, r16
 1c0:	0e 94 c1 01 	call	0x382	; 0x382 <UART_gets>
// -------------------------------------------
        // Cycle through UART2->UART3
        UART_puts(2,cad);
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	b8 01       	movw	r22, r16
 1c8:	0e 94 81 01 	call	0x302	; 0x302 <UART_puts>
        UART_puts(2,"\r");
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	65 e1       	ldi	r22, 0x15	; 21
 1d0:	72 e0       	ldi	r23, 0x02	; 2
 1d2:	0e 94 81 01 	call	0x302	; 0x302 <UART_puts>
        UART_gets(3,cadUart3);
 1d6:	83 e0       	ldi	r24, 0x03	; 3
 1d8:	b7 01       	movw	r22, r14
 1da:	0e 94 c1 01 	call	0x382	; 0x382 <UART_gets>
        UART_gotoxy(0,5,3);
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	65 e0       	ldi	r22, 0x05	; 5
 1e2:	43 e0       	ldi	r20, 0x03	; 3
 1e4:	0e 94 6e 02 	call	0x4dc	; 0x4dc <UART_gotoxy>
        UART_puts(0,cadUart3);
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	b7 01       	movw	r22, r14
 1ec:	0e 94 81 01 	call	0x302	; 0x302 <UART_puts>
// -------------------------------------------
        num = atoi(cad);
 1f0:	c8 01       	movw	r24, r16
 1f2:	0e 94 de 02 	call	0x5bc	; 0x5bc <atoi>
        itoa(num,cad,16);
 1f6:	b8 01       	movw	r22, r16
 1f8:	40 e1       	ldi	r20, 0x10	; 16
 1fa:	0e 94 39 03 	call	0x672	; 0x672 <itoa>

        UART_gotoxy(0,5,4);
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	65 e0       	ldi	r22, 0x05	; 5
 202:	44 e0       	ldi	r20, 0x04	; 4
 204:	0e 94 6e 02 	call	0x4dc	; 0x4dc <UART_gotoxy>
        UART_setColor(0,BLUE);
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	62 e2       	ldi	r22, 0x22	; 34
 20c:	0e 94 a4 02 	call	0x548	; 0x548 <UART_setColor>
        UART_puts(0,"Hex: ");
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	67 e1       	ldi	r22, 0x17	; 23
 214:	72 e0       	ldi	r23, 0x02	; 2
 216:	0e 94 81 01 	call	0x302	; 0x302 <UART_puts>
        UART_puts(0,cad);
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	b8 01       	movw	r22, r16
 21e:	0e 94 81 01 	call	0x302	; 0x302 <UART_puts>
        //itoa(num,cad,2);

        UART_gotoxy(0,5,5);
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	65 e0       	ldi	r22, 0x05	; 5
 226:	45 e0       	ldi	r20, 0x05	; 5
 228:	0e 94 6e 02 	call	0x4dc	; 0x4dc <UART_gotoxy>
        UART_puts(0,"Bin: ");
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	6d e1       	ldi	r22, 0x1D	; 29
 230:	72 e0       	ldi	r23, 0x02	; 2
 232:	0e 94 81 01 	call	0x302	; 0x302 <UART_puts>
        UART_puts(0,cad);
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	b8 01       	movw	r22, r16
 23a:	0e 94 81 01 	call	0x302	; 0x302 <UART_puts>
 23e:	a1 cf       	rjmp	.-190    	; 0x182 <main+0x68>

00000240 <UART_Ini>:

};



UART_Ini(uint8_t com, uint32_t baudrate, uint8_t size, uint8_t parity, uint8_t stop){
 240:	af 92       	push	r10
 242:	bf 92       	push	r11
 244:	cf 92       	push	r12
 246:	df 92       	push	r13
 248:	ef 92       	push	r14
 24a:	0f 93       	push	r16
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	5a 01       	movw	r10, r20
 252:	6b 01       	movw	r12, r22
 254:	92 2f       	mov	r25, r18
 256:	2e 2d       	mov	r18, r14

    UART_reg_t *myUART = UART_offset[com]; // eligo a mi UART
 258:	e8 2f       	mov	r30, r24
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	ee 0f       	add	r30, r30
 25e:	ff 1f       	adc	r31, r31
 260:	e1 5d       	subi	r30, 0xD1	; 209
 262:	fd 4f       	sbci	r31, 0xFD	; 253
 264:	c0 81       	ld	r28, Z
 266:	d1 81       	ldd	r29, Z+1	; 0x01

    myUART->UCSRB = (1 << TXEN0) | (1 << RXEN0); // Habilita TX y RX para UART0
 268:	88 e1       	ldi	r24, 0x18	; 24
 26a:	89 83       	std	Y+1, r24	; 0x01
    //establecer las paridades
	//uint8_t parity_mode= (parity == 1) ? 2 : 3;  // 2: Paridad par, 3: Paridad impar

    uint8_t parity_mode=0;

    switch(parity){
 26c:	01 30       	cpi	r16, 0x01	; 1
 26e:	21 f0       	breq	.+8      	; 0x278 <UART_Ini+0x38>
 270:	02 30       	cpi	r16, 0x02	; 2
 272:	21 f4       	brne	.+8      	; 0x27c <UART_Ini+0x3c>
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	03 c0       	rjmp	.+6      	; 0x27e <UART_Ini+0x3e>
 278:	83 e0       	ldi	r24, 0x03	; 3
 27a:	01 c0       	rjmp	.+2      	; 0x27e <UART_Ini+0x3e>
 27c:	80 e0       	ldi	r24, 0x00	; 0
    //me manda sde de 1 o 2 por lo que ocn este ternearo decivo si es 1 sera 1 bit de parada 0
    //pero si es otro valor seran 2 bits de parada

    uint8_t stop_mode= (stop == 1)? 0:1;

    myUART->UCSRC = (parity_mode << UPM00) | (stop_mode <<USBS0);
 27e:	e8 2f       	mov	r30, r24
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	54 e0       	ldi	r21, 0x04	; 4
 284:	ee 0f       	add	r30, r30
 286:	ff 1f       	adc	r31, r31
 288:	5a 95       	dec	r21
 28a:	e1 f7       	brne	.-8      	; 0x284 <UART_Ini+0x44>
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	70 e0       	ldi	r23, 0x00	; 0
 290:	21 30       	cpi	r18, 0x01	; 1
 292:	11 f0       	breq	.+4      	; 0x298 <UART_Ini+0x58>
 294:	61 e0       	ldi	r22, 0x01	; 1
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	43 e0       	ldi	r20, 0x03	; 3
 29a:	66 0f       	add	r22, r22
 29c:	77 1f       	adc	r23, r23
 29e:	4a 95       	dec	r20
 2a0:	e1 f7       	brne	.-8      	; 0x29a <UART_Ini+0x5a>
 2a2:	8e 2f       	mov	r24, r30
 2a4:	86 2b       	or	r24, r22
 2a6:	8a 83       	std	Y+2, r24	; 0x02

		myUART->UCSRC = 3 << UCSZ00;
		myUART->UCSRB = 1<< UCSZ02; //habilitamos los 9 bits
	}*/

	if (size == 9) {
 2a8:	99 30       	cpi	r25, 0x09	; 9
 2aa:	39 f4       	brne	.+14     	; 0x2ba <UART_Ini+0x7a>
        myUART->UCSRC |= (3 << UCSZ00); // UCSZ01:UCSZ00 = 0b11
 2ac:	8a 81       	ldd	r24, Y+2	; 0x02
 2ae:	86 60       	ori	r24, 0x06	; 6
 2b0:	8a 83       	std	Y+2, r24	; 0x02
        myUART->UCSRB |= (1 << UCSZ02); // Habilitar bit 9
 2b2:	89 81       	ldd	r24, Y+1	; 0x01
 2b4:	84 60       	ori	r24, 0x04	; 4
 2b6:	89 83       	std	Y+1, r24	; 0x01
 2b8:	08 c0       	rjmp	.+16     	; 0x2ca <UART_Ini+0x8a>
    } else
     {
        myUART->UCSRC |= ((size - 5) << UCSZ00); // Ej: 8 bits ? 3 << UCSZ00
 2ba:	2a 81       	ldd	r18, Y+2	; 0x02
 2bc:	89 2f       	mov	r24, r25
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	05 97       	sbiw	r24, 0x05	; 5
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	28 2b       	or	r18, r24
 2c8:	2a 83       	std	Y+2, r18	; 0x02
    }

    uint16_t v_UBRR = (FOSC / (16 * baudrate)) - 1 ;
 2ca:	84 e0       	ldi	r24, 0x04	; 4
 2cc:	aa 0c       	add	r10, r10
 2ce:	bb 1c       	adc	r11, r11
 2d0:	cc 1c       	adc	r12, r12
 2d2:	dd 1c       	adc	r13, r13
 2d4:	8a 95       	dec	r24
 2d6:	d1 f7       	brne	.-12     	; 0x2cc <UART_Ini+0x8c>
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	74 e2       	ldi	r23, 0x24	; 36
 2dc:	84 ef       	ldi	r24, 0xF4	; 244
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	a6 01       	movw	r20, r12
 2e2:	95 01       	movw	r18, r10
 2e4:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__udivmodsi4>
 2e8:	21 50       	subi	r18, 0x01	; 1
 2ea:	30 40       	sbci	r19, 0x00	; 0
    myUART->UBRR = v_UBRR;
 2ec:	3d 83       	std	Y+5, r19	; 0x05
 2ee:	2c 83       	std	Y+4, r18	; 0x04
}
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	0f 91       	pop	r16
 2f6:	ef 90       	pop	r14
 2f8:	df 90       	pop	r13
 2fa:	cf 90       	pop	r12
 2fc:	bf 90       	pop	r11
 2fe:	af 90       	pop	r10
 300:	08 95       	ret

00000302 <UART_puts>:
*/


//este haria lo mismo de putchar la unica deiferente es que este estara
//recorriendo la cadena que se quiere imprimir
void UART_puts(uint8_t com, char *str){
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	eb 01       	movw	r28, r22
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 308:	e8 2f       	mov	r30, r24
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	ee 0f       	add	r30, r30
 30e:	ff 1f       	adc	r31, r31
 310:	e1 5d       	subi	r30, 0xD1	; 209
 312:	fd 4f       	sbci	r31, 0xFD	; 253
 314:	08 c0       	rjmp	.+16     	; 0x326 <UART_puts+0x24>
 316:	a0 81       	ld	r26, Z
 318:	b1 81       	ldd	r27, Z+1	; 0x01
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 31a:	8c 91       	ld	r24, X
 31c:	85 ff       	sbrs	r24, 5
 31e:	fd cf       	rjmp	.-6      	; 0x31a <UART_puts+0x18>
void UART_puts(uint8_t com, char *str){

	//TXn trasmitir el contenido
	while(*str!= '\0'){
		//mientras haya contenido en el apuntador, que sea diferente a NULL
		UART_putchar(com,*str++);
 320:	21 96       	adiw	r28, 0x01	; 1

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 322:	16 96       	adiw	r26, 0x06	; 6
 324:	9c 93       	st	X, r25
//este haria lo mismo de putchar la unica deiferente es que este estara
//recorriendo la cadena que se quiere imprimir
void UART_puts(uint8_t com, char *str){

	//TXn trasmitir el contenido
	while(*str!= '\0'){
 326:	98 81       	ld	r25, Y
 328:	99 23       	and	r25, r25
 32a:	a9 f7       	brne	.-22     	; 0x316 <UART_puts+0x14>
		//mientras haya contenido en el apuntador, que sea diferente a NULL
		UART_putchar(com,*str++);
	}
}
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	08 95       	ret

00000332 <UART_putchar>:
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 332:	e8 2f       	mov	r30, r24
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	ee 0f       	add	r30, r30
 338:	ff 1f       	adc	r31, r31
 33a:	e1 5d       	subi	r30, 0xD1	; 209
 33c:	fd 4f       	sbci	r31, 0xFD	; 253
 33e:	01 90       	ld	r0, Z+
 340:	f0 81       	ld	r31, Z
 342:	e0 2d       	mov	r30, r0
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 344:	80 81       	ld	r24, Z
 346:	85 ff       	sbrs	r24, 5
 348:	fd cf       	rjmp	.-6      	; 0x344 <UART_putchar+0x12>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 34a:	66 83       	std	Z+6, r22	; 0x06
}
 34c:	08 95       	ret

0000034e <UART_available>:
uint8_t UART_available(uint8_t com){

	//RXC0 sta en 1 cuando hay un dato sin leer en RXC
	//y esta en 0 cunado este no tiene nada

	UART_reg_t *myUART = UART_offset[com];
 34e:	e8 2f       	mov	r30, r24
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	ee 0f       	add	r30, r30
 354:	ff 1f       	adc	r31, r31
 356:	e1 5d       	subi	r30, 0xD1	; 209
 358:	fd 4f       	sbci	r31, 0xFD	; 253
 35a:	01 90       	ld	r0, Z+
 35c:	f0 81       	ld	r31, Z
 35e:	e0 2d       	mov	r30, r0

	return (myUART->UCSRA & (1 << RXC0)) ; // Hay dato disponible
 360:	80 81       	ld	r24, Z
	//creo que va a asi pero si hay errores podemos invertirlo
}
 362:	80 78       	andi	r24, 0x80	; 128
 364:	08 95       	ret

00000366 <UART_getchar>:
	return myUART->UDR;
}*/


char UART_getchar(uint8_t com) {
    UART_reg_t *myUART = UART_offset[com];
 366:	e8 2f       	mov	r30, r24
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	ee 0f       	add	r30, r30
 36c:	ff 1f       	adc	r31, r31
 36e:	e1 5d       	subi	r30, 0xD1	; 209
 370:	fd 4f       	sbci	r31, 0xFD	; 253
 372:	01 90       	ld	r0, Z+
 374:	f0 81       	ld	r31, Z
 376:	e0 2d       	mov	r30, r0
    while (!(myUART->UCSRA & (1 << RXC0))); // Espera dato
 378:	80 81       	ld	r24, Z
 37a:	87 ff       	sbrs	r24, 7
 37c:	fd cf       	rjmp	.-6      	; 0x378 <UART_getchar+0x12>
    return myUART->UDR;
 37e:	86 81       	ldd	r24, Z+6	; 0x06
}
 380:	08 95       	ret

00000382 <UART_gets>:


void UART_gets(uint8_t com, char *str){
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	ab 01       	movw	r20, r22
 388:	20 e0       	ldi	r18, 0x00	; 0
	return myUART->UDR;
}*/


char UART_getchar(uint8_t com) {
    UART_reg_t *myUART = UART_offset[com];
 38a:	a8 2f       	mov	r26, r24
 38c:	b0 e0       	ldi	r27, 0x00	; 0
 38e:	ed 01       	movw	r28, r26
 390:	cc 0f       	add	r28, r28
 392:	dd 1f       	adc	r29, r29
 394:	c1 5d       	subi	r28, 0xD1	; 209
 396:	dd 4f       	sbci	r29, 0xFD	; 253

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 398:	38 e0       	ldi	r19, 0x08	; 8
	return myUART->UDR;
}*/


char UART_getchar(uint8_t com) {
    UART_reg_t *myUART = UART_offset[com];
 39a:	60 e2       	ldi	r22, 0x20	; 32
 39c:	e8 81       	ld	r30, Y
 39e:	f9 81       	ldd	r31, Y+1	; 0x01
    while (!(myUART->UCSRA & (1 << RXC0))); // Espera dato
 3a0:	80 81       	ld	r24, Z
 3a2:	87 ff       	sbrs	r24, 7
 3a4:	fd cf       	rjmp	.-6      	; 0x3a0 <UART_gets+0x1e>
    return myUART->UDR;
 3a6:	96 81       	ldd	r25, Z+6	; 0x06

		-cuando se limpia la pantalla

		*/
		//verificamos si se quiere borrar que en efecto haya algo que borrar
		if(c=='\b'){
 3a8:	98 30       	cpi	r25, 0x08	; 8
 3aa:	d1 f4       	brne	.+52     	; 0x3e0 <UART_gets+0x5e>
			if(i>0){
 3ac:	22 23       	and	r18, r18
 3ae:	b1 f3       	breq	.-20     	; 0x39c <UART_gets+0x1a>

				str[--i] = '\0'; //sustitumos el utlimo caracter con el nulo
 3b0:	21 50       	subi	r18, 0x01	; 1
 3b2:	fa 01       	movw	r30, r20
 3b4:	e2 0f       	add	r30, r18
 3b6:	f1 1d       	adc	r31, r1
 3b8:	10 82       	st	Z, r1
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 3ba:	e8 81       	ld	r30, Y
 3bc:	f9 81       	ldd	r31, Y+1	; 0x01
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 3be:	80 81       	ld	r24, Z
 3c0:	85 ff       	sbrs	r24, 5
 3c2:	fd cf       	rjmp	.-6      	; 0x3be <UART_gets+0x3c>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 3c4:	36 83       	std	Z+6, r19	; 0x06
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 3c6:	e8 81       	ld	r30, Y
 3c8:	f9 81       	ldd	r31, Y+1	; 0x01
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 3ca:	80 81       	ld	r24, Z
 3cc:	85 ff       	sbrs	r24, 5
 3ce:	fd cf       	rjmp	.-6      	; 0x3ca <UART_gets+0x48>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 3d0:	66 83       	std	Z+6, r22	; 0x06
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 3d2:	e8 81       	ld	r30, Y
 3d4:	f9 81       	ldd	r31, Y+1	; 0x01
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 3d6:	80 81       	ld	r24, Z
 3d8:	85 ff       	sbrs	r24, 5
 3da:	fd cf       	rjmp	.-6      	; 0x3d6 <UART_gets+0x54>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 3dc:	36 83       	std	Z+6, r19	; 0x06
 3de:	de cf       	rjmp	.-68     	; 0x39c <UART_gets+0x1a>
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 3e0:	80 81       	ld	r24, Z
 3e2:	85 ff       	sbrs	r24, 5
 3e4:	fd cf       	rjmp	.-6      	; 0x3e0 <UART_gets+0x5e>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 3e6:	96 83       	std	Z+6, r25	; 0x06
			continue; // si no hay nada que borrar o si hay algoq ue borrar sigue con el ciclo
		}

		UART_putchar(com,c);

		if(c == '\r' || c== '\n'){
 3e8:	9d 30       	cpi	r25, 0x0D	; 13
 3ea:	11 f0       	breq	.+4      	; 0x3f0 <UART_gets+0x6e>
 3ec:	9a 30       	cpi	r25, 0x0A	; 10
 3ee:	f9 f4       	brne	.+62     	; 0x42e <UART_gets+0xac>
		//retorno de carro o salto de linea lo que quiere decir que se terminao de escribir el
		//texto actual.

			str[i]='\0'; //caracter nulo denotando que la
 3f0:	42 0f       	add	r20, r18
 3f2:	51 1d       	adc	r21, r1
 3f4:	fa 01       	movw	r30, r20
 3f6:	10 82       	st	Z, r1
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 3f8:	fd 01       	movw	r30, r26
 3fa:	ee 0f       	add	r30, r30
 3fc:	ff 1f       	adc	r31, r31
 3fe:	e1 5d       	subi	r30, 0xD1	; 209
 400:	fd 4f       	sbci	r31, 0xFD	; 253
 402:	01 90       	ld	r0, Z+
 404:	f0 81       	ld	r31, Z
 406:	e0 2d       	mov	r30, r0
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 408:	80 81       	ld	r24, Z
 40a:	85 ff       	sbrs	r24, 5
 40c:	fd cf       	rjmp	.-6      	; 0x408 <UART_gets+0x86>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 40e:	8d e0       	ldi	r24, 0x0D	; 13
 410:	86 83       	std	Z+6, r24	; 0x06
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 412:	aa 0f       	add	r26, r26
 414:	bb 1f       	adc	r27, r27
 416:	a1 5d       	subi	r26, 0xD1	; 209
 418:	bd 4f       	sbci	r27, 0xFD	; 253
 41a:	ed 91       	ld	r30, X+
 41c:	fc 91       	ld	r31, X
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 41e:	80 81       	ld	r24, Z
 420:	85 ff       	sbrs	r24, 5
 422:	fd cf       	rjmp	.-6      	; 0x41e <UART_gets+0x9c>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 424:	8a e0       	ldi	r24, 0x0A	; 10
 426:	86 83       	std	Z+6, r24	; 0x06
			//UART_putchar(com, c);
		}

	}

}
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	08 95       	ret
			UART_putchar(com,'\r'); //vuelve al inicio de la linea
			UART_putchar(com,'\n'); //salto de linea
			break; //rompesmos el ciclo y a esperar que se vuelva a escribir algo
		}

		if(i<127){
 42e:	2f 37       	cpi	r18, 0x7F	; 127
 430:	08 f0       	brcs	.+2      	; 0x434 <UART_gets+0xb2>
 432:	b4 cf       	rjmp	.-152    	; 0x39c <UART_gets+0x1a>

			str[i++]= c;
 434:	fa 01       	movw	r30, r20
 436:	e2 0f       	add	r30, r18
 438:	f1 1d       	adc	r31, r1
 43a:	90 83       	st	Z, r25
 43c:	2f 5f       	subi	r18, 0xFF	; 255
 43e:	ae cf       	rjmp	.-164    	; 0x39c <UART_gets+0x1a>

00000440 <UART_clrscr>:

}


// Escape sequences
UART_clrscr( uint8_t com ){
 440:	1f 93       	push	r17
 442:	18 2f       	mov	r17, r24
        que con ESC[2J se borra toda la pantalla

        lo mismo para con posicionar al inicio de la termianl
        sin parametros H se estbalce en la fila1 - columna1
    */
    UART_puts(com,"\x1B[2J"); //borra toda la pantalla
 444:	63 e2       	ldi	r22, 0x23	; 35
 446:	72 e0       	ldi	r23, 0x02	; 2
 448:	0e 94 81 01 	call	0x302	; 0x302 <UART_puts>
    UART_puts(com,"\x1B[H"); // poen el curso al incio fila 1, columna 1
 44c:	81 2f       	mov	r24, r17
 44e:	68 e2       	ldi	r22, 0x28	; 40
 450:	72 e0       	ldi	r23, 0x02	; 2
 452:	0e 94 81 01 	call	0x302	; 0x302 <UART_puts>


}
 456:	1f 91       	pop	r17
 458:	08 95       	ret

0000045a <UART_putnum>:


void UART_putnum(uint8_t com, uint8_t num){
 45a:	38 2f       	mov	r19, r24
 45c:	26 2f       	mov	r18, r22

    if(num >= 100){
 45e:	64 36       	cpi	r22, 0x64	; 100
 460:	b0 f0       	brcs	.+44     	; 0x48e <UART_putnum+0x34>
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 462:	e8 2f       	mov	r30, r24
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	ee 0f       	add	r30, r30
 468:	ff 1f       	adc	r31, r31
 46a:	e1 5d       	subi	r30, 0xD1	; 209
 46c:	fd 4f       	sbci	r31, 0xFD	; 253
 46e:	01 90       	ld	r0, Z+
 470:	f0 81       	ld	r31, Z
 472:	e0 2d       	mov	r30, r0
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 474:	80 81       	ld	r24, Z
 476:	85 ff       	sbrs	r24, 5
 478:	fd cf       	rjmp	.-6      	; 0x474 <UART_putnum+0x1a>


void UART_putnum(uint8_t com, uint8_t num){

    if(num >= 100){
        UART_putchar(com, '0'+(num/100));
 47a:	82 2f       	mov	r24, r18
 47c:	64 e6       	ldi	r22, 0x64	; 100
 47e:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__udivmodqi4>
 482:	80 5d       	subi	r24, 0xD0	; 208

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 484:	86 83       	std	Z+6, r24	; 0x06

void UART_putnum(uint8_t com, uint8_t num){

    if(num >= 100){
        UART_putchar(com, '0'+(num/100));
        num%=100;
 486:	82 2f       	mov	r24, r18
 488:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__udivmodqi4>
 48c:	29 2f       	mov	r18, r25
    }
    if(num>=10){
 48e:	2a 30       	cpi	r18, 0x0A	; 10
 490:	b0 f0       	brcs	.+44     	; 0x4be <UART_putnum+0x64>
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 492:	e3 2f       	mov	r30, r19
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	ee 0f       	add	r30, r30
 498:	ff 1f       	adc	r31, r31
 49a:	e1 5d       	subi	r30, 0xD1	; 209
 49c:	fd 4f       	sbci	r31, 0xFD	; 253
 49e:	01 90       	ld	r0, Z+
 4a0:	f0 81       	ld	r31, Z
 4a2:	e0 2d       	mov	r30, r0
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 4a4:	80 81       	ld	r24, Z
 4a6:	85 ff       	sbrs	r24, 5
 4a8:	fd cf       	rjmp	.-6      	; 0x4a4 <UART_putnum+0x4a>
    if(num >= 100){
        UART_putchar(com, '0'+(num/100));
        num%=100;
    }
    if(num>=10){
        UART_putchar(com, '0'+(num/10));
 4aa:	82 2f       	mov	r24, r18
 4ac:	6a e0       	ldi	r22, 0x0A	; 10
 4ae:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__udivmodqi4>
 4b2:	80 5d       	subi	r24, 0xD0	; 208

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 4b4:	86 83       	std	Z+6, r24	; 0x06
        UART_putchar(com, '0'+(num/100));
        num%=100;
    }
    if(num>=10){
        UART_putchar(com, '0'+(num/10));
        num%=10;
 4b6:	82 2f       	mov	r24, r18
 4b8:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__udivmodqi4>
 4bc:	29 2f       	mov	r18, r25
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 4be:	e3 2f       	mov	r30, r19
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	ee 0f       	add	r30, r30
 4c4:	ff 1f       	adc	r31, r31
 4c6:	e1 5d       	subi	r30, 0xD1	; 209
 4c8:	fd 4f       	sbci	r31, 0xFD	; 253
 4ca:	01 90       	ld	r0, Z+
 4cc:	f0 81       	ld	r31, Z
 4ce:	e0 2d       	mov	r30, r0
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 4d0:	80 81       	ld	r24, Z
 4d2:	85 ff       	sbrs	r24, 5
 4d4:	fd cf       	rjmp	.-6      	; 0x4d0 <UART_putnum+0x76>
    if(num>=10){
        UART_putchar(com, '0'+(num/10));
        num%=10;
    }

    UART_putchar(com,'0'+num);
 4d6:	20 5d       	subi	r18, 0xD0	; 208

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 4d8:	26 83       	std	Z+6, r18	; 0x06
        num%=10;
    }

    UART_putchar(com,'0'+num);

}
 4da:	08 95       	ret

000004dc <UART_gotoxy>:


UART_gotoxy(uint8_t com, uint8_t x, uint8_t y){
 4dc:	ff 92       	push	r15
 4de:	0f 93       	push	r16
 4e0:	1f 93       	push	r17
 4e2:	cf 93       	push	r28
 4e4:	df 93       	push	r29
 4e6:	08 2f       	mov	r16, r24
 4e8:	f6 2e       	mov	r15, r22
 4ea:	14 2f       	mov	r17, r20

    UART_puts(com,"\x1B["); //inicio de la secuencia de esapce
 4ec:	6c e2       	ldi	r22, 0x2C	; 44
 4ee:	72 e0       	ldi	r23, 0x02	; 2
 4f0:	0e 94 81 01 	call	0x302	; 0x302 <UART_puts>

    UART_putnum(com,y+1); //convertir a caracter
 4f4:	1f 5f       	subi	r17, 0xFF	; 255
 4f6:	80 2f       	mov	r24, r16
 4f8:	61 2f       	mov	r22, r17
 4fa:	0e 94 2d 02 	call	0x45a	; 0x45a <UART_putnum>
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 4fe:	c0 2f       	mov	r28, r16
 500:	d0 e0       	ldi	r29, 0x00	; 0
 502:	fe 01       	movw	r30, r28
 504:	ee 0f       	add	r30, r30
 506:	ff 1f       	adc	r31, r31
 508:	e1 5d       	subi	r30, 0xD1	; 209
 50a:	fd 4f       	sbci	r31, 0xFD	; 253
 50c:	01 90       	ld	r0, Z+
 50e:	f0 81       	ld	r31, Z
 510:	e0 2d       	mov	r30, r0
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 512:	80 81       	ld	r24, Z
 514:	85 ff       	sbrs	r24, 5
 516:	fd cf       	rjmp	.-6      	; 0x512 <UART_gotoxy+0x36>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 518:	8b e3       	ldi	r24, 0x3B	; 59
 51a:	86 83       	std	Z+6, r24	; 0x06

    UART_puts(com,"\x1B["); //inicio de la secuencia de esapce

    UART_putnum(com,y+1); //convertir a caracter
    UART_putchar(com,';');
    UART_putnum(com,x+1);
 51c:	f3 94       	inc	r15
 51e:	80 2f       	mov	r24, r16
 520:	6f 2d       	mov	r22, r15
 522:	0e 94 2d 02 	call	0x45a	; 0x45a <UART_putnum>
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 526:	cc 0f       	add	r28, r28
 528:	dd 1f       	adc	r29, r29
 52a:	c1 5d       	subi	r28, 0xD1	; 209
 52c:	dd 4f       	sbci	r29, 0xFD	; 253
 52e:	e8 81       	ld	r30, Y
 530:	f9 81       	ldd	r31, Y+1	; 0x01
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 532:	80 81       	ld	r24, Z
 534:	85 ff       	sbrs	r24, 5
 536:	fd cf       	rjmp	.-6      	; 0x532 <UART_gotoxy+0x56>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 538:	88 e4       	ldi	r24, 0x48	; 72
 53a:	86 83       	std	Z+6, r24	; 0x06
    UART_putnum(com,y+1); //convertir a caracter
    UART_putchar(com,';');
    UART_putnum(com,x+1);
    UART_putchar(com,'H'); //final de la secuencia

}
 53c:	df 91       	pop	r29
 53e:	cf 91       	pop	r28
 540:	1f 91       	pop	r17
 542:	0f 91       	pop	r16
 544:	ff 90       	pop	r15
 546:	08 95       	ret

00000548 <UART_setColor>:





UART_setColor(uint8_t com, uint8_t color){
 548:	0f 93       	push	r16
 54a:	1f 93       	push	r17
 54c:	18 2f       	mov	r17, r24
 54e:	06 2f       	mov	r16, r22


    UART_puts(com,"\x1B["); //incio del comando espace
 550:	6c e2       	ldi	r22, 0x2C	; 44
 552:	72 e0       	ldi	r23, 0x02	; 2
 554:	0e 94 81 01 	call	0x302	; 0x302 <UART_puts>
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 558:	a1 2f       	mov	r26, r17
 55a:	b0 e0       	ldi	r27, 0x00	; 0
 55c:	fd 01       	movw	r30, r26
 55e:	ee 0f       	add	r30, r30
 560:	ff 1f       	adc	r31, r31
 562:	e1 5d       	subi	r30, 0xD1	; 209
 564:	fd 4f       	sbci	r31, 0xFD	; 253
 566:	01 90       	ld	r0, Z+
 568:	f0 81       	ld	r31, Z
 56a:	e0 2d       	mov	r30, r0
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 56c:	80 81       	ld	r24, Z
 56e:	85 ff       	sbrs	r24, 5
 570:	fd cf       	rjmp	.-6      	; 0x56c <UART_setColor+0x24>

UART_setColor(uint8_t com, uint8_t color){


    UART_puts(com,"\x1B["); //incio del comando espace
    UART_putchar(com, '0'+(color/10));
 572:	80 2f       	mov	r24, r16
 574:	6a e0       	ldi	r22, 0x0A	; 10
 576:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__udivmodqi4>
 57a:	80 5d       	subi	r24, 0xD0	; 208

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 57c:	86 83       	std	Z+6, r24	; 0x06
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 57e:	fd 01       	movw	r30, r26
 580:	ee 0f       	add	r30, r30
 582:	ff 1f       	adc	r31, r31
 584:	e1 5d       	subi	r30, 0xD1	; 209
 586:	fd 4f       	sbci	r31, 0xFD	; 253
 588:	01 90       	ld	r0, Z+
 58a:	f0 81       	ld	r31, Z
 58c:	e0 2d       	mov	r30, r0
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 58e:	80 81       	ld	r24, Z
 590:	85 ff       	sbrs	r24, 5
 592:	fd cf       	rjmp	.-6      	; 0x58e <UART_setColor+0x46>
UART_setColor(uint8_t com, uint8_t color){


    UART_puts(com,"\x1B["); //incio del comando espace
    UART_putchar(com, '0'+(color/10));
    UART_putchar(com,'0'+(color%10));
 594:	80 2f       	mov	r24, r16
 596:	6a e0       	ldi	r22, 0x0A	; 10
 598:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__udivmodqi4>
 59c:	90 5d       	subi	r25, 0xD0	; 208

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 59e:	96 83       	std	Z+6, r25	; 0x06
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 5a0:	aa 0f       	add	r26, r26
 5a2:	bb 1f       	adc	r27, r27
 5a4:	a1 5d       	subi	r26, 0xD1	; 209
 5a6:	bd 4f       	sbci	r27, 0xFD	; 253
 5a8:	ed 91       	ld	r30, X+
 5aa:	fc 91       	ld	r31, X
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 5ac:	80 81       	ld	r24, Z
 5ae:	85 ff       	sbrs	r24, 5
 5b0:	fd cf       	rjmp	.-6      	; 0x5ac <UART_setColor+0x64>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 5b2:	8d e6       	ldi	r24, 0x6D	; 109
 5b4:	86 83       	std	Z+6, r24	; 0x06

    UART_puts(com,"\x1B["); //incio del comando espace
    UART_putchar(com, '0'+(color/10));
    UART_putchar(com,'0'+(color%10));
    UART_putchar(com,'m'); //final del comando
 }
 5b6:	1f 91       	pop	r17
 5b8:	0f 91       	pop	r16
 5ba:	08 95       	ret

000005bc <atoi>:





uint16_t atoi(char *str){
 5bc:	ef 92       	push	r14
 5be:	ff 92       	push	r15
 5c0:	0f 93       	push	r16
 5c2:	1f 93       	push	r17
 5c4:	df 93       	push	r29
 5c6:	cf 93       	push	r28
 5c8:	cd b7       	in	r28, 0x3d	; 61
 5ca:	de b7       	in	r29, 0x3e	; 62
 5cc:	58 2f       	mov	r21, r24
 5ce:	79 2f       	mov	r23, r25
        exp*=10;

    }

    return acum; //retornarme el acumulador
}
 5d0:	ed b6       	in	r14, 0x3d	; 61
 5d2:	fe b6       	in	r15, 0x3e	; 62





uint16_t atoi(char *str){
 5d4:	9c 01       	movw	r18, r24
 5d6:	f9 01       	movw	r30, r18
 5d8:	01 c0       	rjmp	.+2      	; 0x5dc <atoi+0x20>
    uint8_t cantidad=0;

    while(*aux!='\0'){

        cantidad++;
        *aux++;
 5da:	31 96       	adiw	r30, 0x01	; 1
 5dc:	6e 2f       	mov	r22, r30
 5de:	65 1b       	sub	r22, r21



    uint8_t cantidad=0;

    while(*aux!='\0'){
 5e0:	80 81       	ld	r24, Z
 5e2:	88 23       	and	r24, r24
 5e4:	d1 f7       	brne	.-12     	; 0x5da <atoi+0x1e>
        *aux++;
    }

    aux=str;

    uint8_t items[cantidad]; //arreglo reservado
 5e6:	8d b7       	in	r24, 0x3d	; 61
 5e8:	9e b7       	in	r25, 0x3e	; 62
 5ea:	86 1b       	sub	r24, r22
 5ec:	91 09       	sbc	r25, r1
 5ee:	0f b6       	in	r0, 0x3f	; 63
 5f0:	f8 94       	cli
 5f2:	9e bf       	out	0x3e, r25	; 62
 5f4:	0f be       	out	0x3f, r0	; 63
 5f6:	8d bf       	out	0x3d, r24	; 61
 5f8:	0d b7       	in	r16, 0x3d	; 61
 5fa:	1e b7       	in	r17, 0x3e	; 62
 5fc:	0f 5f       	subi	r16, 0xFF	; 255
 5fe:	1f 4f       	sbci	r17, 0xFF	; 255
    //recorrera cad caraacter a mi parecer desde el inicio hasta el final por lo que debemos de hacer
    //como una pila ingresar desde la ultima ubicacion,

    uint8_t num; // guardada el numero actual y este al ser multiplicado por el exponente sera agregado al la pia

    uint8_t idx= cantidad-1; //me indica en que pisicion del arreglo va
 600:	46 2f       	mov	r20, r22
 602:	41 50       	subi	r20, 0x01	; 1
 604:	85 2f       	mov	r24, r21
 606:	97 2f       	mov	r25, r23
 608:	9c 01       	movw	r18, r24
 60a:	d9 01       	movw	r26, r18
 60c:	07 c0       	rjmp	.+14     	; 0x61c <atoi+0x60>
    //aseguramos doble
    while(*aux !='\0' && idx >=0){

        //num= *aux - 48;

        items[idx]= *aux - '0'; // en la posicion idx ya items
 60e:	f8 01       	movw	r30, r16
 610:	e4 0f       	add	r30, r20
 612:	f1 1d       	adc	r31, r1
 614:	80 53       	subi	r24, 0x30	; 48
 616:	80 83       	st	Z, r24
        //exp*=10;
        //ya se agrego recoremos nustro arreglo
        idx--;
 618:	41 50       	subi	r20, 0x01	; 1
        *aux++;
 61a:	11 96       	adiw	r26, 0x01	; 1
    uint8_t num; // guardada el numero actual y este al ser multiplicado por el exponente sera agregado al la pia

    uint8_t idx= cantidad-1; //me indica en que pisicion del arreglo va

    //aseguramos doble
    while(*aux !='\0' && idx >=0){
 61c:	8c 91       	ld	r24, X
 61e:	88 23       	and	r24, r24
 620:	b1 f7       	brne	.-20     	; 0x60e <atoi+0x52>
 622:	21 e0       	ldi	r18, 0x01	; 1
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	50 e0       	ldi	r21, 0x00	; 0
 628:	40 e0       	ldi	r20, 0x00	; 0
 62a:	13 c0       	rjmp	.+38     	; 0x652 <atoi+0x96>
        exp*=10; //lo elevamos a la 10 en cada iteracion, pero este tendra un limite claro, cunado ya no cabe en 16 bits
        //con al esperanza de que no sean numereos mas grandes de 4 digitos

        acum += actual;*/

        acum += items[i] *exp;
 62c:	f8 01       	movw	r30, r16
 62e:	e4 0f       	add	r30, r20
 630:	f1 1d       	adc	r31, r1
 632:	80 81       	ld	r24, Z
 634:	82 9f       	mul	r24, r18
 636:	80 2d       	mov	r24, r0
 638:	11 24       	eor	r1, r1
 63a:	58 0f       	add	r21, r24
        exp*=10;
 63c:	c9 01       	movw	r24, r18
 63e:	88 0f       	add	r24, r24
 640:	99 1f       	adc	r25, r25
 642:	73 e0       	ldi	r23, 0x03	; 3
 644:	22 0f       	add	r18, r18
 646:	33 1f       	adc	r19, r19
 648:	7a 95       	dec	r23
 64a:	e1 f7       	brne	.-8      	; 0x644 <atoi+0x88>
 64c:	28 0f       	add	r18, r24
 64e:	39 1f       	adc	r19, r25


    uint16_t exp=1; //el esponente es para poder sumar al final y este represente decimales, decenas, centenas, millaes, etc.
    uint8_t acum = 0;
    //uint8_t actual;
    for(uint8_t i=0; i< cantidad; i++){
 650:	4f 5f       	subi	r20, 0xFF	; 255
 652:	46 17       	cp	r20, r22
 654:	58 f3       	brcs	.-42     	; 0x62c <atoi+0x70>
        exp*=10;

    }

    return acum; //retornarme el acumulador
}
 656:	85 2f       	mov	r24, r21
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	0f b6       	in	r0, 0x3f	; 63
 65c:	f8 94       	cli
 65e:	fe be       	out	0x3e, r15	; 62
 660:	0f be       	out	0x3f, r0	; 63
 662:	ed be       	out	0x3d, r14	; 61
 664:	cf 91       	pop	r28
 666:	df 91       	pop	r29
 668:	1f 91       	pop	r17
 66a:	0f 91       	pop	r16
 66c:	ff 90       	pop	r15
 66e:	ef 90       	pop	r14
 670:	08 95       	ret

00000672 <itoa>:
}
*/

//vamos a probar solo con HEX

void itoa(uint16_t number, char* str, uint8_t base){
 672:	5f 92       	push	r5
 674:	6f 92       	push	r6
 676:	7f 92       	push	r7
 678:	8f 92       	push	r8
 67a:	9f 92       	push	r9
 67c:	af 92       	push	r10
 67e:	bf 92       	push	r11
 680:	cf 92       	push	r12
 682:	df 92       	push	r13
 684:	ef 92       	push	r14
 686:	ff 92       	push	r15
 688:	0f 93       	push	r16
 68a:	1f 93       	push	r17
 68c:	df 93       	push	r29
 68e:	cf 93       	push	r28
 690:	cd b7       	in	r28, 0x3d	; 61
 692:	de b7       	in	r29, 0x3e	; 62
 694:	60 97       	sbiw	r28, 0x10	; 16
 696:	0f b6       	in	r0, 0x3f	; 63
 698:	f8 94       	cli
 69a:	de bf       	out	0x3e, r29	; 62
 69c:	0f be       	out	0x3f, r0	; 63
 69e:	cd bf       	out	0x3d, r28	; 61
 6a0:	7c 01       	movw	r14, r24
 6a2:	6b 01       	movw	r12, r22
 6a4:	94 2e       	mov	r9, r20
        j++;
    }

    aux[i]='`\0';*/

}
 6a6:	6d b6       	in	r6, 0x3d	; 61
 6a8:	7e b6       	in	r7, 0x3e	; 62
}
*/

//vamos a probar solo con HEX

void itoa(uint16_t number, char* str, uint8_t base){
 6aa:	8d b6       	in	r8, 0x3d	; 61
 6ac:	5e b6       	in	r5, 0x3e	; 62

    //vamos a probar de la otra forma

    //char HEX[]={"0123456789ABCDEF"};

    char HEX[]={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
 6ae:	de 01       	movw	r26, r28
 6b0:	11 96       	adiw	r26, 0x01	; 1
 6b2:	e7 e3       	ldi	r30, 0x37	; 55
 6b4:	f2 e0       	ldi	r31, 0x02	; 2
 6b6:	80 e1       	ldi	r24, 0x10	; 16
 6b8:	01 90       	ld	r0, Z+
 6ba:	0d 92       	st	X+, r0
 6bc:	81 50       	subi	r24, 0x01	; 1
 6be:	e1 f7       	brne	.-8      	; 0x6b8 <itoa+0x46>



    //caso especal cunado el numero es 0

    if(number ==0){
 6c0:	e1 14       	cp	r14, r1
 6c2:	f1 04       	cpc	r15, r1
 6c4:	69 f4       	brne	.+26     	; 0x6e0 <itoa+0x6e>
        aux[0]='0';
 6c6:	80 e3       	ldi	r24, 0x30	; 48
 6c8:	f6 01       	movw	r30, r12
 6ca:	80 83       	st	Z, r24
        aux[1]= '\0';
 6cc:	11 82       	std	Z+1, r1	; 0x01
 6ce:	28 2d       	mov	r18, r8
 6d0:	35 2d       	mov	r19, r5
 6d2:	c9 01       	movw	r24, r18
 6d4:	0f b6       	in	r0, 0x3f	; 63
 6d6:	f8 94       	cli
 6d8:	9e bf       	out	0x3e, r25	; 62
 6da:	0f be       	out	0x3f, r0	; 63
 6dc:	8d bf       	out	0x3d, r24	; 61
 6de:	52 c0       	rjmp	.+164    	; 0x784 <itoa+0x112>
        return ;
 6e0:	c7 01       	movw	r24, r14
 6e2:	40 e0       	ldi	r20, 0x00	; 0
    //quiero que sea del tamanio exacto
    uint8_t _len_hex_=0;
    uint16_t temp= number;
    while(temp>0){

        temp/=base;
 6e4:	69 2d       	mov	r22, r9
 6e6:	70 e0       	ldi	r23, 0x00	; 0
 6e8:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__udivmodhi4>
 6ec:	cb 01       	movw	r24, r22
        _len_hex_++;
 6ee:	4f 5f       	subi	r20, 0xFF	; 255


    //quiero que sea del tamanio exacto
    uint8_t _len_hex_=0;
    uint16_t temp= number;
    while(temp>0){
 6f0:	61 15       	cp	r22, r1
 6f2:	71 05       	cpc	r23, r1
 6f4:	b9 f7       	brne	.-18     	; 0x6e4 <itoa+0x72>
    }



    //almacenar residuos en orden inverso
    char _Idx_Hex_[_len_hex_];
 6f6:	04 2f       	mov	r16, r20
 6f8:	10 e0       	ldi	r17, 0x00	; 0
 6fa:	8d b7       	in	r24, 0x3d	; 61
 6fc:	9e b7       	in	r25, 0x3e	; 62
 6fe:	80 1b       	sub	r24, r16
 700:	91 0b       	sbc	r25, r17
 702:	0f b6       	in	r0, 0x3f	; 63
 704:	f8 94       	cli
 706:	9e bf       	out	0x3e, r25	; 62
 708:	0f be       	out	0x3f, r0	; 63
 70a:	8d bf       	out	0x3d, r24	; 61
 70c:	ad b6       	in	r10, 0x3d	; 61
 70e:	be b6       	in	r11, 0x3e	; 62
 710:	08 94       	sec
 712:	a1 1c       	adc	r10, r1
 714:	b1 1c       	adc	r11, r1
 716:	41 50       	subi	r20, 0x01	; 1
 718:	e4 2f       	mov	r30, r20
 71a:	ff 27       	eor	r31, r31
 71c:	e7 fd       	sbrc	r30, 7
 71e:	f0 95       	com	r31
 720:	4f 5f       	subi	r20, 0xFF	; 255
 722:	ea 0d       	add	r30, r10
 724:	fb 1d       	adc	r31, r11
 726:	97 01       	movw	r18, r14
    int8_t _stack_pointer= _len_hex_-1;

    while(temp > 0){

        uint8_t residuo = temp%base;
        _Idx_Hex_[_stack_pointer]= residuo;
 728:	c9 01       	movw	r24, r18
 72a:	69 2d       	mov	r22, r9
 72c:	70 e0       	ldi	r23, 0x00	; 0
 72e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__udivmodhi4>
 732:	80 83       	st	Z, r24
        _stack_pointer--;
        temp/=base;
 734:	c9 01       	movw	r24, r18
 736:	69 2d       	mov	r22, r9
 738:	70 e0       	ldi	r23, 0x00	; 0
 73a:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__udivmodhi4>
 73e:	9b 01       	movw	r18, r22
 740:	31 97       	sbiw	r30, 0x01	; 1
    //almacenar residuos en orden inverso
    char _Idx_Hex_[_len_hex_];
    temp= number; //recargamos temp
    int8_t _stack_pointer= _len_hex_-1;

    while(temp > 0){
 742:	61 15       	cp	r22, r1
 744:	71 05       	cpc	r23, r1
 746:	81 f7       	brne	.-32     	; 0x728 <itoa+0xb6>
 748:	d6 01       	movw	r26, r12
 74a:	90 e0       	ldi	r25, 0x00	; 0
        temp/=base;
    }

    //convertir residuo a cracteres
     for (uint8_t i = 0; i < _len_hex_; i++) {
        aux[i] = HEX[_Idx_Hex_[i]];
 74c:	9e 01       	movw	r18, r28
 74e:	2f 5f       	subi	r18, 0xFF	; 255
 750:	3f 4f       	sbci	r19, 0xFF	; 255
 752:	0a c0       	rjmp	.+20     	; 0x768 <itoa+0xf6>
 754:	f5 01       	movw	r30, r10
 756:	e9 0f       	add	r30, r25
 758:	f1 1d       	adc	r31, r1
 75a:	80 81       	ld	r24, Z
 75c:	f9 01       	movw	r30, r18
 75e:	e8 0f       	add	r30, r24
 760:	f1 1d       	adc	r31, r1
 762:	80 81       	ld	r24, Z
 764:	8d 93       	st	X+, r24
        _stack_pointer--;
        temp/=base;
    }

    //convertir residuo a cracteres
     for (uint8_t i = 0; i < _len_hex_; i++) {
 766:	9f 5f       	subi	r25, 0xFF	; 255
 768:	94 17       	cp	r25, r20
 76a:	a0 f3       	brcs	.-24     	; 0x754 <itoa+0xe2>
        aux[i] = HEX[_Idx_Hex_[i]];
    }
    aux[_len_hex_] = '\0'; // Terminador correcto
 76c:	0c 0d       	add	r16, r12
 76e:	1d 1d       	adc	r17, r13
 770:	f8 01       	movw	r30, r16
 772:	10 82       	st	Z, r1
 774:	88 2d       	mov	r24, r8
 776:	95 2d       	mov	r25, r5
 778:	9c 01       	movw	r18, r24
 77a:	0f b6       	in	r0, 0x3f	; 63
 77c:	f8 94       	cli
 77e:	3e bf       	out	0x3e, r19	; 62
 780:	0f be       	out	0x3f, r0	; 63
 782:	2d bf       	out	0x3d, r18	; 61
        j++;
    }

    aux[i]='`\0';*/

}
 784:	0f b6       	in	r0, 0x3f	; 63
 786:	f8 94       	cli
 788:	7e be       	out	0x3e, r7	; 62
 78a:	0f be       	out	0x3f, r0	; 63
 78c:	6d be       	out	0x3d, r6	; 61
 78e:	60 96       	adiw	r28, 0x10	; 16
 790:	0f b6       	in	r0, 0x3f	; 63
 792:	f8 94       	cli
 794:	de bf       	out	0x3e, r29	; 62
 796:	0f be       	out	0x3f, r0	; 63
 798:	cd bf       	out	0x3d, r28	; 61
 79a:	cf 91       	pop	r28
 79c:	df 91       	pop	r29
 79e:	1f 91       	pop	r17
 7a0:	0f 91       	pop	r16
 7a2:	ff 90       	pop	r15
 7a4:	ef 90       	pop	r14
 7a6:	df 90       	pop	r13
 7a8:	cf 90       	pop	r12
 7aa:	bf 90       	pop	r11
 7ac:	af 90       	pop	r10
 7ae:	9f 90       	pop	r9
 7b0:	8f 90       	pop	r8
 7b2:	7f 90       	pop	r7
 7b4:	6f 90       	pop	r6
 7b6:	5f 90       	pop	r5
 7b8:	08 95       	ret

000007ba <__udivmodqi4>:
 7ba:	99 1b       	sub	r25, r25
 7bc:	79 e0       	ldi	r23, 0x09	; 9
 7be:	04 c0       	rjmp	.+8      	; 0x7c8 <__udivmodqi4_ep>

000007c0 <__udivmodqi4_loop>:
 7c0:	99 1f       	adc	r25, r25
 7c2:	96 17       	cp	r25, r22
 7c4:	08 f0       	brcs	.+2      	; 0x7c8 <__udivmodqi4_ep>
 7c6:	96 1b       	sub	r25, r22

000007c8 <__udivmodqi4_ep>:
 7c8:	88 1f       	adc	r24, r24
 7ca:	7a 95       	dec	r23
 7cc:	c9 f7       	brne	.-14     	; 0x7c0 <__udivmodqi4_loop>
 7ce:	80 95       	com	r24
 7d0:	08 95       	ret

000007d2 <__udivmodhi4>:
 7d2:	aa 1b       	sub	r26, r26
 7d4:	bb 1b       	sub	r27, r27
 7d6:	51 e1       	ldi	r21, 0x11	; 17
 7d8:	07 c0       	rjmp	.+14     	; 0x7e8 <__udivmodhi4_ep>

000007da <__udivmodhi4_loop>:
 7da:	aa 1f       	adc	r26, r26
 7dc:	bb 1f       	adc	r27, r27
 7de:	a6 17       	cp	r26, r22
 7e0:	b7 07       	cpc	r27, r23
 7e2:	10 f0       	brcs	.+4      	; 0x7e8 <__udivmodhi4_ep>
 7e4:	a6 1b       	sub	r26, r22
 7e6:	b7 0b       	sbc	r27, r23

000007e8 <__udivmodhi4_ep>:
 7e8:	88 1f       	adc	r24, r24
 7ea:	99 1f       	adc	r25, r25
 7ec:	5a 95       	dec	r21
 7ee:	a9 f7       	brne	.-22     	; 0x7da <__udivmodhi4_loop>
 7f0:	80 95       	com	r24
 7f2:	90 95       	com	r25
 7f4:	bc 01       	movw	r22, r24
 7f6:	cd 01       	movw	r24, r26
 7f8:	08 95       	ret

000007fa <__udivmodsi4>:
 7fa:	a1 e2       	ldi	r26, 0x21	; 33
 7fc:	1a 2e       	mov	r1, r26
 7fe:	aa 1b       	sub	r26, r26
 800:	bb 1b       	sub	r27, r27
 802:	fd 01       	movw	r30, r26
 804:	0d c0       	rjmp	.+26     	; 0x820 <__udivmodsi4_ep>

00000806 <__udivmodsi4_loop>:
 806:	aa 1f       	adc	r26, r26
 808:	bb 1f       	adc	r27, r27
 80a:	ee 1f       	adc	r30, r30
 80c:	ff 1f       	adc	r31, r31
 80e:	a2 17       	cp	r26, r18
 810:	b3 07       	cpc	r27, r19
 812:	e4 07       	cpc	r30, r20
 814:	f5 07       	cpc	r31, r21
 816:	20 f0       	brcs	.+8      	; 0x820 <__udivmodsi4_ep>
 818:	a2 1b       	sub	r26, r18
 81a:	b3 0b       	sbc	r27, r19
 81c:	e4 0b       	sbc	r30, r20
 81e:	f5 0b       	sbc	r31, r21

00000820 <__udivmodsi4_ep>:
 820:	66 1f       	adc	r22, r22
 822:	77 1f       	adc	r23, r23
 824:	88 1f       	adc	r24, r24
 826:	99 1f       	adc	r25, r25
 828:	1a 94       	dec	r1
 82a:	69 f7       	brne	.-38     	; 0x806 <__udivmodsi4_loop>
 82c:	60 95       	com	r22
 82e:	70 95       	com	r23
 830:	80 95       	com	r24
 832:	90 95       	com	r25
 834:	9b 01       	movw	r18, r22
 836:	ac 01       	movw	r20, r24
 838:	bd 01       	movw	r22, r26
 83a:	cf 01       	movw	r24, r30
 83c:	08 95       	ret

0000083e <_exit>:
 83e:	f8 94       	cli

00000840 <__stop_program>:
 840:	ff cf       	rjmp	.-2      	; 0x840 <__stop_program>
