
practica6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800200  0000052e  000005c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000052e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080023a  0080023a  000005fc  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000bd  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000625  00000000  00000000  000006f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002e6  00000000  00000000  00000d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000412  00000000  00000000  00001004  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00001418  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d7  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000037d  00000000  00000000  0000169f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00001a1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e2       	ldi	r30, 0x2E	; 46
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 33       	cpi	r26, 0x3A	; 58
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	aa e3       	ldi	r26, 0x3A	; 58
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 34       	cpi	r26, 0x40	; 64
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 95 00 	call	0x12a	; 0x12a <main>
 122:	0c 94 95 02 	jmp	0x52a	; 0x52a <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <main>:
#include "UART.h"



int main( void )
{
 12a:	ef 92       	push	r14
 12c:	ff 92       	push	r15
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	df 93       	push	r29
 134:	cf 93       	push	r28
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
 13a:	ac 97       	sbiw	r28, 0x2c	; 44
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	f8 94       	cli
 140:	de bf       	out	0x3e, r29	; 62
 142:	0f be       	out	0x3f, r0	; 63
 144:	cd bf       	out	0x3d, r28	; 61
    char cad[22];
    char cadUart3[22];
    uint16_t num;


    UART_Ini(0,12345,8,1,2); //comunicacion con teraterm
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	49 e3       	ldi	r20, 0x39	; 57
 14a:	50 e3       	ldi	r21, 0x30	; 48
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	28 e0       	ldi	r18, 0x08	; 8
 152:	01 e0       	ldi	r16, 0x01	; 1
 154:	92 e0       	ldi	r25, 0x02	; 2
 156:	e9 2e       	mov	r14, r25
 158:	0e 94 08 01 	call	0x210	; 0x210 <UART_Ini>
    UART_Ini(2,115200,8,0,1);
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	40 e0       	ldi	r20, 0x00	; 0
 160:	52 ec       	ldi	r21, 0xC2	; 194
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	28 e0       	ldi	r18, 0x08	; 8
 168:	00 e0       	ldi	r16, 0x00	; 0
 16a:	ee 24       	eor	r14, r14
 16c:	e3 94       	inc	r14
 16e:	0e 94 08 01 	call	0x210	; 0x210 <UART_Ini>
    UART_Ini(3,115200,8,0,1);
 172:	83 e0       	ldi	r24, 0x03	; 3
 174:	40 e0       	ldi	r20, 0x00	; 0
 176:	52 ec       	ldi	r21, 0xC2	; 194
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	70 e0       	ldi	r23, 0x00	; 0
 17c:	28 e0       	ldi	r18, 0x08	; 8
 17e:	0e 94 08 01 	call	0x210	; 0x210 <UART_Ini>
        //UART_setColor(0,YELLOW);
        UART_puts(0,"Introduce un n?mero:\0"); //terminamos con un caracter nulo, funciona bien puts

        //UART_gotoxy(0,22,2);
        //UART_setColor(0,GREEN);
        UART_gets(0,cad); //vreremos si este funciona correcto
 182:	8e 01       	movw	r16, r28
 184:	0f 5f       	subi	r16, 0xFF	; 255
 186:	1f 4f       	sbci	r17, 0xFF	; 255
// -------------------------------------------
        // Cycle through UART2->UART3
        UART_puts(2,cad);
        UART_puts(2,"\r");
        UART_gets(3,cadUart3);
 188:	87 e1       	ldi	r24, 0x17	; 23
 18a:	e8 2e       	mov	r14, r24
 18c:	f1 2c       	mov	r15, r1
 18e:	ec 0e       	add	r14, r28
 190:	fd 1e       	adc	r15, r29
    UART_Ini(0,12345,8,1,2); //comunicacion con teraterm
    UART_Ini(2,115200,8,0,1);
    UART_Ini(3,115200,8,0,1);
    while(1)
    {
        UART_getchar(0);//getchar funciona OK
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 96 01 	call	0x32c	; 0x32c <UART_getchar>
        UART_clrscr(0);
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 a4 01 	call	0x348	; 0x348 <UART_clrscr>

        //UART_gotoxy(0,2,2);
        //UART_setColor(0,YELLOW);
        UART_puts(0,"Introduce un n?mero:\0"); //terminamos con un caracter nulo, funciona bien puts
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	72 e0       	ldi	r23, 0x02	; 2
 1aa:	0e 94 77 01 	call	0x2ee	; 0x2ee <UART_puts>

        //UART_gotoxy(0,22,2);
        //UART_setColor(0,GREEN);
        UART_gets(0,cad); //vreremos si este funciona correcto
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	b8 01       	movw	r22, r16
 1b4:	0e 94 c8 01 	call	0x390	; 0x390 <UART_gets>
// -------------------------------------------
        // Cycle through UART2->UART3
        UART_puts(2,cad);
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	b8 01       	movw	r22, r16
 1be:	0e 94 77 01 	call	0x2ee	; 0x2ee <UART_puts>
        UART_puts(2,"\r");
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	66 e1       	ldi	r22, 0x16	; 22
 1c8:	72 e0       	ldi	r23, 0x02	; 2
 1ca:	0e 94 77 01 	call	0x2ee	; 0x2ee <UART_puts>
        UART_gets(3,cadUart3);
 1ce:	83 e0       	ldi	r24, 0x03	; 3
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	b7 01       	movw	r22, r14
 1d4:	0e 94 c8 01 	call	0x390	; 0x390 <UART_gets>
        //UART_gotoxy(0,5,3);
        UART_puts(0,cadUart3);
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	b7 01       	movw	r22, r14
 1de:	0e 94 77 01 	call	0x2ee	; 0x2ee <UART_puts>
        //num = atoi(cad);
        //itoa(num,cad,16);

        //UART_gotoxy(0,5,4);
        //UART_setColor(0,BLUE);
        UART_puts(0,"Hex: ");
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	68 e1       	ldi	r22, 0x18	; 24
 1e8:	72 e0       	ldi	r23, 0x02	; 2
 1ea:	0e 94 77 01 	call	0x2ee	; 0x2ee <UART_puts>
        UART_puts(0,cad);
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	b8 01       	movw	r22, r16
 1f4:	0e 94 77 01 	call	0x2ee	; 0x2ee <UART_puts>
        //itoa(num,cad,2);

        //UART_gotoxy(0,5,5);
        UART_puts(0,"Bin: ");
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	6e e1       	ldi	r22, 0x1E	; 30
 1fe:	72 e0       	ldi	r23, 0x02	; 2
 200:	0e 94 77 01 	call	0x2ee	; 0x2ee <UART_puts>
        UART_puts(0,cad);
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	b8 01       	movw	r22, r16
 20a:	0e 94 77 01 	call	0x2ee	; 0x2ee <UART_puts>
 20e:	c1 cf       	rjmp	.-126    	; 0x192 <main+0x68>

00000210 <UART_Ini>:

};



UART_Ini(uint8_t com, uint32_t baudrate, uint8_t size, uint8_t parity, uint8_t stop){
 210:	af 92       	push	r10
 212:	bf 92       	push	r11
 214:	cf 92       	push	r12
 216:	df 92       	push	r13
 218:	ef 92       	push	r14
 21a:	0f 93       	push	r16
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	5a 01       	movw	r10, r20
 222:	6b 01       	movw	r12, r22
 224:	92 2f       	mov	r25, r18
 226:	2e 2d       	mov	r18, r14

    UART_reg_t *myUART = UART_offset[com]; // eligo a mi UART
 228:	e8 2f       	mov	r30, r24
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	ee 0f       	add	r30, r30
 22e:	ff 1f       	adc	r31, r31
 230:	ee 5c       	subi	r30, 0xCE	; 206
 232:	fd 4f       	sbci	r31, 0xFD	; 253
 234:	c0 81       	ld	r28, Z
 236:	d1 81       	ldd	r29, Z+1	; 0x01

    myUART->UCSRB = (1 << TXEN0) | (1 << RXEN0); // Habilita TX y RX para UART0
 238:	88 e1       	ldi	r24, 0x18	; 24
 23a:	89 83       	std	Y+1, r24	; 0x01
    //establecer las paridades
	//uint8_t parity_mode= (parity == 1) ? 2 : 3;  // 2: Paridad par, 3: Paridad impar

    uint8_t parity_mode=0;

    switch(parity){
 23c:	01 30       	cpi	r16, 0x01	; 1
 23e:	21 f0       	breq	.+8      	; 0x248 <UART_Ini+0x38>
 240:	02 30       	cpi	r16, 0x02	; 2
 242:	21 f4       	brne	.+8      	; 0x24c <UART_Ini+0x3c>
 244:	82 e0       	ldi	r24, 0x02	; 2
 246:	03 c0       	rjmp	.+6      	; 0x24e <UART_Ini+0x3e>
 248:	83 e0       	ldi	r24, 0x03	; 3
 24a:	01 c0       	rjmp	.+2      	; 0x24e <UART_Ini+0x3e>
 24c:	80 e0       	ldi	r24, 0x00	; 0
    //me manda sde de 1 o 2 por lo que ocn este ternearo decivo si es 1 sera 1 bit de parada 0
    //pero si es otro valor seran 2 bits de parada

    uint8_t stop_mode= (stop == 1)? 0:1;

    myUART->UCSRC = (parity_mode << UPM00) | (stop_mode <<USBS0);
 24e:	e8 2f       	mov	r30, r24
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	54 e0       	ldi	r21, 0x04	; 4
 254:	ee 0f       	add	r30, r30
 256:	ff 1f       	adc	r31, r31
 258:	5a 95       	dec	r21
 25a:	e1 f7       	brne	.-8      	; 0x254 <UART_Ini+0x44>
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	21 30       	cpi	r18, 0x01	; 1
 262:	11 f0       	breq	.+4      	; 0x268 <UART_Ini+0x58>
 264:	61 e0       	ldi	r22, 0x01	; 1
 266:	70 e0       	ldi	r23, 0x00	; 0
 268:	43 e0       	ldi	r20, 0x03	; 3
 26a:	66 0f       	add	r22, r22
 26c:	77 1f       	adc	r23, r23
 26e:	4a 95       	dec	r20
 270:	e1 f7       	brne	.-8      	; 0x26a <UART_Ini+0x5a>
 272:	8e 2f       	mov	r24, r30
 274:	86 2b       	or	r24, r22
 276:	8a 83       	std	Y+2, r24	; 0x02

		myUART->UCSRC = 3 << UCSZ00;
		myUART->UCSRB = 1<< UCSZ02; //habilitamos los 9 bits
	}*/

	if (size == 9) {
 278:	99 30       	cpi	r25, 0x09	; 9
 27a:	39 f4       	brne	.+14     	; 0x28a <UART_Ini+0x7a>
        myUART->UCSRC |= (3 << UCSZ00); // UCSZ01:UCSZ00 = 0b11
 27c:	8a 81       	ldd	r24, Y+2	; 0x02
 27e:	86 60       	ori	r24, 0x06	; 6
 280:	8a 83       	std	Y+2, r24	; 0x02
        myUART->UCSRB |= (1 << UCSZ02); // Habilitar bit 9
 282:	89 81       	ldd	r24, Y+1	; 0x01
 284:	84 60       	ori	r24, 0x04	; 4
 286:	89 83       	std	Y+1, r24	; 0x01
 288:	08 c0       	rjmp	.+16     	; 0x29a <UART_Ini+0x8a>
    } else
     {
        myUART->UCSRC |= ((size - 5) << UCSZ00); // Ej: 8 bits ? 3 << UCSZ00
 28a:	2a 81       	ldd	r18, Y+2	; 0x02
 28c:	89 2f       	mov	r24, r25
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	05 97       	sbiw	r24, 0x05	; 5
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	28 2b       	or	r18, r24
 298:	2a 83       	std	Y+2, r18	; 0x02
    }

    uint16_t v_UBRR = (FOSC / (16 * baudrate)) - 1 ;
 29a:	84 e0       	ldi	r24, 0x04	; 4
 29c:	aa 0c       	add	r10, r10
 29e:	bb 1c       	adc	r11, r11
 2a0:	cc 1c       	adc	r12, r12
 2a2:	dd 1c       	adc	r13, r13
 2a4:	8a 95       	dec	r24
 2a6:	d1 f7       	brne	.-12     	; 0x29c <UART_Ini+0x8c>
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	74 e2       	ldi	r23, 0x24	; 36
 2ac:	84 ef       	ldi	r24, 0xF4	; 244
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	a6 01       	movw	r20, r12
 2b2:	95 01       	movw	r18, r10
 2b4:	0e 94 40 02 	call	0x480	; 0x480 <__udivmodsi4>
 2b8:	21 50       	subi	r18, 0x01	; 1
 2ba:	30 40       	sbci	r19, 0x00	; 0
    myUART->UBRR = v_UBRR;
 2bc:	3d 83       	std	Y+5, r19	; 0x05
 2be:	2c 83       	std	Y+4, r18	; 0x04
}
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	0f 91       	pop	r16
 2c6:	ef 90       	pop	r14
 2c8:	df 90       	pop	r13
 2ca:	cf 90       	pop	r12
 2cc:	bf 90       	pop	r11
 2ce:	af 90       	pop	r10
 2d0:	08 95       	ret

000002d2 <UART_putchar>:
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 2d2:	e8 2f       	mov	r30, r24
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	ee 0f       	add	r30, r30
 2d8:	ff 1f       	adc	r31, r31
 2da:	ee 5c       	subi	r30, 0xCE	; 206
 2dc:	fd 4f       	sbci	r31, 0xFD	; 253
 2de:	01 90       	ld	r0, Z+
 2e0:	f0 81       	ld	r31, Z
 2e2:	e0 2d       	mov	r30, r0
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 2e4:	80 81       	ld	r24, Z
 2e6:	85 ff       	sbrs	r24, 5
 2e8:	fd cf       	rjmp	.-6      	; 0x2e4 <UART_putchar+0x12>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 2ea:	66 83       	std	Z+6, r22	; 0x06
}
 2ec:	08 95       	ret

000002ee <UART_puts>:
*/


//este haria lo mismo de putchar la unica deiferente es que este estara
//recorriendo la cadena que se quiere imprimir
void UART_puts(uint8_t com, char *str){
 2ee:	1f 93       	push	r17
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	18 2f       	mov	r17, r24
 2f6:	eb 01       	movw	r28, r22
 2f8:	06 c0       	rjmp	.+12     	; 0x306 <UART_puts+0x18>

	//TXn trasmitir el contenido
	while(*str!= '\0'){
		//mientras haya contenido en el apuntador, que sea diferente a NULL
		UART_putchar(com,*str++);
 2fa:	21 96       	adiw	r28, 0x01	; 1
 2fc:	81 2f       	mov	r24, r17
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	70 e0       	ldi	r23, 0x00	; 0
 302:	0e 94 69 01 	call	0x2d2	; 0x2d2 <UART_putchar>
//este haria lo mismo de putchar la unica deiferente es que este estara
//recorriendo la cadena que se quiere imprimir
void UART_puts(uint8_t com, char *str){

	//TXn trasmitir el contenido
	while(*str!= '\0'){
 306:	68 81       	ld	r22, Y
 308:	66 23       	and	r22, r22
 30a:	b9 f7       	brne	.-18     	; 0x2fa <UART_puts+0xc>
		//mientras haya contenido en el apuntador, que sea diferente a NULL
		UART_putchar(com,*str++);
	}
}
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	1f 91       	pop	r17
 312:	08 95       	ret

00000314 <UART_available>:
uint8_t UART_available(uint8_t com){

	//RXC0 sta en 1 cuando hay un dato sin leer en RXC
	//y esta en 0 cunado este no tiene nada

	UART_reg_t *myUART = UART_offset[com];
 314:	e8 2f       	mov	r30, r24
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	ee 0f       	add	r30, r30
 31a:	ff 1f       	adc	r31, r31
 31c:	ee 5c       	subi	r30, 0xCE	; 206
 31e:	fd 4f       	sbci	r31, 0xFD	; 253
 320:	01 90       	ld	r0, Z+
 322:	f0 81       	ld	r31, Z
 324:	e0 2d       	mov	r30, r0

	return (myUART->UCSRA & (1 << RXC0)) ; // Hay dato disponible
 326:	80 81       	ld	r24, Z
	//creo que va a asi pero si hay errores podemos invertirlo
}
 328:	80 78       	andi	r24, 0x80	; 128
 32a:	08 95       	ret

0000032c <UART_getchar>:
	return myUART->UDR;
}*/


char UART_getchar(uint8_t com) {
    UART_reg_t *myUART = UART_offset[com];
 32c:	e8 2f       	mov	r30, r24
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	ee 0f       	add	r30, r30
 332:	ff 1f       	adc	r31, r31
 334:	ee 5c       	subi	r30, 0xCE	; 206
 336:	fd 4f       	sbci	r31, 0xFD	; 253
 338:	01 90       	ld	r0, Z+
 33a:	f0 81       	ld	r31, Z
 33c:	e0 2d       	mov	r30, r0
    while (!(myUART->UCSRA & (1 << RXC0))); // Espera dato
 33e:	80 81       	ld	r24, Z
 340:	87 ff       	sbrs	r24, 7
 342:	fd cf       	rjmp	.-6      	; 0x33e <UART_getchar+0x12>
    return myUART->UDR;
 344:	86 81       	ldd	r24, Z+6	; 0x06
}
 346:	08 95       	ret

00000348 <UART_clrscr>:

}


// Escape sequences
UART_clrscr( uint8_t com ){
 348:	1f 93       	push	r17
 34a:	18 2f       	mov	r17, r24
        que con ESC[2J se borra toda la pantalla

        lo mismo para con posicionar al inicio de la termianl
        sin parametros H se estbalce en la fila1 - columna1
    */
    UART_puts(com,"\x1B[2J"); //borra toda la pantalla
 34c:	64 e2       	ldi	r22, 0x24	; 36
 34e:	72 e0       	ldi	r23, 0x02	; 2
 350:	0e 94 77 01 	call	0x2ee	; 0x2ee <UART_puts>
    UART_puts(com,"\x1B[H"); // poen el curso al incio fila 1, columna 1
 354:	81 2f       	mov	r24, r17
 356:	69 e2       	ldi	r22, 0x29	; 41
 358:	72 e0       	ldi	r23, 0x02	; 2
 35a:	0e 94 77 01 	call	0x2ee	; 0x2ee <UART_puts>


}
 35e:	1f 91       	pop	r17
 360:	08 95       	ret

00000362 <UART_setColor>:
    UART_puts(com, ";");
    UART_puts(com,x+1);
    UART_puts(com,"f");
}
*/
UART_setColor(uint8_t com, uint8_t color){
 362:	1f 93       	push	r17
 364:	18 2f       	mov	r17, r24


    UART_puts(com,"\x1B["); //incio del comando espace
 366:	6d e2       	ldi	r22, 0x2D	; 45
 368:	72 e0       	ldi	r23, 0x02	; 2
 36a:	0e 94 77 01 	call	0x2ee	; 0x2ee <UART_puts>
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 36e:	e1 2f       	mov	r30, r17
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	ee 0f       	add	r30, r30
 374:	ff 1f       	adc	r31, r31
 376:	ee 5c       	subi	r30, 0xCE	; 206
 378:	fd 4f       	sbci	r31, 0xFD	; 253
 37a:	01 90       	ld	r0, Z+
 37c:	f0 81       	ld	r31, Z
 37e:	e0 2d       	mov	r30, r0
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 380:	80 81       	ld	r24, Z
 382:	85 ff       	sbrs	r24, 5
 384:	fd cf       	rjmp	.-6      	; 0x380 <UART_setColor+0x1e>
UART_setColor(uint8_t com, uint8_t color){


    UART_puts(com,"\x1B["); //incio del comando espace

    UART_putchar(com,"m"); //final del comando
 386:	80 e3       	ldi	r24, 0x30	; 48
 388:	92 e0       	ldi	r25, 0x02	; 2

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 38a:	86 83       	std	Z+6, r24	; 0x06

    UART_puts(com,"\x1B["); //incio del comando espace

    UART_putchar(com,"m"); //final del comando

 }
 38c:	1f 91       	pop	r17
 38e:	08 95       	ret

00000390 <UART_gets>:
    while (!(myUART->UCSRA & (1 << RXC0))); // Espera dato
    return myUART->UDR;
}


void UART_gets(uint8_t com, char *str){
 390:	bf 92       	push	r11
 392:	cf 92       	push	r12
 394:	df 92       	push	r13
 396:	ef 92       	push	r14
 398:	ff 92       	push	r15
 39a:	0f 93       	push	r16
 39c:	1f 93       	push	r17
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	6b 01       	movw	r12, r22
 3a4:	ff 24       	eor	r15, r15
	return myUART->UDR;
}*/


char UART_getchar(uint8_t com) {
    UART_reg_t *myUART = UART_offset[com];
 3a6:	c8 2f       	mov	r28, r24
 3a8:	d0 e0       	ldi	r29, 0x00	; 0
 3aa:	8e 01       	movw	r16, r28
 3ac:	00 0f       	add	r16, r16
 3ae:	11 1f       	adc	r17, r17
 3b0:	0e 5c       	subi	r16, 0xCE	; 206
 3b2:	1d 4f       	sbci	r17, 0xFD	; 253

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 3b4:	28 e0       	ldi	r18, 0x08	; 8
 3b6:	e2 2e       	mov	r14, r18
	return myUART->UDR;
}*/


char UART_getchar(uint8_t com) {
    UART_reg_t *myUART = UART_offset[com];
 3b8:	90 e2       	ldi	r25, 0x20	; 32
 3ba:	b9 2e       	mov	r11, r25
 3bc:	d8 01       	movw	r26, r16
 3be:	ed 91       	ld	r30, X+
 3c0:	fc 91       	ld	r31, X
    while (!(myUART->UCSRA & (1 << RXC0))); // Espera dato
 3c2:	80 81       	ld	r24, Z
 3c4:	87 ff       	sbrs	r24, 7
 3c6:	fd cf       	rjmp	.-6      	; 0x3c2 <UART_gets+0x32>
    return myUART->UDR;
 3c8:	66 81       	ldd	r22, Z+6	; 0x06

		-cuando se limpia la pantalla

		*/
		//verificamos si se quiere borrar que en efecto haya algo que borrar
		if(c=='\b'){
 3ca:	68 30       	cpi	r22, 0x08	; 8
 3cc:	e9 f4       	brne	.+58     	; 0x408 <UART_gets+0x78>
			if(i>0){
 3ce:	ff 20       	and	r15, r15
 3d0:	a9 f3       	breq	.-22     	; 0x3bc <UART_gets+0x2c>

				str[--i] = '\0'; //sustitumos el utlimo caracter con el nulo
 3d2:	fa 94       	dec	r15
 3d4:	f6 01       	movw	r30, r12
 3d6:	ef 0d       	add	r30, r15
 3d8:	f1 1d       	adc	r31, r1
 3da:	10 82       	st	Z, r1
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 3dc:	d8 01       	movw	r26, r16
 3de:	ed 91       	ld	r30, X+
 3e0:	fc 91       	ld	r31, X
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 3e2:	80 81       	ld	r24, Z
 3e4:	85 ff       	sbrs	r24, 5
 3e6:	fd cf       	rjmp	.-6      	; 0x3e2 <UART_gets+0x52>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 3e8:	e6 82       	std	Z+6, r14	; 0x06
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 3ea:	d8 01       	movw	r26, r16
 3ec:	ed 91       	ld	r30, X+
 3ee:	fc 91       	ld	r31, X
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 3f0:	80 81       	ld	r24, Z
 3f2:	85 ff       	sbrs	r24, 5
 3f4:	fd cf       	rjmp	.-6      	; 0x3f0 <UART_gets+0x60>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 3f6:	b6 82       	std	Z+6, r11	; 0x06
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 3f8:	d8 01       	movw	r26, r16
 3fa:	ed 91       	ld	r30, X+
 3fc:	fc 91       	ld	r31, X
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 3fe:	80 81       	ld	r24, Z
 400:	85 ff       	sbrs	r24, 5
 402:	fd cf       	rjmp	.-6      	; 0x3fe <UART_gets+0x6e>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 404:	e6 82       	std	Z+6, r14	; 0x06
 406:	da cf       	rjmp	.-76     	; 0x3bc <UART_gets+0x2c>
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 408:	80 81       	ld	r24, Z
 40a:	85 ff       	sbrs	r24, 5
 40c:	fd cf       	rjmp	.-6      	; 0x408 <UART_gets+0x78>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 40e:	66 83       	std	Z+6, r22	; 0x06

			continue; // si no hay nada que borrar o si hay algoq ue borrar sigue con el ciclo
		}

		UART_putchar(com,c);
		if(c == '\r' || c== '\n'){
 410:	6d 30       	cpi	r22, 0x0D	; 13
 412:	11 f0       	breq	.+4      	; 0x418 <UART_gets+0x88>
 414:	6a 30       	cpi	r22, 0x0A	; 10
 416:	31 f5       	brne	.+76     	; 0x464 <UART_gets+0xd4>
		//retorno de carro o salto de linea lo que quiere decir que se terminao de escribir el
		//texto actual.

			str[i]='\0'; //caracter nulo denotando que la
 418:	cf 0c       	add	r12, r15
 41a:	d1 1c       	adc	r13, r1
 41c:	f6 01       	movw	r30, r12
 41e:	10 82       	st	Z, r1
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 420:	fe 01       	movw	r30, r28
 422:	ee 0f       	add	r30, r30
 424:	ff 1f       	adc	r31, r31
 426:	ee 5c       	subi	r30, 0xCE	; 206
 428:	fd 4f       	sbci	r31, 0xFD	; 253
 42a:	01 90       	ld	r0, Z+
 42c:	f0 81       	ld	r31, Z
 42e:	e0 2d       	mov	r30, r0
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 430:	80 81       	ld	r24, Z
 432:	85 ff       	sbrs	r24, 5
 434:	fd cf       	rjmp	.-6      	; 0x430 <UART_gets+0xa0>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 436:	8d e0       	ldi	r24, 0x0D	; 13
 438:	86 83       	std	Z+6, r24	; 0x06
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 43a:	cc 0f       	add	r28, r28
 43c:	dd 1f       	adc	r29, r29
 43e:	ce 5c       	subi	r28, 0xCE	; 206
 440:	dd 4f       	sbci	r29, 0xFD	; 253
 442:	e8 81       	ld	r30, Y
 444:	f9 81       	ldd	r31, Y+1	; 0x01
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 446:	80 81       	ld	r24, Z
 448:	85 ff       	sbrs	r24, 5
 44a:	fd cf       	rjmp	.-6      	; 0x446 <UART_gets+0xb6>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 44c:	8a e0       	ldi	r24, 0x0A	; 10
 44e:	86 83       	std	Z+6, r24	; 0x06
			putchar(com, c);
		}

	}

}
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	1f 91       	pop	r17
 456:	0f 91       	pop	r16
 458:	ff 90       	pop	r15
 45a:	ef 90       	pop	r14
 45c:	df 90       	pop	r13
 45e:	cf 90       	pop	r12
 460:	bf 90       	pop	r11
 462:	08 95       	ret
			UART_putchar(com,'\r'); //vuelve al inicio de la linea
			UART_putchar(com,'\n'); //salto de linea
			break; //rompesmos el ciclo y a esperar que se vuelva a escribir algo
		}

		if(i<127){
 464:	fe e7       	ldi	r31, 0x7E	; 126
 466:	ff 15       	cp	r31, r15
 468:	08 f4       	brcc	.+2      	; 0x46c <UART_gets+0xdc>
 46a:	a8 cf       	rjmp	.-176    	; 0x3bc <UART_gets+0x2c>

			str[i++]= c;
 46c:	f6 01       	movw	r30, r12
 46e:	ef 0d       	add	r30, r15
 470:	f1 1d       	adc	r31, r1
 472:	60 83       	st	Z, r22
 474:	f3 94       	inc	r15
			putchar(com, c);
 476:	ce 01       	movw	r24, r28
 478:	70 e0       	ldi	r23, 0x00	; 0
 47a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <putchar>
 47e:	9e cf       	rjmp	.-196    	; 0x3bc <UART_gets+0x2c>

00000480 <__udivmodsi4>:
 480:	a1 e2       	ldi	r26, 0x21	; 33
 482:	1a 2e       	mov	r1, r26
 484:	aa 1b       	sub	r26, r26
 486:	bb 1b       	sub	r27, r27
 488:	fd 01       	movw	r30, r26
 48a:	0d c0       	rjmp	.+26     	; 0x4a6 <__udivmodsi4_ep>

0000048c <__udivmodsi4_loop>:
 48c:	aa 1f       	adc	r26, r26
 48e:	bb 1f       	adc	r27, r27
 490:	ee 1f       	adc	r30, r30
 492:	ff 1f       	adc	r31, r31
 494:	a2 17       	cp	r26, r18
 496:	b3 07       	cpc	r27, r19
 498:	e4 07       	cpc	r30, r20
 49a:	f5 07       	cpc	r31, r21
 49c:	20 f0       	brcs	.+8      	; 0x4a6 <__udivmodsi4_ep>
 49e:	a2 1b       	sub	r26, r18
 4a0:	b3 0b       	sbc	r27, r19
 4a2:	e4 0b       	sbc	r30, r20
 4a4:	f5 0b       	sbc	r31, r21

000004a6 <__udivmodsi4_ep>:
 4a6:	66 1f       	adc	r22, r22
 4a8:	77 1f       	adc	r23, r23
 4aa:	88 1f       	adc	r24, r24
 4ac:	99 1f       	adc	r25, r25
 4ae:	1a 94       	dec	r1
 4b0:	69 f7       	brne	.-38     	; 0x48c <__udivmodsi4_loop>
 4b2:	60 95       	com	r22
 4b4:	70 95       	com	r23
 4b6:	80 95       	com	r24
 4b8:	90 95       	com	r25
 4ba:	9b 01       	movw	r18, r22
 4bc:	ac 01       	movw	r20, r24
 4be:	bd 01       	movw	r22, r26
 4c0:	cf 01       	movw	r24, r30
 4c2:	08 95       	ret

000004c4 <putchar>:
 4c4:	60 91 3c 02 	lds	r22, 0x023C
 4c8:	70 91 3d 02 	lds	r23, 0x023D
 4cc:	0e 94 69 02 	call	0x4d2	; 0x4d2 <fputc>
 4d0:	08 95       	ret

000004d2 <fputc>:
 4d2:	0f 93       	push	r16
 4d4:	1f 93       	push	r17
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	8c 01       	movw	r16, r24
 4dc:	eb 01       	movw	r28, r22
 4de:	8b 81       	ldd	r24, Y+3	; 0x03
 4e0:	81 ff       	sbrs	r24, 1
 4e2:	1b c0       	rjmp	.+54     	; 0x51a <fputc+0x48>
 4e4:	82 ff       	sbrs	r24, 2
 4e6:	0d c0       	rjmp	.+26     	; 0x502 <fputc+0x30>
 4e8:	2e 81       	ldd	r18, Y+6	; 0x06
 4ea:	3f 81       	ldd	r19, Y+7	; 0x07
 4ec:	8c 81       	ldd	r24, Y+4	; 0x04
 4ee:	9d 81       	ldd	r25, Y+5	; 0x05
 4f0:	28 17       	cp	r18, r24
 4f2:	39 07       	cpc	r19, r25
 4f4:	64 f4       	brge	.+24     	; 0x50e <fputc+0x3c>
 4f6:	e8 81       	ld	r30, Y
 4f8:	f9 81       	ldd	r31, Y+1	; 0x01
 4fa:	01 93       	st	Z+, r16
 4fc:	f9 83       	std	Y+1, r31	; 0x01
 4fe:	e8 83       	st	Y, r30
 500:	06 c0       	rjmp	.+12     	; 0x50e <fputc+0x3c>
 502:	e8 85       	ldd	r30, Y+8	; 0x08
 504:	f9 85       	ldd	r31, Y+9	; 0x09
 506:	80 2f       	mov	r24, r16
 508:	19 95       	eicall
 50a:	89 2b       	or	r24, r25
 50c:	31 f4       	brne	.+12     	; 0x51a <fputc+0x48>
 50e:	8e 81       	ldd	r24, Y+6	; 0x06
 510:	9f 81       	ldd	r25, Y+7	; 0x07
 512:	01 96       	adiw	r24, 0x01	; 1
 514:	9f 83       	std	Y+7, r25	; 0x07
 516:	8e 83       	std	Y+6, r24	; 0x06
 518:	02 c0       	rjmp	.+4      	; 0x51e <fputc+0x4c>
 51a:	0f ef       	ldi	r16, 0xFF	; 255
 51c:	1f ef       	ldi	r17, 0xFF	; 255
 51e:	c8 01       	movw	r24, r16
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	1f 91       	pop	r17
 526:	0f 91       	pop	r16
 528:	08 95       	ret

0000052a <_exit>:
 52a:	f8 94       	cli

0000052c <__stop_program>:
 52c:	ff cf       	rjmp	.-2      	; 0x52c <__stop_program>
