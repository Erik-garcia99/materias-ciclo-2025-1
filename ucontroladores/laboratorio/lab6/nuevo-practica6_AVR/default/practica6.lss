
practica6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800200  000006b6  0000074a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800238  00800238  00000782  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000782  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000dd  00000000  00000000  000007c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000839  00000000  00000000  0000089f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002f5  00000000  00000000  000010d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005ab  00000000  00000000  000013cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00001978  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ee  00000000  00000000  00001a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004eb  00000000  00000000  00001c36  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b0  00000000  00000000  00002121  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 eb       	ldi	r30, 0xB6	; 182
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 33       	cpi	r26, 0x38	; 56
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a8 e3       	ldi	r26, 0x38	; 56
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 33       	cpi	r26, 0x3E	; 62
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 95 00 	call	0x12a	; 0x12a <main>
 122:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <main>:
#include "UART.h"



int main( void )
{
 12a:	ef 92       	push	r14
 12c:	ff 92       	push	r15
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	df 93       	push	r29
 134:	cf 93       	push	r28
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
 13a:	a8 97       	sbiw	r28, 0x28	; 40
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	f8 94       	cli
 140:	de bf       	out	0x3e, r29	; 62
 142:	0f be       	out	0x3f, r0	; 63
 144:	cd bf       	out	0x3d, r28	; 61
    char cad[20];
    char cadUart3[20];
    uint16_t num;


    UART_Ini(0,12345,8,1,2); //comunicacion con teraterm
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	49 e3       	ldi	r20, 0x39	; 57
 14a:	50 e3       	ldi	r21, 0x30	; 48
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	28 e0       	ldi	r18, 0x08	; 8
 152:	01 e0       	ldi	r16, 0x01	; 1
 154:	92 e0       	ldi	r25, 0x02	; 2
 156:	e9 2e       	mov	r14, r25
 158:	0e 94 21 01 	call	0x242	; 0x242 <UART_Ini>
    UART_Ini(2,115200,8,0,1);
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	40 e0       	ldi	r20, 0x00	; 0
 160:	52 ec       	ldi	r21, 0xC2	; 194
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	28 e0       	ldi	r18, 0x08	; 8
 168:	00 e0       	ldi	r16, 0x00	; 0
 16a:	ee 24       	eor	r14, r14
 16c:	e3 94       	inc	r14
 16e:	0e 94 21 01 	call	0x242	; 0x242 <UART_Ini>
    UART_Ini(3,115200,8,0,1);
 172:	83 e0       	ldi	r24, 0x03	; 3
 174:	40 e0       	ldi	r20, 0x00	; 0
 176:	52 ec       	ldi	r21, 0xC2	; 194
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	70 e0       	ldi	r23, 0x00	; 0
 17c:	28 e0       	ldi	r18, 0x08	; 8
 17e:	0e 94 21 01 	call	0x242	; 0x242 <UART_Ini>
        UART_setColor(0,YELLOW);
        UART_puts(0,"Introduce un n?mero:"); //terminamos con un caracter nulo, funciona bien puts

        UART_gotoxy(0,22,2);
        UART_setColor(0,GREEN);
        UART_gets(0,cad); //vreremos si este funciona correcto
 182:	8e 01       	movw	r16, r28
 184:	0f 5f       	subi	r16, 0xFF	; 255
 186:	1f 4f       	sbci	r17, 0xFF	; 255
// -------------------------------------------
        // Cycle through UART2->UART3
        UART_puts(2,cad);
        UART_puts(2,"\r");
        UART_gets(3,cadUart3);
 188:	85 e1       	ldi	r24, 0x15	; 21
 18a:	e8 2e       	mov	r14, r24
 18c:	f1 2c       	mov	r15, r1
 18e:	ec 0e       	add	r14, r28
 190:	fd 1e       	adc	r15, r29
    UART_Ini(0,12345,8,1,2); //comunicacion con teraterm
    UART_Ini(2,115200,8,0,1);
    UART_Ini(3,115200,8,0,1);
    while(1)
    {
        UART_getchar(0);//getchar funciona OK
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	0e 94 b4 01 	call	0x368	; 0x368 <UART_getchar>
        UART_clrscr(0);
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	0e 94 c2 01 	call	0x384	; 0x384 <UART_clrscr>

        UART_gotoxy(0,2,2);
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	62 e0       	ldi	r22, 0x02	; 2
 1a2:	42 e0       	ldi	r20, 0x02	; 2
 1a4:	0e 94 10 02 	call	0x420	; 0x420 <UART_gotoxy>
        UART_setColor(0,YELLOW);
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	61 e2       	ldi	r22, 0x21	; 33
 1ac:	0e 94 46 02 	call	0x48c	; 0x48c <UART_setColor>
        UART_puts(0,"Introduce un n?mero:"); //terminamos con un caracter nulo, funciona bien puts
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	60 e0       	ldi	r22, 0x00	; 0
 1b4:	72 e0       	ldi	r23, 0x02	; 2
 1b6:	0e 94 82 01 	call	0x304	; 0x304 <UART_puts>

        UART_gotoxy(0,22,2);
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	66 e1       	ldi	r22, 0x16	; 22
 1be:	42 e0       	ldi	r20, 0x02	; 2
 1c0:	0e 94 10 02 	call	0x420	; 0x420 <UART_gotoxy>
        UART_setColor(0,GREEN);
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	60 e2       	ldi	r22, 0x20	; 32
 1c8:	0e 94 46 02 	call	0x48c	; 0x48c <UART_setColor>
        UART_gets(0,cad); //vreremos si este funciona correcto
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	b8 01       	movw	r22, r16
 1d0:	0e 94 80 02 	call	0x500	; 0x500 <UART_gets>
// -------------------------------------------
        // Cycle through UART2->UART3
        UART_puts(2,cad);
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	b8 01       	movw	r22, r16
 1d8:	0e 94 82 01 	call	0x304	; 0x304 <UART_puts>
        UART_puts(2,"\r");
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	65 e1       	ldi	r22, 0x15	; 21
 1e0:	72 e0       	ldi	r23, 0x02	; 2
 1e2:	0e 94 82 01 	call	0x304	; 0x304 <UART_puts>
        UART_gets(3,cadUart3);
 1e6:	83 e0       	ldi	r24, 0x03	; 3
 1e8:	b7 01       	movw	r22, r14
 1ea:	0e 94 80 02 	call	0x500	; 0x500 <UART_gets>
        UART_gotoxy(0,5,3);
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	65 e0       	ldi	r22, 0x05	; 5
 1f2:	43 e0       	ldi	r20, 0x03	; 3
 1f4:	0e 94 10 02 	call	0x420	; 0x420 <UART_gotoxy>
        UART_puts(0,cadUart3);
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	b7 01       	movw	r22, r14
 1fc:	0e 94 82 01 	call	0x304	; 0x304 <UART_puts>
// -------------------------------------------
        //num = atoi(cad);
        //itoa(num,cad,16);

        UART_gotoxy(0,5,4);
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	65 e0       	ldi	r22, 0x05	; 5
 204:	44 e0       	ldi	r20, 0x04	; 4
 206:	0e 94 10 02 	call	0x420	; 0x420 <UART_gotoxy>
        UART_setColor(0,BLUE);
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	62 e2       	ldi	r22, 0x22	; 34
 20e:	0e 94 46 02 	call	0x48c	; 0x48c <UART_setColor>
        UART_puts(0,"Hex: ");
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	67 e1       	ldi	r22, 0x17	; 23
 216:	72 e0       	ldi	r23, 0x02	; 2
 218:	0e 94 82 01 	call	0x304	; 0x304 <UART_puts>
        UART_puts(0,cad);
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	b8 01       	movw	r22, r16
 220:	0e 94 82 01 	call	0x304	; 0x304 <UART_puts>
        //itoa(num,cad,2);

        UART_gotoxy(0,5,5);
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	65 e0       	ldi	r22, 0x05	; 5
 228:	45 e0       	ldi	r20, 0x05	; 5
 22a:	0e 94 10 02 	call	0x420	; 0x420 <UART_gotoxy>
        UART_puts(0,"Bin: ");
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	6d e1       	ldi	r22, 0x1D	; 29
 232:	72 e0       	ldi	r23, 0x02	; 2
 234:	0e 94 82 01 	call	0x304	; 0x304 <UART_puts>
        UART_puts(0,cad);
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	b8 01       	movw	r22, r16
 23c:	0e 94 82 01 	call	0x304	; 0x304 <UART_puts>
 240:	a8 cf       	rjmp	.-176    	; 0x192 <main+0x68>

00000242 <UART_Ini>:

};



UART_Ini(uint8_t com, uint32_t baudrate, uint8_t size, uint8_t parity, uint8_t stop){
 242:	af 92       	push	r10
 244:	bf 92       	push	r11
 246:	cf 92       	push	r12
 248:	df 92       	push	r13
 24a:	ef 92       	push	r14
 24c:	0f 93       	push	r16
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	5a 01       	movw	r10, r20
 254:	6b 01       	movw	r12, r22
 256:	92 2f       	mov	r25, r18
 258:	2e 2d       	mov	r18, r14

    UART_reg_t *myUART = UART_offset[com]; // eligo a mi UART
 25a:	e8 2f       	mov	r30, r24
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	ee 0f       	add	r30, r30
 260:	ff 1f       	adc	r31, r31
 262:	e1 5d       	subi	r30, 0xD1	; 209
 264:	fd 4f       	sbci	r31, 0xFD	; 253
 266:	c0 81       	ld	r28, Z
 268:	d1 81       	ldd	r29, Z+1	; 0x01

    myUART->UCSRB = (1 << TXEN0) | (1 << RXEN0); // Habilita TX y RX para UART0
 26a:	88 e1       	ldi	r24, 0x18	; 24
 26c:	89 83       	std	Y+1, r24	; 0x01
    //establecer las paridades
	//uint8_t parity_mode= (parity == 1) ? 2 : 3;  // 2: Paridad par, 3: Paridad impar

    uint8_t parity_mode=0;

    switch(parity){
 26e:	01 30       	cpi	r16, 0x01	; 1
 270:	21 f0       	breq	.+8      	; 0x27a <UART_Ini+0x38>
 272:	02 30       	cpi	r16, 0x02	; 2
 274:	21 f4       	brne	.+8      	; 0x27e <UART_Ini+0x3c>
 276:	82 e0       	ldi	r24, 0x02	; 2
 278:	03 c0       	rjmp	.+6      	; 0x280 <UART_Ini+0x3e>
 27a:	83 e0       	ldi	r24, 0x03	; 3
 27c:	01 c0       	rjmp	.+2      	; 0x280 <UART_Ini+0x3e>
 27e:	80 e0       	ldi	r24, 0x00	; 0
    //me manda sde de 1 o 2 por lo que ocn este ternearo decivo si es 1 sera 1 bit de parada 0
    //pero si es otro valor seran 2 bits de parada

    uint8_t stop_mode= (stop == 1)? 0:1;

    myUART->UCSRC = (parity_mode << UPM00) | (stop_mode <<USBS0);
 280:	e8 2f       	mov	r30, r24
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	54 e0       	ldi	r21, 0x04	; 4
 286:	ee 0f       	add	r30, r30
 288:	ff 1f       	adc	r31, r31
 28a:	5a 95       	dec	r21
 28c:	e1 f7       	brne	.-8      	; 0x286 <UART_Ini+0x44>
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	70 e0       	ldi	r23, 0x00	; 0
 292:	21 30       	cpi	r18, 0x01	; 1
 294:	11 f0       	breq	.+4      	; 0x29a <UART_Ini+0x58>
 296:	61 e0       	ldi	r22, 0x01	; 1
 298:	70 e0       	ldi	r23, 0x00	; 0
 29a:	43 e0       	ldi	r20, 0x03	; 3
 29c:	66 0f       	add	r22, r22
 29e:	77 1f       	adc	r23, r23
 2a0:	4a 95       	dec	r20
 2a2:	e1 f7       	brne	.-8      	; 0x29c <UART_Ini+0x5a>
 2a4:	8e 2f       	mov	r24, r30
 2a6:	86 2b       	or	r24, r22
 2a8:	8a 83       	std	Y+2, r24	; 0x02

		myUART->UCSRC = 3 << UCSZ00;
		myUART->UCSRB = 1<< UCSZ02; //habilitamos los 9 bits
	}*/

	if (size == 9) {
 2aa:	99 30       	cpi	r25, 0x09	; 9
 2ac:	39 f4       	brne	.+14     	; 0x2bc <UART_Ini+0x7a>
        myUART->UCSRC |= (3 << UCSZ00); // UCSZ01:UCSZ00 = 0b11
 2ae:	8a 81       	ldd	r24, Y+2	; 0x02
 2b0:	86 60       	ori	r24, 0x06	; 6
 2b2:	8a 83       	std	Y+2, r24	; 0x02
        myUART->UCSRB |= (1 << UCSZ02); // Habilitar bit 9
 2b4:	89 81       	ldd	r24, Y+1	; 0x01
 2b6:	84 60       	ori	r24, 0x04	; 4
 2b8:	89 83       	std	Y+1, r24	; 0x01
 2ba:	08 c0       	rjmp	.+16     	; 0x2cc <UART_Ini+0x8a>
    } else
     {
        myUART->UCSRC |= ((size - 5) << UCSZ00); // Ej: 8 bits ? 3 << UCSZ00
 2bc:	2a 81       	ldd	r18, Y+2	; 0x02
 2be:	89 2f       	mov	r24, r25
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	05 97       	sbiw	r24, 0x05	; 5
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	28 2b       	or	r18, r24
 2ca:	2a 83       	std	Y+2, r18	; 0x02
    }

    uint16_t v_UBRR = (FOSC / (16 * baudrate)) - 1 ;
 2cc:	84 e0       	ldi	r24, 0x04	; 4
 2ce:	aa 0c       	add	r10, r10
 2d0:	bb 1c       	adc	r11, r11
 2d2:	cc 1c       	adc	r12, r12
 2d4:	dd 1c       	adc	r13, r13
 2d6:	8a 95       	dec	r24
 2d8:	d1 f7       	brne	.-12     	; 0x2ce <UART_Ini+0x8c>
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	74 e2       	ldi	r23, 0x24	; 36
 2de:	84 ef       	ldi	r24, 0xF4	; 244
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	a6 01       	movw	r20, r12
 2e4:	95 01       	movw	r18, r10
 2e6:	0e 94 04 03 	call	0x608	; 0x608 <__udivmodsi4>
 2ea:	21 50       	subi	r18, 0x01	; 1
 2ec:	30 40       	sbci	r19, 0x00	; 0
    myUART->UBRR = v_UBRR;
 2ee:	3d 83       	std	Y+5, r19	; 0x05
 2f0:	2c 83       	std	Y+4, r18	; 0x04
}
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	0f 91       	pop	r16
 2f8:	ef 90       	pop	r14
 2fa:	df 90       	pop	r13
 2fc:	cf 90       	pop	r12
 2fe:	bf 90       	pop	r11
 300:	af 90       	pop	r10
 302:	08 95       	ret

00000304 <UART_puts>:
*/


//este haria lo mismo de putchar la unica deiferente es que este estara
//recorriendo la cadena que se quiere imprimir
void UART_puts(uint8_t com, char *str){
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
 308:	eb 01       	movw	r28, r22
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 30a:	e8 2f       	mov	r30, r24
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	ee 0f       	add	r30, r30
 310:	ff 1f       	adc	r31, r31
 312:	e1 5d       	subi	r30, 0xD1	; 209
 314:	fd 4f       	sbci	r31, 0xFD	; 253
 316:	08 c0       	rjmp	.+16     	; 0x328 <UART_puts+0x24>
 318:	a0 81       	ld	r26, Z
 31a:	b1 81       	ldd	r27, Z+1	; 0x01
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 31c:	8c 91       	ld	r24, X
 31e:	85 ff       	sbrs	r24, 5
 320:	fd cf       	rjmp	.-6      	; 0x31c <UART_puts+0x18>
void UART_puts(uint8_t com, char *str){

	//TXn trasmitir el contenido
	while(*str!= '\0'){
		//mientras haya contenido en el apuntador, que sea diferente a NULL
		UART_putchar(com,*str++);
 322:	21 96       	adiw	r28, 0x01	; 1

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 324:	16 96       	adiw	r26, 0x06	; 6
 326:	9c 93       	st	X, r25
//este haria lo mismo de putchar la unica deiferente es que este estara
//recorriendo la cadena que se quiere imprimir
void UART_puts(uint8_t com, char *str){

	//TXn trasmitir el contenido
	while(*str!= '\0'){
 328:	98 81       	ld	r25, Y
 32a:	99 23       	and	r25, r25
 32c:	a9 f7       	brne	.-22     	; 0x318 <UART_puts+0x14>
		//mientras haya contenido en el apuntador, que sea diferente a NULL
		UART_putchar(com,*str++);
	}
}
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	08 95       	ret

00000334 <UART_putchar>:
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 334:	e8 2f       	mov	r30, r24
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	ee 0f       	add	r30, r30
 33a:	ff 1f       	adc	r31, r31
 33c:	e1 5d       	subi	r30, 0xD1	; 209
 33e:	fd 4f       	sbci	r31, 0xFD	; 253
 340:	01 90       	ld	r0, Z+
 342:	f0 81       	ld	r31, Z
 344:	e0 2d       	mov	r30, r0
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 346:	80 81       	ld	r24, Z
 348:	85 ff       	sbrs	r24, 5
 34a:	fd cf       	rjmp	.-6      	; 0x346 <UART_putchar+0x12>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 34c:	66 83       	std	Z+6, r22	; 0x06
}
 34e:	08 95       	ret

00000350 <UART_available>:
uint8_t UART_available(uint8_t com){

	//RXC0 sta en 1 cuando hay un dato sin leer en RXC
	//y esta en 0 cunado este no tiene nada

	UART_reg_t *myUART = UART_offset[com];
 350:	e8 2f       	mov	r30, r24
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	ee 0f       	add	r30, r30
 356:	ff 1f       	adc	r31, r31
 358:	e1 5d       	subi	r30, 0xD1	; 209
 35a:	fd 4f       	sbci	r31, 0xFD	; 253
 35c:	01 90       	ld	r0, Z+
 35e:	f0 81       	ld	r31, Z
 360:	e0 2d       	mov	r30, r0

	return (myUART->UCSRA & (1 << RXC0)) ; // Hay dato disponible
 362:	80 81       	ld	r24, Z
	//creo que va a asi pero si hay errores podemos invertirlo
}
 364:	80 78       	andi	r24, 0x80	; 128
 366:	08 95       	ret

00000368 <UART_getchar>:
	return myUART->UDR;
}*/


char UART_getchar(uint8_t com) {
    UART_reg_t *myUART = UART_offset[com];
 368:	e8 2f       	mov	r30, r24
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	ee 0f       	add	r30, r30
 36e:	ff 1f       	adc	r31, r31
 370:	e1 5d       	subi	r30, 0xD1	; 209
 372:	fd 4f       	sbci	r31, 0xFD	; 253
 374:	01 90       	ld	r0, Z+
 376:	f0 81       	ld	r31, Z
 378:	e0 2d       	mov	r30, r0
    while (!(myUART->UCSRA & (1 << RXC0))); // Espera dato
 37a:	80 81       	ld	r24, Z
 37c:	87 ff       	sbrs	r24, 7
 37e:	fd cf       	rjmp	.-6      	; 0x37a <UART_getchar+0x12>
    return myUART->UDR;
 380:	86 81       	ldd	r24, Z+6	; 0x06
}
 382:	08 95       	ret

00000384 <UART_clrscr>:

}


// Escape sequences
UART_clrscr( uint8_t com ){
 384:	1f 93       	push	r17
 386:	18 2f       	mov	r17, r24
        que con ESC[2J se borra toda la pantalla

        lo mismo para con posicionar al inicio de la termianl
        sin parametros H se estbalce en la fila1 - columna1
    */
    UART_puts(com,"\x1B[2J"); //borra toda la pantalla
 388:	63 e2       	ldi	r22, 0x23	; 35
 38a:	72 e0       	ldi	r23, 0x02	; 2
 38c:	0e 94 82 01 	call	0x304	; 0x304 <UART_puts>
    UART_puts(com,"\x1B[H"); // poen el curso al incio fila 1, columna 1
 390:	81 2f       	mov	r24, r17
 392:	68 e2       	ldi	r22, 0x28	; 40
 394:	72 e0       	ldi	r23, 0x02	; 2
 396:	0e 94 82 01 	call	0x304	; 0x304 <UART_puts>


}
 39a:	1f 91       	pop	r17
 39c:	08 95       	ret

0000039e <UART_putnum>:


void UART_putnum(uint8_t com, uint8_t num){
 39e:	38 2f       	mov	r19, r24
 3a0:	26 2f       	mov	r18, r22

    if(num >= 100){
 3a2:	64 36       	cpi	r22, 0x64	; 100
 3a4:	b0 f0       	brcs	.+44     	; 0x3d2 <UART_putnum+0x34>
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 3a6:	e8 2f       	mov	r30, r24
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	ee 0f       	add	r30, r30
 3ac:	ff 1f       	adc	r31, r31
 3ae:	e1 5d       	subi	r30, 0xD1	; 209
 3b0:	fd 4f       	sbci	r31, 0xFD	; 253
 3b2:	01 90       	ld	r0, Z+
 3b4:	f0 81       	ld	r31, Z
 3b6:	e0 2d       	mov	r30, r0
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 3b8:	80 81       	ld	r24, Z
 3ba:	85 ff       	sbrs	r24, 5
 3bc:	fd cf       	rjmp	.-6      	; 0x3b8 <UART_putnum+0x1a>


void UART_putnum(uint8_t com, uint8_t num){

    if(num >= 100){
        UART_putchar(com, '0'+(num/100));
 3be:	82 2f       	mov	r24, r18
 3c0:	64 e6       	ldi	r22, 0x64	; 100
 3c2:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__udivmodqi4>
 3c6:	80 5d       	subi	r24, 0xD0	; 208

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 3c8:	86 83       	std	Z+6, r24	; 0x06

void UART_putnum(uint8_t com, uint8_t num){

    if(num >= 100){
        UART_putchar(com, '0'+(num/100));
        num%=100;
 3ca:	82 2f       	mov	r24, r18
 3cc:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__udivmodqi4>
 3d0:	29 2f       	mov	r18, r25
    }
    if(num>=10){
 3d2:	2a 30       	cpi	r18, 0x0A	; 10
 3d4:	b0 f0       	brcs	.+44     	; 0x402 <UART_putnum+0x64>
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 3d6:	e3 2f       	mov	r30, r19
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	ee 0f       	add	r30, r30
 3dc:	ff 1f       	adc	r31, r31
 3de:	e1 5d       	subi	r30, 0xD1	; 209
 3e0:	fd 4f       	sbci	r31, 0xFD	; 253
 3e2:	01 90       	ld	r0, Z+
 3e4:	f0 81       	ld	r31, Z
 3e6:	e0 2d       	mov	r30, r0
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 3e8:	80 81       	ld	r24, Z
 3ea:	85 ff       	sbrs	r24, 5
 3ec:	fd cf       	rjmp	.-6      	; 0x3e8 <UART_putnum+0x4a>
    if(num >= 100){
        UART_putchar(com, '0'+(num/100));
        num%=100;
    }
    if(num>=10){
        UART_putchar(com, '0'+(num/10));
 3ee:	82 2f       	mov	r24, r18
 3f0:	6a e0       	ldi	r22, 0x0A	; 10
 3f2:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__udivmodqi4>
 3f6:	80 5d       	subi	r24, 0xD0	; 208

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 3f8:	86 83       	std	Z+6, r24	; 0x06
        UART_putchar(com, '0'+(num/100));
        num%=100;
    }
    if(num>=10){
        UART_putchar(com, '0'+(num/10));
        num%=10;
 3fa:	82 2f       	mov	r24, r18
 3fc:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__udivmodqi4>
 400:	29 2f       	mov	r18, r25
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 402:	e3 2f       	mov	r30, r19
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	ee 0f       	add	r30, r30
 408:	ff 1f       	adc	r31, r31
 40a:	e1 5d       	subi	r30, 0xD1	; 209
 40c:	fd 4f       	sbci	r31, 0xFD	; 253
 40e:	01 90       	ld	r0, Z+
 410:	f0 81       	ld	r31, Z
 412:	e0 2d       	mov	r30, r0
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 414:	80 81       	ld	r24, Z
 416:	85 ff       	sbrs	r24, 5
 418:	fd cf       	rjmp	.-6      	; 0x414 <UART_putnum+0x76>
    if(num>=10){
        UART_putchar(com, '0'+(num/10));
        num%=10;
    }

    UART_putchar(com,'0'+num);
 41a:	20 5d       	subi	r18, 0xD0	; 208

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 41c:	26 83       	std	Z+6, r18	; 0x06
        num%=10;
    }

    UART_putchar(com,'0'+num);

}
 41e:	08 95       	ret

00000420 <UART_gotoxy>:


UART_gotoxy(uint8_t com, uint8_t x, uint8_t y){
 420:	ff 92       	push	r15
 422:	0f 93       	push	r16
 424:	1f 93       	push	r17
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
 42a:	08 2f       	mov	r16, r24
 42c:	f6 2e       	mov	r15, r22
 42e:	14 2f       	mov	r17, r20

    UART_puts(com,"\x1B["); //inicio de la secuencia de esapce
 430:	6c e2       	ldi	r22, 0x2C	; 44
 432:	72 e0       	ldi	r23, 0x02	; 2
 434:	0e 94 82 01 	call	0x304	; 0x304 <UART_puts>

    UART_putnum(com,y+1); //convertir a caracter
 438:	1f 5f       	subi	r17, 0xFF	; 255
 43a:	80 2f       	mov	r24, r16
 43c:	61 2f       	mov	r22, r17
 43e:	0e 94 cf 01 	call	0x39e	; 0x39e <UART_putnum>
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 442:	c0 2f       	mov	r28, r16
 444:	d0 e0       	ldi	r29, 0x00	; 0
 446:	fe 01       	movw	r30, r28
 448:	ee 0f       	add	r30, r30
 44a:	ff 1f       	adc	r31, r31
 44c:	e1 5d       	subi	r30, 0xD1	; 209
 44e:	fd 4f       	sbci	r31, 0xFD	; 253
 450:	01 90       	ld	r0, Z+
 452:	f0 81       	ld	r31, Z
 454:	e0 2d       	mov	r30, r0
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 456:	80 81       	ld	r24, Z
 458:	85 ff       	sbrs	r24, 5
 45a:	fd cf       	rjmp	.-6      	; 0x456 <UART_gotoxy+0x36>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 45c:	8b e3       	ldi	r24, 0x3B	; 59
 45e:	86 83       	std	Z+6, r24	; 0x06

    UART_puts(com,"\x1B["); //inicio de la secuencia de esapce

    UART_putnum(com,y+1); //convertir a caracter
    UART_putchar(com,';');
    UART_putnum(com,x+1);
 460:	f3 94       	inc	r15
 462:	80 2f       	mov	r24, r16
 464:	6f 2d       	mov	r22, r15
 466:	0e 94 cf 01 	call	0x39e	; 0x39e <UART_putnum>
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 46a:	cc 0f       	add	r28, r28
 46c:	dd 1f       	adc	r29, r29
 46e:	c1 5d       	subi	r28, 0xD1	; 209
 470:	dd 4f       	sbci	r29, 0xFD	; 253
 472:	e8 81       	ld	r30, Y
 474:	f9 81       	ldd	r31, Y+1	; 0x01
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 476:	80 81       	ld	r24, Z
 478:	85 ff       	sbrs	r24, 5
 47a:	fd cf       	rjmp	.-6      	; 0x476 <UART_gotoxy+0x56>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 47c:	88 e4       	ldi	r24, 0x48	; 72
 47e:	86 83       	std	Z+6, r24	; 0x06
    UART_putnum(com,y+1); //convertir a caracter
    UART_putchar(com,';');
    UART_putnum(com,x+1);
    UART_putchar(com,'H'); //final de la secuencia

}
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	1f 91       	pop	r17
 486:	0f 91       	pop	r16
 488:	ff 90       	pop	r15
 48a:	08 95       	ret

0000048c <UART_setColor>:





UART_setColor(uint8_t com, uint8_t color){
 48c:	0f 93       	push	r16
 48e:	1f 93       	push	r17
 490:	18 2f       	mov	r17, r24
 492:	06 2f       	mov	r16, r22


    UART_puts(com,"\x1B["); //incio del comando espace
 494:	6c e2       	ldi	r22, 0x2C	; 44
 496:	72 e0       	ldi	r23, 0x02	; 2
 498:	0e 94 82 01 	call	0x304	; 0x304 <UART_puts>
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 49c:	a1 2f       	mov	r26, r17
 49e:	b0 e0       	ldi	r27, 0x00	; 0
 4a0:	fd 01       	movw	r30, r26
 4a2:	ee 0f       	add	r30, r30
 4a4:	ff 1f       	adc	r31, r31
 4a6:	e1 5d       	subi	r30, 0xD1	; 209
 4a8:	fd 4f       	sbci	r31, 0xFD	; 253
 4aa:	01 90       	ld	r0, Z+
 4ac:	f0 81       	ld	r31, Z
 4ae:	e0 2d       	mov	r30, r0
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 4b0:	80 81       	ld	r24, Z
 4b2:	85 ff       	sbrs	r24, 5
 4b4:	fd cf       	rjmp	.-6      	; 0x4b0 <UART_setColor+0x24>

UART_setColor(uint8_t com, uint8_t color){


    UART_puts(com,"\x1B["); //incio del comando espace
    UART_putchar(com, '0'+(color/10));
 4b6:	80 2f       	mov	r24, r16
 4b8:	6a e0       	ldi	r22, 0x0A	; 10
 4ba:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__udivmodqi4>
 4be:	80 5d       	subi	r24, 0xD0	; 208

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 4c0:	86 83       	std	Z+6, r24	; 0x06
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 4c2:	fd 01       	movw	r30, r26
 4c4:	ee 0f       	add	r30, r30
 4c6:	ff 1f       	adc	r31, r31
 4c8:	e1 5d       	subi	r30, 0xD1	; 209
 4ca:	fd 4f       	sbci	r31, 0xFD	; 253
 4cc:	01 90       	ld	r0, Z+
 4ce:	f0 81       	ld	r31, Z
 4d0:	e0 2d       	mov	r30, r0
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 4d2:	80 81       	ld	r24, Z
 4d4:	85 ff       	sbrs	r24, 5
 4d6:	fd cf       	rjmp	.-6      	; 0x4d2 <UART_setColor+0x46>
UART_setColor(uint8_t com, uint8_t color){


    UART_puts(com,"\x1B["); //incio del comando espace
    UART_putchar(com, '0'+(color/10));
    UART_putchar(com,'0'+(color%10));
 4d8:	80 2f       	mov	r24, r16
 4da:	6a e0       	ldi	r22, 0x0A	; 10
 4dc:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__udivmodqi4>
 4e0:	90 5d       	subi	r25, 0xD0	; 208

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 4e2:	96 83       	std	Z+6, r25	; 0x06
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 4e4:	aa 0f       	add	r26, r26
 4e6:	bb 1f       	adc	r27, r27
 4e8:	a1 5d       	subi	r26, 0xD1	; 209
 4ea:	bd 4f       	sbci	r27, 0xFD	; 253
 4ec:	ed 91       	ld	r30, X+
 4ee:	fc 91       	ld	r31, X
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 4f0:	80 81       	ld	r24, Z
 4f2:	85 ff       	sbrs	r24, 5
 4f4:	fd cf       	rjmp	.-6      	; 0x4f0 <UART_setColor+0x64>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 4f6:	8d e6       	ldi	r24, 0x6D	; 109
 4f8:	86 83       	std	Z+6, r24	; 0x06

    UART_puts(com,"\x1B["); //incio del comando espace
    UART_putchar(com, '0'+(color/10));
    UART_putchar(com,'0'+(color%10));
    UART_putchar(com,'m'); //final del comando
 }
 4fa:	1f 91       	pop	r17
 4fc:	0f 91       	pop	r16
 4fe:	08 95       	ret

00000500 <UART_gets>:
    while (!(myUART->UCSRA & (1 << RXC0))); // Espera dato
    return myUART->UDR;
}


void UART_gets(uint8_t com, char *str){
 500:	bf 92       	push	r11
 502:	cf 92       	push	r12
 504:	df 92       	push	r13
 506:	ef 92       	push	r14
 508:	ff 92       	push	r15
 50a:	0f 93       	push	r16
 50c:	1f 93       	push	r17
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
 512:	6b 01       	movw	r12, r22
 514:	ff 24       	eor	r15, r15
	return myUART->UDR;
}*/


char UART_getchar(uint8_t com) {
    UART_reg_t *myUART = UART_offset[com];
 516:	c8 2f       	mov	r28, r24
 518:	d0 e0       	ldi	r29, 0x00	; 0
 51a:	8e 01       	movw	r16, r28
 51c:	00 0f       	add	r16, r16
 51e:	11 1f       	adc	r17, r17
 520:	01 5d       	subi	r16, 0xD1	; 209
 522:	1d 4f       	sbci	r17, 0xFD	; 253

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 524:	48 e0       	ldi	r20, 0x08	; 8
 526:	e4 2e       	mov	r14, r20
	return myUART->UDR;
}*/


char UART_getchar(uint8_t com) {
    UART_reg_t *myUART = UART_offset[com];
 528:	30 e2       	ldi	r19, 0x20	; 32
 52a:	b3 2e       	mov	r11, r19
 52c:	d8 01       	movw	r26, r16
 52e:	ed 91       	ld	r30, X+
 530:	fc 91       	ld	r31, X
    while (!(myUART->UCSRA & (1 << RXC0))); // Espera dato
 532:	80 81       	ld	r24, Z
 534:	87 ff       	sbrs	r24, 7
 536:	fd cf       	rjmp	.-6      	; 0x532 <UART_gets+0x32>
    return myUART->UDR;
 538:	66 81       	ldd	r22, Z+6	; 0x06

		-cuando se limpia la pantalla

		*/
		//verificamos si se quiere borrar que en efecto haya algo que borrar
		if(c=='\b'){
 53a:	68 30       	cpi	r22, 0x08	; 8
 53c:	e9 f4       	brne	.+58     	; 0x578 <UART_gets+0x78>
			if(i>0){
 53e:	ff 20       	and	r15, r15
 540:	a9 f3       	breq	.-22     	; 0x52c <UART_gets+0x2c>

				str[--i] = '\0'; //sustitumos el utlimo caracter con el nulo
 542:	fa 94       	dec	r15
 544:	f6 01       	movw	r30, r12
 546:	ef 0d       	add	r30, r15
 548:	f1 1d       	adc	r31, r1
 54a:	10 82       	st	Z, r1
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 54c:	d8 01       	movw	r26, r16
 54e:	ed 91       	ld	r30, X+
 550:	fc 91       	ld	r31, X
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 552:	80 81       	ld	r24, Z
 554:	85 ff       	sbrs	r24, 5
 556:	fd cf       	rjmp	.-6      	; 0x552 <UART_gets+0x52>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 558:	e6 82       	std	Z+6, r14	; 0x06
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 55a:	d8 01       	movw	r26, r16
 55c:	ed 91       	ld	r30, X+
 55e:	fc 91       	ld	r31, X
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 560:	80 81       	ld	r24, Z
 562:	85 ff       	sbrs	r24, 5
 564:	fd cf       	rjmp	.-6      	; 0x560 <UART_gets+0x60>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 566:	b6 82       	std	Z+6, r11	; 0x06
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 568:	d8 01       	movw	r26, r16
 56a:	ed 91       	ld	r30, X+
 56c:	fc 91       	ld	r31, X
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 56e:	80 81       	ld	r24, Z
 570:	85 ff       	sbrs	r24, 5
 572:	fd cf       	rjmp	.-6      	; 0x56e <UART_gets+0x6e>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 574:	e6 82       	std	Z+6, r14	; 0x06
 576:	da cf       	rjmp	.-76     	; 0x52c <UART_gets+0x2c>
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 578:	80 81       	ld	r24, Z
 57a:	85 ff       	sbrs	r24, 5
 57c:	fd cf       	rjmp	.-6      	; 0x578 <UART_gets+0x78>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 57e:	66 83       	std	Z+6, r22	; 0x06
			continue; // si no hay nada que borrar o si hay algoq ue borrar sigue con el ciclo
		}

		UART_putchar(com,c);

		if(c == '\r' || c== '\n'){
 580:	6d 30       	cpi	r22, 0x0D	; 13
 582:	11 f0       	breq	.+4      	; 0x588 <UART_gets+0x88>
 584:	6a 30       	cpi	r22, 0x0A	; 10
 586:	31 f5       	brne	.+76     	; 0x5d4 <UART_gets+0xd4>
		//retorno de carro o salto de linea lo que quiere decir que se terminao de escribir el
		//texto actual.

			str[i]='\0'; //caracter nulo denotando que la
 588:	cf 0c       	add	r12, r15
 58a:	d1 1c       	adc	r13, r1
 58c:	f6 01       	movw	r30, r12
 58e:	10 82       	st	Z, r1
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 590:	fe 01       	movw	r30, r28
 592:	ee 0f       	add	r30, r30
 594:	ff 1f       	adc	r31, r31
 596:	e1 5d       	subi	r30, 0xD1	; 209
 598:	fd 4f       	sbci	r31, 0xFD	; 253
 59a:	01 90       	ld	r0, Z+
 59c:	f0 81       	ld	r31, Z
 59e:	e0 2d       	mov	r30, r0
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 5a0:	80 81       	ld	r24, Z
 5a2:	85 ff       	sbrs	r24, 5
 5a4:	fd cf       	rjmp	.-6      	; 0x5a0 <UART_gets+0xa0>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 5a6:	8d e0       	ldi	r24, 0x0D	; 13
 5a8:	86 83       	std	Z+6, r24	; 0x06
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 5aa:	cc 0f       	add	r28, r28
 5ac:	dd 1f       	adc	r29, r29
 5ae:	c1 5d       	subi	r28, 0xD1	; 209
 5b0:	dd 4f       	sbci	r29, 0xFD	; 253
 5b2:	e8 81       	ld	r30, Y
 5b4:	f9 81       	ldd	r31, Y+1	; 0x01
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 5b6:	80 81       	ld	r24, Z
 5b8:	85 ff       	sbrs	r24, 5
 5ba:	fd cf       	rjmp	.-6      	; 0x5b6 <UART_gets+0xb6>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 5bc:	8a e0       	ldi	r24, 0x0A	; 10
 5be:	86 83       	std	Z+6, r24	; 0x06
			putchar(com, c);
		}

	}

}
 5c0:	df 91       	pop	r29
 5c2:	cf 91       	pop	r28
 5c4:	1f 91       	pop	r17
 5c6:	0f 91       	pop	r16
 5c8:	ff 90       	pop	r15
 5ca:	ef 90       	pop	r14
 5cc:	df 90       	pop	r13
 5ce:	cf 90       	pop	r12
 5d0:	bf 90       	pop	r11
 5d2:	08 95       	ret
			UART_putchar(com,'\r'); //vuelve al inicio de la linea
			UART_putchar(com,'\n'); //salto de linea
			break; //rompesmos el ciclo y a esperar que se vuelva a escribir algo
		}

		if(i<127){
 5d4:	fe e7       	ldi	r31, 0x7E	; 126
 5d6:	ff 15       	cp	r31, r15
 5d8:	08 f4       	brcc	.+2      	; 0x5dc <UART_gets+0xdc>
 5da:	a8 cf       	rjmp	.-176    	; 0x52c <UART_gets+0x2c>

			str[i++]= c;
 5dc:	f6 01       	movw	r30, r12
 5de:	ef 0d       	add	r30, r15
 5e0:	f1 1d       	adc	r31, r1
 5e2:	60 83       	st	Z, r22
 5e4:	f3 94       	inc	r15
			putchar(com, c);
 5e6:	ce 01       	movw	r24, r28
 5e8:	70 e0       	ldi	r23, 0x00	; 0
 5ea:	0e 94 26 03 	call	0x64c	; 0x64c <putchar>
 5ee:	9e cf       	rjmp	.-196    	; 0x52c <UART_gets+0x2c>

000005f0 <__udivmodqi4>:
 5f0:	99 1b       	sub	r25, r25
 5f2:	79 e0       	ldi	r23, 0x09	; 9
 5f4:	04 c0       	rjmp	.+8      	; 0x5fe <__udivmodqi4_ep>

000005f6 <__udivmodqi4_loop>:
 5f6:	99 1f       	adc	r25, r25
 5f8:	96 17       	cp	r25, r22
 5fa:	08 f0       	brcs	.+2      	; 0x5fe <__udivmodqi4_ep>
 5fc:	96 1b       	sub	r25, r22

000005fe <__udivmodqi4_ep>:
 5fe:	88 1f       	adc	r24, r24
 600:	7a 95       	dec	r23
 602:	c9 f7       	brne	.-14     	; 0x5f6 <__udivmodqi4_loop>
 604:	80 95       	com	r24
 606:	08 95       	ret

00000608 <__udivmodsi4>:
 608:	a1 e2       	ldi	r26, 0x21	; 33
 60a:	1a 2e       	mov	r1, r26
 60c:	aa 1b       	sub	r26, r26
 60e:	bb 1b       	sub	r27, r27
 610:	fd 01       	movw	r30, r26
 612:	0d c0       	rjmp	.+26     	; 0x62e <__udivmodsi4_ep>

00000614 <__udivmodsi4_loop>:
 614:	aa 1f       	adc	r26, r26
 616:	bb 1f       	adc	r27, r27
 618:	ee 1f       	adc	r30, r30
 61a:	ff 1f       	adc	r31, r31
 61c:	a2 17       	cp	r26, r18
 61e:	b3 07       	cpc	r27, r19
 620:	e4 07       	cpc	r30, r20
 622:	f5 07       	cpc	r31, r21
 624:	20 f0       	brcs	.+8      	; 0x62e <__udivmodsi4_ep>
 626:	a2 1b       	sub	r26, r18
 628:	b3 0b       	sbc	r27, r19
 62a:	e4 0b       	sbc	r30, r20
 62c:	f5 0b       	sbc	r31, r21

0000062e <__udivmodsi4_ep>:
 62e:	66 1f       	adc	r22, r22
 630:	77 1f       	adc	r23, r23
 632:	88 1f       	adc	r24, r24
 634:	99 1f       	adc	r25, r25
 636:	1a 94       	dec	r1
 638:	69 f7       	brne	.-38     	; 0x614 <__udivmodsi4_loop>
 63a:	60 95       	com	r22
 63c:	70 95       	com	r23
 63e:	80 95       	com	r24
 640:	90 95       	com	r25
 642:	9b 01       	movw	r18, r22
 644:	ac 01       	movw	r20, r24
 646:	bd 01       	movw	r22, r26
 648:	cf 01       	movw	r24, r30
 64a:	08 95       	ret

0000064c <putchar>:
 64c:	60 91 3a 02 	lds	r22, 0x023A
 650:	70 91 3b 02 	lds	r23, 0x023B
 654:	0e 94 2d 03 	call	0x65a	; 0x65a <fputc>
 658:	08 95       	ret

0000065a <fputc>:
 65a:	0f 93       	push	r16
 65c:	1f 93       	push	r17
 65e:	cf 93       	push	r28
 660:	df 93       	push	r29
 662:	8c 01       	movw	r16, r24
 664:	eb 01       	movw	r28, r22
 666:	8b 81       	ldd	r24, Y+3	; 0x03
 668:	81 ff       	sbrs	r24, 1
 66a:	1b c0       	rjmp	.+54     	; 0x6a2 <fputc+0x48>
 66c:	82 ff       	sbrs	r24, 2
 66e:	0d c0       	rjmp	.+26     	; 0x68a <fputc+0x30>
 670:	2e 81       	ldd	r18, Y+6	; 0x06
 672:	3f 81       	ldd	r19, Y+7	; 0x07
 674:	8c 81       	ldd	r24, Y+4	; 0x04
 676:	9d 81       	ldd	r25, Y+5	; 0x05
 678:	28 17       	cp	r18, r24
 67a:	39 07       	cpc	r19, r25
 67c:	64 f4       	brge	.+24     	; 0x696 <fputc+0x3c>
 67e:	e8 81       	ld	r30, Y
 680:	f9 81       	ldd	r31, Y+1	; 0x01
 682:	01 93       	st	Z+, r16
 684:	f9 83       	std	Y+1, r31	; 0x01
 686:	e8 83       	st	Y, r30
 688:	06 c0       	rjmp	.+12     	; 0x696 <fputc+0x3c>
 68a:	e8 85       	ldd	r30, Y+8	; 0x08
 68c:	f9 85       	ldd	r31, Y+9	; 0x09
 68e:	80 2f       	mov	r24, r16
 690:	19 95       	eicall
 692:	89 2b       	or	r24, r25
 694:	31 f4       	brne	.+12     	; 0x6a2 <fputc+0x48>
 696:	8e 81       	ldd	r24, Y+6	; 0x06
 698:	9f 81       	ldd	r25, Y+7	; 0x07
 69a:	01 96       	adiw	r24, 0x01	; 1
 69c:	9f 83       	std	Y+7, r25	; 0x07
 69e:	8e 83       	std	Y+6, r24	; 0x06
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <fputc+0x4c>
 6a2:	0f ef       	ldi	r16, 0xFF	; 255
 6a4:	1f ef       	ldi	r17, 0xFF	; 255
 6a6:	c8 01       	movw	r24, r16
 6a8:	df 91       	pop	r29
 6aa:	cf 91       	pop	r28
 6ac:	1f 91       	pop	r17
 6ae:	0f 91       	pop	r16
 6b0:	08 95       	ret

000006b2 <_exit>:
 6b2:	f8 94       	cli

000006b4 <__stop_program>:
 6b4:	ff cf       	rjmp	.-2      	; 0x6b4 <__stop_program>
