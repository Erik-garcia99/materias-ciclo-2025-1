
practica6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800200  0000041a  000004ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000041a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080022c  0080022c  000004da  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  000004da  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000009b  00000000  00000000  0000051a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000445  00000000  00000000  000005b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000025d  00000000  00000000  000009fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c5  00000000  00000000  00000c57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00000f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b7  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000023b  00000000  00000000  00001163  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e1       	ldi	r30, 0x1A	; 26
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 32       	cpi	r26, 0x2C	; 44
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	ac e2       	ldi	r26, 0x2C	; 44
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 33       	cpi	r26, 0x32	; 50
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 95 00 	call	0x12a	; 0x12a <main>
 122:	0c 94 0b 02 	jmp	0x416	; 0x416 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <main>:
#include "UART.h"



int main( void )
{
 12a:	ef 92       	push	r14
 12c:	ff 92       	push	r15
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	df 93       	push	r29
 134:	cf 93       	push	r28
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
 13a:	a8 97       	sbiw	r28, 0x28	; 40
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	f8 94       	cli
 140:	de bf       	out	0x3e, r29	; 62
 142:	0f be       	out	0x3f, r0	; 63
 144:	cd bf       	out	0x3d, r28	; 61
    char cad[20];
    char cadUart3[20];
    uint16_t num;


    UART_Ini(0,12345,8,1,2); //8 bits de frame,paaridad impar, 2 stop bits 
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	49 e3       	ldi	r20, 0x39	; 57
 14a:	50 e3       	ldi	r21, 0x30	; 48
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	28 e0       	ldi	r18, 0x08	; 8
 152:	01 e0       	ldi	r16, 0x01	; 1
 154:	92 e0       	ldi	r25, 0x02	; 2
 156:	e9 2e       	mov	r14, r25
 158:	0e 94 04 01 	call	0x208	; 0x208 <UART_Ini>
    UART_Ini(2,115200,8,0,1);
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	40 e0       	ldi	r20, 0x00	; 0
 160:	52 ec       	ldi	r21, 0xC2	; 194
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	28 e0       	ldi	r18, 0x08	; 8
 168:	00 e0       	ldi	r16, 0x00	; 0
 16a:	ee 24       	eor	r14, r14
 16c:	e3 94       	inc	r14
 16e:	0e 94 04 01 	call	0x208	; 0x208 <UART_Ini>
    UART_Ini(3,115200,8,0,1);
 172:	83 e0       	ldi	r24, 0x03	; 3
 174:	40 e0       	ldi	r20, 0x00	; 0
 176:	52 ec       	ldi	r21, 0xC2	; 194
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	70 e0       	ldi	r23, 0x00	; 0
 17c:	28 e0       	ldi	r18, 0x08	; 8
 17e:	0e 94 04 01 	call	0x208	; 0x208 <UART_Ini>
        //UART_setColor(0,YELLOW);
        UART_puts(0,"Introduce un n?mero:\0"); //terminamos con un caracter nulo

        //UART_gotoxy(0,22,2);
        //UART_setColor(0,GREEN);
        UART_gets(0,cad);
 182:	8e 01       	movw	r16, r28
 184:	0f 5f       	subi	r16, 0xFF	; 255
 186:	1f 4f       	sbci	r17, 0xFF	; 255
// -------------------------------------------
        // Cycle through UART2->UART3
        UART_puts(2,cad);
        UART_puts(2,"\r");
        UART_gets(3,cadUart3);
 188:	85 e1       	ldi	r24, 0x15	; 21
 18a:	e8 2e       	mov	r14, r24
 18c:	f1 2c       	mov	r15, r1
 18e:	ec 0e       	add	r14, r28
 190:	fd 1e       	adc	r15, r29
    UART_Ini(0,12345,8,1,2); //8 bits de frame,paaridad impar, 2 stop bits 
    UART_Ini(2,115200,8,0,1);
    UART_Ini(3,115200,8,0,1);
    while(1)
    {
        UART_getchar(0);
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 93 01 	call	0x326	; 0x326 <UART_getchar>
        //UART_clrscr(0);

        //UART_gotoxy(0,2,2);
        //UART_setColor(0,YELLOW);
        UART_puts(0,"Introduce un n?mero:\0"); //terminamos con un caracter nulo
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	72 e0       	ldi	r23, 0x02	; 2
 1a2:	0e 94 74 01 	call	0x2e8	; 0x2e8 <UART_puts>

        //UART_gotoxy(0,22,2);
        //UART_setColor(0,GREEN);
        UART_gets(0,cad);
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	b8 01       	movw	r22, r16
 1ac:	0e 94 a1 01 	call	0x342	; 0x342 <UART_gets>
// -------------------------------------------
        // Cycle through UART2->UART3
        UART_puts(2,cad);
 1b0:	82 e0       	ldi	r24, 0x02	; 2
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	b8 01       	movw	r22, r16
 1b6:	0e 94 74 01 	call	0x2e8	; 0x2e8 <UART_puts>
        UART_puts(2,"\r");
 1ba:	82 e0       	ldi	r24, 0x02	; 2
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	66 e1       	ldi	r22, 0x16	; 22
 1c0:	72 e0       	ldi	r23, 0x02	; 2
 1c2:	0e 94 74 01 	call	0x2e8	; 0x2e8 <UART_puts>
        UART_gets(3,cadUart3);
 1c6:	83 e0       	ldi	r24, 0x03	; 3
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	b7 01       	movw	r22, r14
 1cc:	0e 94 a1 01 	call	0x342	; 0x342 <UART_gets>
       // UART_gotoxy(0,5,3);
        UART_puts(0,cadUart3);
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	b7 01       	movw	r22, r14
 1d6:	0e 94 74 01 	call	0x2e8	; 0x2e8 <UART_puts>
        //num = atoi(cad);
        //itoa(num,cad,16);

        //UART_gotoxy(0,5,4);
        //UART_setColor(0,BLUE);
        UART_puts(0,"Hex: ");
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	68 e1       	ldi	r22, 0x18	; 24
 1e0:	72 e0       	ldi	r23, 0x02	; 2
 1e2:	0e 94 74 01 	call	0x2e8	; 0x2e8 <UART_puts>
        UART_puts(0,cad);
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	b8 01       	movw	r22, r16
 1ec:	0e 94 74 01 	call	0x2e8	; 0x2e8 <UART_puts>
        //itoa(num,cad,2);

        //UART_gotoxy(0,5,5);
        UART_puts(0,"Bin: ");
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	6e e1       	ldi	r22, 0x1E	; 30
 1f6:	72 e0       	ldi	r23, 0x02	; 2
 1f8:	0e 94 74 01 	call	0x2e8	; 0x2e8 <UART_puts>
        UART_puts(0,cad);
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	b8 01       	movw	r22, r16
 202:	0e 94 74 01 	call	0x2e8	; 0x2e8 <UART_puts>
 206:	c5 cf       	rjmp	.-118    	; 0x192 <main+0x68>

00000208 <UART_Ini>:

};



UART_Ini(uint8_t com, uint32_t baudrate, uint8_t size, uint8_t parity, uint8_t stop){
 208:	af 92       	push	r10
 20a:	bf 92       	push	r11
 20c:	cf 92       	push	r12
 20e:	df 92       	push	r13
 210:	ef 92       	push	r14
 212:	0f 93       	push	r16
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	5a 01       	movw	r10, r20
 21a:	6b 01       	movw	r12, r22
 21c:	92 2f       	mov	r25, r18
 21e:	2e 2d       	mov	r18, r14

    UART_reg_t *myUART = UART_offset[com]; // eligo a mi UART
 220:	e8 2f       	mov	r30, r24
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	ee 0f       	add	r30, r30
 226:	ff 1f       	adc	r31, r31
 228:	ec 5d       	subi	r30, 0xDC	; 220
 22a:	fd 4f       	sbci	r31, 0xFD	; 253
 22c:	c0 81       	ld	r28, Z
 22e:	d1 81       	ldd	r29, Z+1	; 0x01

    myUART->UCSRB = (1 << TXEN0) | (1 << RXEN0); // Habilita TX y RX para UART0
 230:	88 e1       	ldi	r24, 0x18	; 24
 232:	89 83       	std	Y+1, r24	; 0x01
    //establecer las paridades
	//uint8_t parity_mode= (parity == 1) ? 2 : 3;  // 2: Paridad par, 3: Paridad impar

    uint8_t parity_mode=0;

    switch(parity){
 234:	01 30       	cpi	r16, 0x01	; 1
 236:	19 f0       	breq	.+6      	; 0x23e <UART_Ini+0x36>
 238:	02 30       	cpi	r16, 0x02	; 2
 23a:	19 f4       	brne	.+6      	; 0x242 <UART_Ini+0x3a>
 23c:	04 c0       	rjmp	.+8      	; 0x246 <UART_Ini+0x3e>
 23e:	83 e0       	ldi	r24, 0x03	; 3
 240:	03 c0       	rjmp	.+6      	; 0x248 <UART_Ini+0x40>
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	01 c0       	rjmp	.+2      	; 0x248 <UART_Ini+0x40>
 246:	82 e0       	ldi	r24, 0x02	; 2
    //me manda sde de 1 o 2 por lo que ocn este ternearo decivo si es 1 sera 1 bit de parada 0
    //pero si es otro valor seran 2 bits de parada

    uint8_t stop_mode= (stop == 1)? 0:1;

    myUART->UCSRC = (parity_mode << UPM00) | (stop_mode <<USBS0);
 248:	e8 2f       	mov	r30, r24
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	54 e0       	ldi	r21, 0x04	; 4
 24e:	ee 0f       	add	r30, r30
 250:	ff 1f       	adc	r31, r31
 252:	5a 95       	dec	r21
 254:	e1 f7       	brne	.-8      	; 0x24e <UART_Ini+0x46>
 256:	60 e0       	ldi	r22, 0x00	; 0
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	21 30       	cpi	r18, 0x01	; 1
 25c:	11 f0       	breq	.+4      	; 0x262 <UART_Ini+0x5a>
 25e:	61 e0       	ldi	r22, 0x01	; 1
 260:	70 e0       	ldi	r23, 0x00	; 0
 262:	43 e0       	ldi	r20, 0x03	; 3
 264:	66 0f       	add	r22, r22
 266:	77 1f       	adc	r23, r23
 268:	4a 95       	dec	r20
 26a:	e1 f7       	brne	.-8      	; 0x264 <UART_Ini+0x5c>
 26c:	8e 2f       	mov	r24, r30
 26e:	86 2b       	or	r24, r22
 270:	8a 83       	std	Y+2, r24	; 0x02

		myUART->UCSRC = 3 << UCSZ00;
		myUART->UCSRB = 1<< UCSZ02; //habilitamos los 9 bits
	}*/

	if (size == 9) {
 272:	99 30       	cpi	r25, 0x09	; 9
 274:	39 f4       	brne	.+14     	; 0x284 <UART_Ini+0x7c>
        myUART->UCSRC |= (3 << UCSZ00); // UCSZ01:UCSZ00 = 0b11
 276:	8a 81       	ldd	r24, Y+2	; 0x02
 278:	86 60       	ori	r24, 0x06	; 6
 27a:	8a 83       	std	Y+2, r24	; 0x02
        myUART->UCSRB |= (1 << UCSZ02); // Habilitar bit 9
 27c:	89 81       	ldd	r24, Y+1	; 0x01
 27e:	84 60       	ori	r24, 0x04	; 4
 280:	89 83       	std	Y+1, r24	; 0x01
 282:	08 c0       	rjmp	.+16     	; 0x294 <UART_Ini+0x8c>
    } else
     {
        myUART->UCSRC |= ((size - 5) << UCSZ00); // Ej: 8 bits ? 3 << UCSZ00
 284:	2a 81       	ldd	r18, Y+2	; 0x02
 286:	89 2f       	mov	r24, r25
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	05 97       	sbiw	r24, 0x05	; 5
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	28 2b       	or	r18, r24
 292:	2a 83       	std	Y+2, r18	; 0x02
    }

    uint16_t v_UBRR = (FOSC / (16 * baudrate)) - 1 ;
 294:	84 e0       	ldi	r24, 0x04	; 4
 296:	aa 0c       	add	r10, r10
 298:	bb 1c       	adc	r11, r11
 29a:	cc 1c       	adc	r12, r12
 29c:	dd 1c       	adc	r13, r13
 29e:	8a 95       	dec	r24
 2a0:	d1 f7       	brne	.-12     	; 0x296 <UART_Ini+0x8e>
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	74 e2       	ldi	r23, 0x24	; 36
 2a6:	84 ef       	ldi	r24, 0xF4	; 244
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	a6 01       	movw	r20, r12
 2ac:	95 01       	movw	r18, r10
 2ae:	0e 94 b6 01 	call	0x36c	; 0x36c <__udivmodsi4>
 2b2:	21 50       	subi	r18, 0x01	; 1
 2b4:	30 40       	sbci	r19, 0x00	; 0
    myUART->UBRR = v_UBRR;
 2b6:	3d 83       	std	Y+5, r19	; 0x05
 2b8:	2c 83       	std	Y+4, r18	; 0x04
}
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	0f 91       	pop	r16
 2c0:	ef 90       	pop	r14
 2c2:	df 90       	pop	r13
 2c4:	cf 90       	pop	r12
 2c6:	bf 90       	pop	r11
 2c8:	af 90       	pop	r10
 2ca:	08 95       	ret

000002cc <UART_putchar>:
	//que el registro esta vacio,

	//entonces el ciclo va a espear para cunado este se vacie por completo
	//lo que hace es esperar mientras haya datos dentro del buffer

	UART_reg_t *myUART = UART_offset[com];
 2cc:	e8 2f       	mov	r30, r24
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	ee 0f       	add	r30, r30
 2d2:	ff 1f       	adc	r31, r31
 2d4:	ec 5d       	subi	r30, 0xDC	; 220
 2d6:	fd 4f       	sbci	r31, 0xFD	; 253
 2d8:	01 90       	ld	r0, Z+
 2da:	f0 81       	ld	r31, Z
 2dc:	e0 2d       	mov	r30, r0
    uint8_t udre_bit = (com == 0) ? UDRE0 :
                      (com == 1) ? UDRE1 :
                      (com == 2) ? UDRE2 : UDRE3;

    //va a esperar hasta que se vacie por completo
	while (!(myUART->UCSRA & (1 << udre_bit)));
 2de:	80 81       	ld	r24, Z
 2e0:	85 ff       	sbrs	r24, 5
 2e2:	fd cf       	rjmp	.-6      	; 0x2de <UART_putchar+0x12>
		; //espera a que el periferico este vacio

	myUART->UDR= data;
 2e4:	66 83       	std	Z+6, r22	; 0x06
}
 2e6:	08 95       	ret

000002e8 <UART_puts>:
*/


//este haria lo mismo de putchar la unica deiferente es que este estara
//recorriendo la cadena que se quiere imprimir
void UART_puts(uint8_t com, char *str){
 2e8:	1f 93       	push	r17
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	18 2f       	mov	r17, r24
 2f0:	eb 01       	movw	r28, r22
 2f2:	06 c0       	rjmp	.+12     	; 0x300 <UART_puts+0x18>

	//TXn trasmitir el contenido
	while(*str!= '\0'){
		//mientras haya contenido en el apuntador, que sea diferente a NULL
		UART_putchar(com,*str++);
 2f4:	21 96       	adiw	r28, 0x01	; 1
 2f6:	81 2f       	mov	r24, r17
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	0e 94 66 01 	call	0x2cc	; 0x2cc <UART_putchar>
//este haria lo mismo de putchar la unica deiferente es que este estara
//recorriendo la cadena que se quiere imprimir
void UART_puts(uint8_t com, char *str){

	//TXn trasmitir el contenido
	while(*str!= '\0'){
 300:	68 81       	ld	r22, Y
 302:	66 23       	and	r22, r22
 304:	b9 f7       	brne	.-18     	; 0x2f4 <UART_puts+0xc>
		//mientras haya contenido en el apuntador, que sea diferente a NULL
		UART_putchar(com,*str++);
	}
}
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	1f 91       	pop	r17
 30c:	08 95       	ret

0000030e <UART_available>:
uint8_t UART_available(uint8_t com){

	//RXC0 sta en 1 cuando hay un dato sin leer en RXC
	//y esta en 0 cunado este no tiene nada

	UART_reg_t *myUART = UART_offset[com];
 30e:	e8 2f       	mov	r30, r24
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	ee 0f       	add	r30, r30
 314:	ff 1f       	adc	r31, r31
 316:	ec 5d       	subi	r30, 0xDC	; 220
 318:	fd 4f       	sbci	r31, 0xFD	; 253
 31a:	01 90       	ld	r0, Z+
 31c:	f0 81       	ld	r31, Z
 31e:	e0 2d       	mov	r30, r0

	return (myUART->UCSRA & (1 << RXC0)) ; // Hay dato disponible
 320:	80 81       	ld	r24, Z
	//creo que va a asi pero si hay errores podemos invertirlo
}
 322:	80 78       	andi	r24, 0x80	; 128
 324:	08 95       	ret

00000326 <UART_getchar>:
}*/


char UART_getchar(uint8_t com) {

    UART_reg_t *myUART = UART_offset[com];
 326:	e8 2f       	mov	r30, r24
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	ee 0f       	add	r30, r30
 32c:	ff 1f       	adc	r31, r31
 32e:	ec 5d       	subi	r30, 0xDC	; 220
 330:	fd 4f       	sbci	r31, 0xFD	; 253
 332:	01 90       	ld	r0, Z+
 334:	f0 81       	ld	r31, Z
 336:	e0 2d       	mov	r30, r0
	//RXC0 sta en 1 cuando hay un dato sin leer en RXC
	//y esta en 0 cunado este no tiene nada

	UART_reg_t *myUART = UART_offset[com];

	return (myUART->UCSRA & (1 << RXC0)) ; // Hay dato disponible
 338:	80 81       	ld	r24, Z


char UART_getchar(uint8_t com) {

    UART_reg_t *myUART = UART_offset[com];
    while (!(UART_available(com))); // Espera dato
 33a:	87 ff       	sbrs	r24, 7
 33c:	fd cf       	rjmp	.-6      	; 0x338 <UART_getchar+0x12>
    return myUART->UDR;
 33e:	86 81       	ldd	r24, Z+6	; 0x06
}
 340:	08 95       	ret

00000342 <UART_gets>:


void UART_gets(uint8_t com, char *str){
 342:	0f 93       	push	r16
 344:	1f 93       	push	r17
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	08 2f       	mov	r16, r24
 34c:	eb 01       	movw	r28, r22
 34e:	10 e0       	ldi	r17, 0x00	; 0
			UART_putchar(com,'\r'); //vuelve al inicio de la linea
			UART_putchar(com,'\n'); //salto de linea
			break; //rompesmos el ciclo y a esperar que se vuelva a escribir algo
		}

		if(i<127){
 350:	1f 37       	cpi	r17, 0x7F	; 127
 352:	f0 f7       	brcc	.-4      	; 0x350 <UART_gets+0xe>

			str[i++]= c;
 354:	fe 01       	movw	r30, r28
 356:	e1 0f       	add	r30, r17
 358:	f1 1d       	adc	r31, r1
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	60 83       	st	Z, r22
 35e:	1f 5f       	subi	r17, 0xFF	; 255
			putchar(com, c);
 360:	80 2f       	mov	r24, r16
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	70 e0       	ldi	r23, 0x00	; 0
 366:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <putchar>
 36a:	f2 cf       	rjmp	.-28     	; 0x350 <UART_gets+0xe>

0000036c <__udivmodsi4>:
 36c:	a1 e2       	ldi	r26, 0x21	; 33
 36e:	1a 2e       	mov	r1, r26
 370:	aa 1b       	sub	r26, r26
 372:	bb 1b       	sub	r27, r27
 374:	fd 01       	movw	r30, r26
 376:	0d c0       	rjmp	.+26     	; 0x392 <__udivmodsi4_ep>

00000378 <__udivmodsi4_loop>:
 378:	aa 1f       	adc	r26, r26
 37a:	bb 1f       	adc	r27, r27
 37c:	ee 1f       	adc	r30, r30
 37e:	ff 1f       	adc	r31, r31
 380:	a2 17       	cp	r26, r18
 382:	b3 07       	cpc	r27, r19
 384:	e4 07       	cpc	r30, r20
 386:	f5 07       	cpc	r31, r21
 388:	20 f0       	brcs	.+8      	; 0x392 <__udivmodsi4_ep>
 38a:	a2 1b       	sub	r26, r18
 38c:	b3 0b       	sbc	r27, r19
 38e:	e4 0b       	sbc	r30, r20
 390:	f5 0b       	sbc	r31, r21

00000392 <__udivmodsi4_ep>:
 392:	66 1f       	adc	r22, r22
 394:	77 1f       	adc	r23, r23
 396:	88 1f       	adc	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	1a 94       	dec	r1
 39c:	69 f7       	brne	.-38     	; 0x378 <__udivmodsi4_loop>
 39e:	60 95       	com	r22
 3a0:	70 95       	com	r23
 3a2:	80 95       	com	r24
 3a4:	90 95       	com	r25
 3a6:	9b 01       	movw	r18, r22
 3a8:	ac 01       	movw	r20, r24
 3aa:	bd 01       	movw	r22, r26
 3ac:	cf 01       	movw	r24, r30
 3ae:	08 95       	ret

000003b0 <putchar>:
 3b0:	60 91 2e 02 	lds	r22, 0x022E
 3b4:	70 91 2f 02 	lds	r23, 0x022F
 3b8:	0e 94 df 01 	call	0x3be	; 0x3be <fputc>
 3bc:	08 95       	ret

000003be <fputc>:
 3be:	0f 93       	push	r16
 3c0:	1f 93       	push	r17
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	8c 01       	movw	r16, r24
 3c8:	eb 01       	movw	r28, r22
 3ca:	8b 81       	ldd	r24, Y+3	; 0x03
 3cc:	81 ff       	sbrs	r24, 1
 3ce:	1b c0       	rjmp	.+54     	; 0x406 <fputc+0x48>
 3d0:	82 ff       	sbrs	r24, 2
 3d2:	0d c0       	rjmp	.+26     	; 0x3ee <fputc+0x30>
 3d4:	2e 81       	ldd	r18, Y+6	; 0x06
 3d6:	3f 81       	ldd	r19, Y+7	; 0x07
 3d8:	8c 81       	ldd	r24, Y+4	; 0x04
 3da:	9d 81       	ldd	r25, Y+5	; 0x05
 3dc:	28 17       	cp	r18, r24
 3de:	39 07       	cpc	r19, r25
 3e0:	64 f4       	brge	.+24     	; 0x3fa <fputc+0x3c>
 3e2:	e8 81       	ld	r30, Y
 3e4:	f9 81       	ldd	r31, Y+1	; 0x01
 3e6:	01 93       	st	Z+, r16
 3e8:	f9 83       	std	Y+1, r31	; 0x01
 3ea:	e8 83       	st	Y, r30
 3ec:	06 c0       	rjmp	.+12     	; 0x3fa <fputc+0x3c>
 3ee:	e8 85       	ldd	r30, Y+8	; 0x08
 3f0:	f9 85       	ldd	r31, Y+9	; 0x09
 3f2:	80 2f       	mov	r24, r16
 3f4:	19 95       	eicall
 3f6:	89 2b       	or	r24, r25
 3f8:	31 f4       	brne	.+12     	; 0x406 <fputc+0x48>
 3fa:	8e 81       	ldd	r24, Y+6	; 0x06
 3fc:	9f 81       	ldd	r25, Y+7	; 0x07
 3fe:	01 96       	adiw	r24, 0x01	; 1
 400:	9f 83       	std	Y+7, r25	; 0x07
 402:	8e 83       	std	Y+6, r24	; 0x06
 404:	02 c0       	rjmp	.+4      	; 0x40a <fputc+0x4c>
 406:	0f ef       	ldi	r16, 0xFF	; 255
 408:	1f ef       	ldi	r17, 0xFF	; 255
 40a:	c8 01       	movw	r24, r16
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	1f 91       	pop	r17
 412:	0f 91       	pop	r16
 414:	08 95       	ret

00000416 <_exit>:
 416:	f8 94       	cli

00000418 <__stop_program>:
 418:	ff cf       	rjmp	.-2      	; 0x418 <__stop_program>
