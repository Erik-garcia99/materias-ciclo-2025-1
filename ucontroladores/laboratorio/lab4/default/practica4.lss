
practica4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800200  000001a4  00000218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000040  00000000  00000000  00000238  2**3
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000024  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000161  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000009d  00000000  00000000  000003fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000013d  00000000  00000000  0000049a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  000005d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000d1  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  8c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  90:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  94:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  98:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  9c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  ac:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  bc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  cc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  dc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  e0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 ea       	ldi	r30, 0xA4	; 164
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 31       	cpi	r26, 0x1C	; 28
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
 112:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_exit>

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <main>:
	{0x4c,0x6f,0x6e,0x67,0x20,0x70,0x72,0x65,0x73,0x73,0x21 ,0x0D,0x0A,0x00}
};

int main(void)
{
	UCSR0B &= ~(1<<TXEN0); // Disable UART-TX
 11a:	80 91 c1 00 	lds	r24, 0x00C1
 11e:	87 7f       	andi	r24, 0xF7	; 247
 120:	80 93 c1 00 	sts	0x00C1, r24

	delay(0);
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 c5 00 	call	0x18a	; 0x18a <delay>


	delay_103us();
 12c:	0e 94 a0 00 	call	0x140	; 0x140 <delay_103us>
	__asm__("nop");
 130:	00 00       	nop

	uint8_t bit =3;

	while(1){
		SetBitPort(PORTB,bit); // Pone un 1 en el bit 3 del puerto B
 132:	2b 9a       	sbi	0x05, 3	; 5
		delay1S();
 134:	0e 94 b5 00 	call	0x16a	; 0x16a <delay1S>
		ClrBitPort(PORTB,bit);
 138:	2b 98       	cbi	0x05, 3	; 5
		delay1S();
 13a:	0e 94 b5 00 	call	0x16a	; 0x16a <delay1S>
 13e:	f9 cf       	rjmp	.-14     	; 0x132 <main+0x18>

00000140 <delay_103us>:


delay_103us:


	nop
 140:	00 00       	nop
	nop	
 142:	00 00       	nop


	ldi r22,5 
 144:	65 e0       	ldi	r22, 0x05	; 5
	ldi r21, 7
 146:	57 e0       	ldi	r21, 0x07	; 7

00000148 <nxt0>:
	
nxt0:
	nop 
 148:	00 00       	nop
	nop
 14a:	00 00       	nop
	nop 
 14c:	00 00       	nop
	ldi r20, 8 
 14e:	48 e0       	ldi	r20, 0x08	; 8

00000150 <nxt1>:

	
nxt1:
	dec r21 
 150:	5a 95       	dec	r21
	nop 
 152:	00 00       	nop
	nop 
 154:	00 00       	nop
	brne nxt1 
 156:	e1 f7       	brne	.-8      	; 0x150 <nxt1>

00000158 <nxt2>:
	
nxt2:
	ldi r21,7 
 158:	57 e0       	ldi	r21, 0x07	; 7
	nop 
 15a:	00 00       	nop
	nop
 15c:	00 00       	nop
	dec r20	
 15e:	4a 95       	dec	r20
	brne nxt1 
 160:	b9 f7       	brne	.-18     	; 0x150 <nxt1>

	dec r22 
 162:	6a 95       	dec	r22
	nop 
 164:	00 00       	nop
	brne nxt0 
 166:	81 f7       	brne	.-32     	; 0x148 <nxt0>

	ret 
 168:	08 95       	ret

0000016a <delay1S>:


delay1S:

ldi r20, 241;	
 16a:	41 ef       	ldi	r20, 0xF1	; 241
	...

0000016e <nxt_S>:
	nop				;1 	
		nxt_S: ldi r21, 144;  		/x
 16e:	50 e9       	ldi	r21, 0x90	; 144
		nop;						/x
 170:	00 00       	nop
		nop;						/x
 172:	00 00       	nop
	...

00000176 <nxt2_S>:
		nop;						/x
			nxt2_S:ldi r22, 152 ; 	/xy
 176:	68 e9       	ldi	r22, 0x98	; 152
			nop;					/xy
 178:	00 00       	nop
	...

0000017c <nxt3_S>:
			nop;					/xy
				nxt3_S:dec r22; 	/xyz
 17c:	6a 95       	dec	r22
				brne nxt3_S;	 	/xy(2z-1)
 17e:	f1 f7       	brne	.-4      	; 0x17c <nxt3_S>
			dec r21; 				/xy
 180:	5a 95       	dec	r21
			brne nxt2_S;	 		/x(2y-1)
 182:	c9 f7       	brne	.-14     	; 0x176 <nxt2_S>
		dec r20;	 				/x
 184:	4a 95       	dec	r20
		brne nxt_S;		 			/2x-1
 186:	99 f7       	brne	.-26     	; 0x16e <nxt_S>


	ret
 188:	08 95       	ret

0000018a <delay>:
delay:

	; en este tendre que hacer muchos descuentos por esto de
	;cunado sea 0 y  lo demas 

	cpi r24, 0x00 ; 1 
 18a:	80 30       	cpi	r24, 0x00	; 0
	breq final ;2 - 1
 18c:	41 f0       	breq	.+16     	; 0x19e <final>

	cpi r24, 0x01
 18e:	81 30       	cpi	r24, 0x01	; 1
	breq un_mSeg; si r24 es 1 ms entonces ira a una subrutina la cual durara 
 190:	39 f0       	breq	.+14     	; 0x1a0 <_exit>

00000192 <ciclo>:
	;dira 1ms segun lo que se mando por parametro 


	ciclo:

	call delay_general
 192:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_exit>

	cpi r24, 0x01
 196:	81 30       	cpi	r24, 0x01	; 1
	brne ciclo
 198:	e1 f7       	brne	.-8      	; 0x192 <ciclo>

	cpi r24,0x01 
 19a:	81 30       	cpi	r24, 0x01	; 1
	breq un_mSeg ; se cumple siempre
 19c:	09 f0       	breq	.+2      	; 0x1a0 <_exit>

0000019e <final>:



final:
	ret
 19e:	08 95       	ret

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
