
wokwi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800200  00000274  000002e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000274  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000056  00000000  00000000  00000312  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000022f  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000159  00000000  00000000  00000597  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000175  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  00000868  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000f0  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000026  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  000009ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  8c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  90:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  94:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  98:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  9c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  ac:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  bc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  cc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  dc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  e0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e7       	ldi	r30, 0x74	; 116
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 30       	cpi	r26, 0x0A	; 10
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	0e 94 c4 00 	call	0x188	; 0x188 <main>
 112:	0c 94 38 01 	jmp	0x270	; 0x270 <_exit>

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <display>:
		0X49, 0X41, 0X1F, 0X01, 0X19};

void display(uint8_t value)
{

	PORTA = valueDisplay[value];
 11a:	e0 e0       	ldi	r30, 0x00	; 0
 11c:	f2 e0       	ldi	r31, 0x02	; 2
 11e:	e8 0f       	add	r30, r24
 120:	f1 1d       	adc	r31, r1
 122:	80 81       	ld	r24, Z
 124:	82 b9       	out	0x02, r24	; 2
}
 126:	08 95       	ret

00000128 <is_buttom_press>:
uint8_t is_buttom_press(uint8_t pin)
{

	// PC0

	if (!(PINC & (1 << pin)))
 128:	26 b1       	in	r18, 0x06	; 6
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	02 c0       	rjmp	.+4      	; 0x132 <is_buttom_press+0xa>
 12e:	35 95       	asr	r19
 130:	27 95       	ror	r18
 132:	8a 95       	dec	r24
 134:	e2 f7       	brpl	.-8      	; 0x12e <is_buttom_press+0x6>
 136:	20 95       	com	r18
	{
		return 1;
	}
	return 0;
}
 138:	82 2f       	mov	r24, r18
 13a:	81 70       	andi	r24, 0x01	; 1
 13c:	08 95       	ret

0000013e <delay>:

void delay()
{
 13e:	df 93       	push	r29
 140:	cf 93       	push	r28
 142:	00 d0       	rcall	.+0      	; 0x144 <delay+0x6>
 144:	0f 92       	push	r0
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62

	volatile uint32_t counter = 0x4FFFF;
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	9f ef       	ldi	r25, 0xFF	; 255
 14e:	a4 e0       	ldi	r26, 0x04	; 4
 150:	b0 e0       	ldi	r27, 0x00	; 0
 152:	07 c0       	rjmp	.+14     	; 0x162 <delay+0x24>

	while (counter > 0)
	{
		counter--;
 154:	89 81       	ldd	r24, Y+1	; 0x01
 156:	9a 81       	ldd	r25, Y+2	; 0x02
 158:	ab 81       	ldd	r26, Y+3	; 0x03
 15a:	bc 81       	ldd	r27, Y+4	; 0x04
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	a1 09       	sbc	r26, r1
 160:	b1 09       	sbc	r27, r1
 162:	89 83       	std	Y+1, r24	; 0x01
 164:	9a 83       	std	Y+2, r25	; 0x02
 166:	ab 83       	std	Y+3, r26	; 0x03
 168:	bc 83       	std	Y+4, r27	; 0x04
void delay()
{

	volatile uint32_t counter = 0x4FFFF;

	while (counter > 0)
 16a:	89 81       	ldd	r24, Y+1	; 0x01
 16c:	9a 81       	ldd	r25, Y+2	; 0x02
 16e:	ab 81       	ldd	r26, Y+3	; 0x03
 170:	bc 81       	ldd	r27, Y+4	; 0x04
 172:	00 97       	sbiw	r24, 0x00	; 0
 174:	a1 05       	cpc	r26, r1
 176:	b1 05       	cpc	r27, r1
 178:	69 f7       	brne	.-38     	; 0x154 <delay+0x16>
	{
		counter--;
	}
}
 17a:	0f 90       	pop	r0
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	0f 90       	pop	r0
 182:	cf 91       	pop	r28
 184:	df 91       	pop	r29
 186:	08 95       	ret

00000188 <main>:
int main(void)
{
 188:	ef 92       	push	r14
 18a:	ff 92       	push	r15
 18c:	0f 93       	push	r16
 18e:	1f 93       	push	r17
 190:	df 93       	push	r29
 192:	cf 93       	push	r28
 194:	00 d0       	rcall	.+0      	; 0x196 <main+0xe>
 196:	0f 92       	push	r0
 198:	cd b7       	in	r28, 0x3d	; 61
 19a:	de b7       	in	r29, 0x3e	; 62

	DDRA = 0xFF; // todo el puerto A es de salida.  PA0 - PA7
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	81 b9       	out	0x01, r24	; 1

	PORTA = 0XFF;
 1a0:	82 b9       	out	0x02, r24	; 2

	DDRC &= ~(3 << PC0);
 1a2:	87 b1       	in	r24, 0x07	; 7
 1a4:	8c 7f       	andi	r24, 0xFC	; 252
 1a6:	87 b9       	out	0x07, r24	; 7
		0X49, 0X41, 0X1F, 0X01, 0X19};

void display(uint8_t value)
{

	PORTA = valueDisplay[value];
 1a8:	80 91 06 02 	lds	r24, 0x0206
 1ac:	82 b9       	out	0x02, r24	; 2
 1ae:	20 e0       	ldi	r18, 0x00	; 0
}

void delay()
{

	volatile uint32_t counter = 0x4FFFF;
 1b0:	8f ef       	ldi	r24, 0xFF	; 255
 1b2:	e8 2e       	mov	r14, r24
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	f8 2e       	mov	r15, r24
 1b8:	84 e0       	ldi	r24, 0x04	; 4
 1ba:	08 2f       	mov	r16, r24
 1bc:	11 2d       	mov	r17, r1
uint8_t is_buttom_press(uint8_t pin)
{

	// PC0

	if (!(PINC & (1 << pin)))
 1be:	30 99       	sbic	0x06, 0	; 6
 1c0:	48 c0       	rjmp	.+144    	; 0x252 <main+0xca>
	uint8_t count = 0;
	while (1)
	{
		if (is_buttom_press(inc_buttom))
		{
			count++;
 1c2:	2f 5f       	subi	r18, 0xFF	; 255
		0X49, 0X41, 0X1F, 0X01, 0X19};

void display(uint8_t value)
{

	PORTA = valueDisplay[value];
 1c4:	82 2f       	mov	r24, r18
 1c6:	6a e0       	ldi	r22, 0x0A	; 10
 1c8:	0e 94 2c 01 	call	0x258	; 0x258 <__udivmodqi4>
 1cc:	e9 2f       	mov	r30, r25
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	e0 50       	subi	r30, 0x00	; 0
 1d2:	fe 4f       	sbci	r31, 0xFE	; 254
 1d4:	80 81       	ld	r24, Z
 1d6:	82 b9       	out	0x02, r24	; 2
}

void delay()
{

	volatile uint32_t counter = 0x4FFFF;
 1d8:	e9 82       	std	Y+1, r14	; 0x01
 1da:	fa 82       	std	Y+2, r15	; 0x02
 1dc:	0b 83       	std	Y+3, r16	; 0x03
 1de:	1c 83       	std	Y+4, r17	; 0x04
 1e0:	0b c0       	rjmp	.+22     	; 0x1f8 <main+0x70>

	while (counter > 0)
	{
		counter--;
 1e2:	89 81       	ldd	r24, Y+1	; 0x01
 1e4:	9a 81       	ldd	r25, Y+2	; 0x02
 1e6:	ab 81       	ldd	r26, Y+3	; 0x03
 1e8:	bc 81       	ldd	r27, Y+4	; 0x04
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	a1 09       	sbc	r26, r1
 1ee:	b1 09       	sbc	r27, r1
 1f0:	89 83       	std	Y+1, r24	; 0x01
 1f2:	9a 83       	std	Y+2, r25	; 0x02
 1f4:	ab 83       	std	Y+3, r26	; 0x03
 1f6:	bc 83       	std	Y+4, r27	; 0x04
void delay()
{

	volatile uint32_t counter = 0x4FFFF;

	while (counter > 0)
 1f8:	89 81       	ldd	r24, Y+1	; 0x01
 1fa:	9a 81       	ldd	r25, Y+2	; 0x02
 1fc:	ab 81       	ldd	r26, Y+3	; 0x03
 1fe:	bc 81       	ldd	r27, Y+4	; 0x04
 200:	00 97       	sbiw	r24, 0x00	; 0
 202:	a1 05       	cpc	r26, r1
 204:	b1 05       	cpc	r27, r1
 206:	69 f7       	brne	.-38     	; 0x1e2 <main+0x5a>
 208:	da cf       	rjmp	.-76     	; 0x1be <main+0x36>
			display(count%10);
			delay();
		}
		else if (is_buttom_press(dec_buttom))
		{
			count--;
 20a:	21 50       	subi	r18, 0x01	; 1
		0X49, 0X41, 0X1F, 0X01, 0X19};

void display(uint8_t value)
{

	PORTA = valueDisplay[value];
 20c:	82 2f       	mov	r24, r18
 20e:	6a e0       	ldi	r22, 0x0A	; 10
 210:	0e 94 2c 01 	call	0x258	; 0x258 <__udivmodqi4>
 214:	e9 2f       	mov	r30, r25
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	e0 50       	subi	r30, 0x00	; 0
 21a:	fe 4f       	sbci	r31, 0xFE	; 254
 21c:	80 81       	ld	r24, Z
 21e:	82 b9       	out	0x02, r24	; 2
}

void delay()
{

	volatile uint32_t counter = 0x4FFFF;
 220:	e9 82       	std	Y+1, r14	; 0x01
 222:	fa 82       	std	Y+2, r15	; 0x02
 224:	0b 83       	std	Y+3, r16	; 0x03
 226:	1c 83       	std	Y+4, r17	; 0x04
 228:	0b c0       	rjmp	.+22     	; 0x240 <main+0xb8>

	while (counter > 0)
	{
		counter--;
 22a:	89 81       	ldd	r24, Y+1	; 0x01
 22c:	9a 81       	ldd	r25, Y+2	; 0x02
 22e:	ab 81       	ldd	r26, Y+3	; 0x03
 230:	bc 81       	ldd	r27, Y+4	; 0x04
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	a1 09       	sbc	r26, r1
 236:	b1 09       	sbc	r27, r1
 238:	89 83       	std	Y+1, r24	; 0x01
 23a:	9a 83       	std	Y+2, r25	; 0x02
 23c:	ab 83       	std	Y+3, r26	; 0x03
 23e:	bc 83       	std	Y+4, r27	; 0x04
void delay()
{

	volatile uint32_t counter = 0x4FFFF;

	while (counter > 0)
 240:	89 81       	ldd	r24, Y+1	; 0x01
 242:	9a 81       	ldd	r25, Y+2	; 0x02
 244:	ab 81       	ldd	r26, Y+3	; 0x03
 246:	bc 81       	ldd	r27, Y+4	; 0x04
 248:	00 97       	sbiw	r24, 0x00	; 0
 24a:	a1 05       	cpc	r26, r1
 24c:	b1 05       	cpc	r27, r1
 24e:	69 f7       	brne	.-38     	; 0x22a <main+0xa2>
 250:	b6 cf       	rjmp	.-148    	; 0x1be <main+0x36>
uint8_t is_buttom_press(uint8_t pin)
{

	// PC0

	if (!(PINC & (1 << pin)))
 252:	31 9b       	sbis	0x06, 1	; 6
 254:	da cf       	rjmp	.-76     	; 0x20a <main+0x82>
 256:	b3 cf       	rjmp	.-154    	; 0x1be <main+0x36>

00000258 <__udivmodqi4>:
 258:	99 1b       	sub	r25, r25
 25a:	79 e0       	ldi	r23, 0x09	; 9
 25c:	04 c0       	rjmp	.+8      	; 0x266 <__udivmodqi4_ep>

0000025e <__udivmodqi4_loop>:
 25e:	99 1f       	adc	r25, r25
 260:	96 17       	cp	r25, r22
 262:	08 f0       	brcs	.+2      	; 0x266 <__udivmodqi4_ep>
 264:	96 1b       	sub	r25, r22

00000266 <__udivmodqi4_ep>:
 266:	88 1f       	adc	r24, r24
 268:	7a 95       	dec	r23
 26a:	c9 f7       	brne	.-14     	; 0x25e <__udivmodqi4_loop>
 26c:	80 95       	com	r24
 26e:	08 95       	ret

00000270 <_exit>:
 270:	f8 94       	cli

00000272 <__stop_program>:
 272:	ff cf       	rjmp	.-2      	; 0x272 <__stop_program>
