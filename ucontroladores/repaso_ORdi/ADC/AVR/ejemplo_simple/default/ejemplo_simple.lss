
ejemplo_simple.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800200  000002d8  0000034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000074  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002a9  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001bf  00000000  00000000  000006a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000026e  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00000ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000018d  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000107  00000000  00000000  00000ccd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000dd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  8c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  90:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  94:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  98:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  9c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  ac:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  bc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  cc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  dc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  e0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 ed       	ldi	r30, 0xD8	; 216
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 31       	cpi	r26, 0x18	; 24
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <main>
 112:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <_exit>

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <uart_init>:
void uart_init() {
    // Configurar la velocidad en baudios
    //UBRR0H = (unsigned char)(UBRR_VALUE >> 8);
    //UBRR0L = (unsigned char)UBRR_VALUE;

    UBRR0 =103;
 11a:	87 e6       	ldi	r24, 0x67	; 103
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	90 93 c5 00 	sts	0x00C5, r25
 122:	80 93 c4 00 	sts	0x00C4, r24
    // Habilitar el transmisor (TX)
    UCSR0B = (1 << TXEN0) |(1<<RXEN0);
 126:	88 e1       	ldi	r24, 0x18	; 24
 128:	80 93 c1 00 	sts	0x00C1, r24



    //PARIDAD PAR - 1 STOP BIT - 8 BITS
    UCSR0C |= (1<<UPM01)| (1 << UCSZ01) | (1 << UCSZ00);
 12c:	e2 ec       	ldi	r30, 0xC2	; 194
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	86 62       	ori	r24, 0x26	; 38
 134:	80 83       	st	Z, r24
}
 136:	08 95       	ret

00000138 <uart_transmit_byte>:

void uart_transmit_byte(unsigned char data) {
 138:	98 2f       	mov	r25, r24
    // Esperar a que el buffer de transmisión de datos esté vacío
    while (!(UCSR0A & (1 << UDRE0)));
 13a:	80 91 c0 00 	lds	r24, 0x00C0
 13e:	85 ff       	sbrs	r24, 5
 140:	fc cf       	rjmp	.-8      	; 0x13a <uart_transmit_byte+0x2>
    // Poner el dato en el buffer y enviarlo
    UDR0 = data;
 142:	90 93 c6 00 	sts	0x00C6, r25
}
 146:	08 95       	ret

00000148 <uart_transmit_string>:

void uart_transmit_string(const char *str) {
 148:	fc 01       	movw	r30, r24
 14a:	07 c0       	rjmp	.+14     	; 0x15a <uart_transmit_string+0x12>
    UCSR0C |= (1<<UPM01)| (1 << UCSZ01) | (1 << UCSZ00);
}

void uart_transmit_byte(unsigned char data) {
    // Esperar a que el buffer de transmisión de datos esté vacío
    while (!(UCSR0A & (1 << UDRE0)));
 14c:	80 91 c0 00 	lds	r24, 0x00C0
 150:	85 ff       	sbrs	r24, 5
 152:	fc cf       	rjmp	.-8      	; 0x14c <uart_transmit_string+0x4>
    // Poner el dato en el buffer y enviarlo
    UDR0 = data;
 154:	90 93 c6 00 	sts	0x00C6, r25
}

void uart_transmit_string(const char *str) {
    while (*str != '\0') {
        uart_transmit_byte(*str);
        str++;
 158:	31 96       	adiw	r30, 0x01	; 1
    // Poner el dato en el buffer y enviarlo
    UDR0 = data;
}

void uart_transmit_string(const char *str) {
    while (*str != '\0') {
 15a:	90 81       	ld	r25, Z
 15c:	99 23       	and	r25, r25
 15e:	b1 f7       	brne	.-20     	; 0x14c <uart_transmit_string+0x4>
        uart_transmit_byte(*str);
        str++;
    }
}
 160:	08 95       	ret

00000162 <setup_adc>:

void setup_adc() {
    // Referencia: AVCC con capacitor en AREF (REFS0=1, REFS1=0)
    // Esto se logra con ADMUX = (1 << REFS0);
    // Alineación a la derecha (ADLAR=0) es el valor por defecto, no es necesario ajustarlo explícitamente si ya está en 0.
    ADMUX |= (1<<REFS0) | (1<<MUX0);
 162:	ec e7       	ldi	r30, 0x7C	; 124
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	81 64       	ori	r24, 0x41	; 65
 16a:	80 83       	st	Z, r24

    //PARA SELECCIONR EL ADC
    ADCSRB | (1<<MUX5);
 16c:	80 91 7b 00 	lds	r24, 0x007B

    // Prescalador: 128 (para 16MHz -> 125kHz ADC clock)
    // Habilitar ADC (ADEN=1)
    // Bits ADPS2, ADPS1, ADPS0 a 1 configuran el prescalador a 128
    ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 170:	87 e8       	ldi	r24, 0x87	; 135
 172:	80 93 7a 00 	sts	0x007A, r24

    // Deshabilitar entradas digitales en el pin ADC0 para reducir ruido y consumo.
    DIDR2 |= (1 << ADC9D);
 176:	ed e7       	ldi	r30, 0x7D	; 125
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	82 60       	ori	r24, 0x02	; 2
 17e:	80 83       	st	Z, r24
    // Si vas a usar otros pines como ADC1, etc., asegúrate de deshabilitar sus entradas digitales también.
    // DIDR0 |= (1 << ADC1D);
}
 180:	08 95       	ret

00000182 <read_adc>:
        // Ajusta los 4 bits MUX de ADMUX para el canal específico
        ADMUX = (ADMUX & 0xF0) | channel;
    }*/

    // Iniciar la conversión ADC
    ADCSRA |= (1 << ADSC);
 182:	80 91 7a 00 	lds	r24, 0x007A
 186:	80 64       	ori	r24, 0x40	; 64
 188:	80 93 7a 00 	sts	0x007A, r24

    // Esperar a que la bandera ADSC se borre (la conversión ha terminado)
    while (ADCSRA & (1 << ADSC));
 18c:	80 91 7a 00 	lds	r24, 0x007A
 190:	86 fd       	sbrc	r24, 6
 192:	fc cf       	rjmp	.-8      	; 0x18c <read_adc+0xa>

    // Leer el resultado de 10 bits. ADCL debe leerse primero para bloquear el buffer
    // y asegurar la integridad de los datos.
    uint8_t low_byte = ADCL;
 194:	20 91 78 00 	lds	r18, 0x0078
    uint8_t high_byte = ADCH;
 198:	40 91 79 00 	lds	r20, 0x0079
 19c:	94 2f       	mov	r25, r20
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	28 2b       	or	r18, r24
 1a4:	39 2b       	or	r19, r25

    // Combinar los bytes para obtener el valor de 10 bits
    return (high_byte << 8) | low_byte;
}
 1a6:	c9 01       	movw	r24, r18
 1a8:	08 95       	ret

000001aa <main>:

// --- Función Principal ---

int main() {
 1aa:	ef 92       	push	r14
 1ac:	ff 92       	push	r15
 1ae:	0f 93       	push	r16
 1b0:	1f 93       	push	r17
 1b2:	df 93       	push	r29
 1b4:	cf 93       	push	r28
 1b6:	cd b7       	in	r28, 0x3d	; 61
 1b8:	de b7       	in	r29, 0x3e	; 62
 1ba:	2a 97       	sbiw	r28, 0x0a	; 10
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	f8 94       	cli
 1c0:	de bf       	out	0x3e, r29	; 62
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	cd bf       	out	0x3d, r28	; 61

void setup_adc() {
    // Referencia: AVCC con capacitor en AREF (REFS0=1, REFS1=0)
    // Esto se logra con ADMUX = (1 << REFS0);
    // Alineación a la derecha (ADLAR=0) es el valor por defecto, no es necesario ajustarlo explícitamente si ya está en 0.
    ADMUX |= (1<<REFS0) | (1<<MUX0);
 1c6:	80 91 7c 00 	lds	r24, 0x007C
 1ca:	81 64       	ori	r24, 0x41	; 65
 1cc:	80 93 7c 00 	sts	0x007C, r24

    //PARA SELECCIONR EL ADC
    ADCSRB | (1<<MUX5);
 1d0:	80 91 7b 00 	lds	r24, 0x007B

    // Prescalador: 128 (para 16MHz -> 125kHz ADC clock)
    // Habilitar ADC (ADEN=1)
    // Bits ADPS2, ADPS1, ADPS0 a 1 configuran el prescalador a 128
    ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 1d4:	87 e8       	ldi	r24, 0x87	; 135
 1d6:	80 93 7a 00 	sts	0x007A, r24

    // Deshabilitar entradas digitales en el pin ADC0 para reducir ruido y consumo.
    DIDR2 |= (1 << ADC9D);
 1da:	80 91 7d 00 	lds	r24, 0x007D
 1de:	82 60       	ori	r24, 0x02	; 2
 1e0:	80 93 7d 00 	sts	0x007D, r24
void uart_init() {
    // Configurar la velocidad en baudios
    //UBRR0H = (unsigned char)(UBRR_VALUE >> 8);
    //UBRR0L = (unsigned char)UBRR_VALUE;

    UBRR0 =103;
 1e4:	87 e6       	ldi	r24, 0x67	; 103
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	90 93 c5 00 	sts	0x00C5, r25
 1ec:	80 93 c4 00 	sts	0x00C4, r24
    // Habilitar el transmisor (TX)
    UCSR0B = (1 << TXEN0) |(1<<RXEN0);
 1f0:	88 e1       	ldi	r24, 0x18	; 24
 1f2:	80 93 c1 00 	sts	0x00C1, r24



    //PARIDAD PAR - 1 STOP BIT - 8 BITS
    UCSR0C |= (1<<UPM01)| (1 << UCSZ01) | (1 << UCSZ00);
 1f6:	80 91 c2 00 	lds	r24, 0x00C2
 1fa:	86 62       	ori	r24, 0x26	; 38
 1fc:	80 93 c2 00 	sts	0x00C2, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 200:	88 ea       	ldi	r24, 0xA8	; 168
 202:	91 e6       	ldi	r25, 0x61	; 97
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <main+0x5a>
    while (1) {

        uint16_t adc_value = read_adc(0); // Lee el valor del canal ADC0

        // Convertir el valor entero del ADC a una cadena de texto (decimal)
        itoa(adc_value, buffer, 10);
 208:	8e 01       	movw	r16, r28
 20a:	0f 5f       	subi	r16, 0xFF	; 255
 20c:	1f 4f       	sbci	r17, 0xFF	; 255
 20e:	89 e1       	ldi	r24, 0x19	; 25
 210:	e8 2e       	mov	r14, r24
 212:	f1 2c       	mov	r15, r1
    char buffer[10]; // Buffer para almacenar la cadena de texto del valor ADC

     _delay_ms(100); // Pequeña espera
    while (1) {

        uint16_t adc_value = read_adc(0); // Lee el valor del canal ADC0
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	0e 94 c1 00 	call	0x182	; 0x182 <read_adc>

        // Convertir el valor entero del ADC a una cadena de texto (decimal)
        itoa(adc_value, buffer, 10);
 21a:	b8 01       	movw	r22, r16
 21c:	4a e0       	ldi	r20, 0x0A	; 10
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	0e 94 25 01 	call	0x24a	; 0x24a <itoa>

        // Enviar el mensaje por UART
        uart_transmit_string("Valor ADC (Pin A0): ");
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	92 e0       	ldi	r25, 0x02	; 2
 228:	0e 94 a4 00 	call	0x148	; 0x148 <uart_transmit_string>
        uart_transmit_string(buffer);
 22c:	c8 01       	movw	r24, r16
 22e:	0e 94 a4 00 	call	0x148	; 0x148 <uart_transmit_string>
        uart_transmit_string("\r\n"); // Enviar un retorno de carro y salto de línea para formatear
 232:	85 e1       	ldi	r24, 0x15	; 21
 234:	92 e0       	ldi	r25, 0x02	; 2
 236:	0e 94 a4 00 	call	0x148	; 0x148 <uart_transmit_string>
 23a:	88 e8       	ldi	r24, 0x88	; 136
 23c:	93 e1       	ldi	r25, 0x13	; 19
 23e:	f7 01       	movw	r30, r14
 240:	31 97       	sbiw	r30, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <main+0x96>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 244:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 246:	d9 f7       	brne	.-10     	; 0x23e <main+0x94>
 248:	e5 cf       	rjmp	.-54     	; 0x214 <main+0x6a>

0000024a <itoa>:
 24a:	fb 01       	movw	r30, r22
 24c:	9f 01       	movw	r18, r30
 24e:	e8 94       	clt
 250:	42 30       	cpi	r20, 0x02	; 2
 252:	c4 f0       	brlt	.+48     	; 0x284 <itoa+0x3a>
 254:	45 32       	cpi	r20, 0x25	; 37
 256:	b4 f4       	brge	.+44     	; 0x284 <itoa+0x3a>
 258:	4a 30       	cpi	r20, 0x0A	; 10
 25a:	29 f4       	brne	.+10     	; 0x266 <itoa+0x1c>
 25c:	97 fb       	bst	r25, 7
 25e:	1e f4       	brtc	.+6      	; 0x266 <itoa+0x1c>
 260:	90 95       	com	r25
 262:	81 95       	neg	r24
 264:	9f 4f       	sbci	r25, 0xFF	; 255
 266:	64 2f       	mov	r22, r20
 268:	77 27       	eor	r23, r23
 26a:	0e 94 56 01 	call	0x2ac	; 0x2ac <__udivmodhi4>
 26e:	80 5d       	subi	r24, 0xD0	; 208
 270:	8a 33       	cpi	r24, 0x3A	; 58
 272:	0c f0       	brlt	.+2      	; 0x276 <itoa+0x2c>
 274:	89 5d       	subi	r24, 0xD9	; 217
 276:	81 93       	st	Z+, r24
 278:	cb 01       	movw	r24, r22
 27a:	00 97       	sbiw	r24, 0x00	; 0
 27c:	a1 f7       	brne	.-24     	; 0x266 <itoa+0x1c>
 27e:	16 f4       	brtc	.+4      	; 0x284 <itoa+0x3a>
 280:	5d e2       	ldi	r21, 0x2D	; 45
 282:	51 93       	st	Z+, r21
 284:	10 82       	st	Z, r1
 286:	c9 01       	movw	r24, r18
 288:	0c 94 46 01 	jmp	0x28c	; 0x28c <strrev>

0000028c <strrev>:
 28c:	dc 01       	movw	r26, r24
 28e:	fc 01       	movw	r30, r24
 290:	67 2f       	mov	r22, r23
 292:	71 91       	ld	r23, Z+
 294:	77 23       	and	r23, r23
 296:	e1 f7       	brne	.-8      	; 0x290 <strrev+0x4>
 298:	32 97       	sbiw	r30, 0x02	; 2
 29a:	04 c0       	rjmp	.+8      	; 0x2a4 <strrev+0x18>
 29c:	7c 91       	ld	r23, X
 29e:	6d 93       	st	X+, r22
 2a0:	70 83       	st	Z, r23
 2a2:	62 91       	ld	r22, -Z
 2a4:	ae 17       	cp	r26, r30
 2a6:	bf 07       	cpc	r27, r31
 2a8:	c8 f3       	brcs	.-14     	; 0x29c <strrev+0x10>
 2aa:	08 95       	ret

000002ac <__udivmodhi4>:
 2ac:	aa 1b       	sub	r26, r26
 2ae:	bb 1b       	sub	r27, r27
 2b0:	51 e1       	ldi	r21, 0x11	; 17
 2b2:	07 c0       	rjmp	.+14     	; 0x2c2 <__udivmodhi4_ep>

000002b4 <__udivmodhi4_loop>:
 2b4:	aa 1f       	adc	r26, r26
 2b6:	bb 1f       	adc	r27, r27
 2b8:	a6 17       	cp	r26, r22
 2ba:	b7 07       	cpc	r27, r23
 2bc:	10 f0       	brcs	.+4      	; 0x2c2 <__udivmodhi4_ep>
 2be:	a6 1b       	sub	r26, r22
 2c0:	b7 0b       	sbc	r27, r23

000002c2 <__udivmodhi4_ep>:
 2c2:	88 1f       	adc	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	5a 95       	dec	r21
 2c8:	a9 f7       	brne	.-22     	; 0x2b4 <__udivmodhi4_loop>
 2ca:	80 95       	com	r24
 2cc:	90 95       	com	r25
 2ce:	bc 01       	movw	r22, r24
 2d0:	cd 01       	movw	r24, r26
 2d2:	08 95       	ret

000002d4 <_exit>:
 2d4:	f8 94       	cli

000002d6 <__stop_program>:
 2d6:	ff cf       	rjmp	.-2      	; 0x2d6 <__stop_program>
