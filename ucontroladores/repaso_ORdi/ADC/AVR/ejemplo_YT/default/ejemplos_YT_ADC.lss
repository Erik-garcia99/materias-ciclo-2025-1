
ejemplos_YT_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000174  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000036  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000c8  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000007d  00000000  00000000  000002e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000f0  00000000  00000000  00000363  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000454  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000dc  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  8c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  90:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  94:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  98:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  9c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  ac:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  bc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  cc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  dc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  e0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e7       	ldi	r30, 0x74	; 116
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	0e 94 9b 00 	call	0x136	; 0x136 <main>
 112:	0c 94 b8 00 	jmp	0x170	; 0x170 <_exit>

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <init_GPIO>:
void init_GPIO(void){

    //en este vamos a seleccionar un puerto de salida, el PUERTO A es buena opcion

    //para poner un pin en salida es con 1
    DDRA = 0xFF; //contandrra ADL 8 bits de la parte baja
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	81 b9       	out	0x01, r24	; 1
    //PC7-PC6 son los seran para la parte baja con estos 10 bits del ADC
    DDRC = (1<<PC7) | (1<<PC6); //contendra ADCH parte alta del ADC
 11e:	80 ec       	ldi	r24, 0xC0	; 192
 120:	87 b9       	out	0x07, r24	; 7
    //DDRC = 0xFF;

}
 122:	08 95       	ret

00000124 <init_ADC>:
void init_ADC(){

    //seleccionaremos el ADC0
    //ALAR=0; ACOMODADO A LA DERECHA
    //como referencia AVCC = 5V
    ADMUX = (1<<REFS0) ;
 124:	80 e4       	ldi	r24, 0x40	; 64
 126:	80 93 7c 00 	sts	0x007C, r24
    //EL TIMER DEBDE DE ESTAR en una Frecuencia de 50kHz - 200kHz
    //F_timer = 16MHz / 128 = 125,000
    ADCSRA = (7<<ADPS0) | (1<<ADEN) | (1<<ADATE) | (1<<ADSC);
 12a:	87 ee       	ldi	r24, 0xE7	; 231
 12c:	80 93 7a 00 	sts	0x007A, r24
    //como estamos en el modo de conversion susecviam debemos escoger el evento
    //que va a decir

    ADCSRB = 0;
 130:	10 92 7b 00 	sts	0x007B, r1
    //en este modo es encesario decir cual sera el eventro de disparo, en este caso
    //vamos a decir que es "freee runnig mode" por lo que los registros
    //ASRS2:0 = 0.

}
 134:	08 95       	ret

00000136 <main>:
void init_GPIO(void){

    //en este vamos a seleccionar un puerto de salida, el PUERTO A es buena opcion

    //para poner un pin en salida es con 1
    DDRA = 0xFF; //contandrra ADL 8 bits de la parte baja
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	81 b9       	out	0x01, r24	; 1
    //PC7-PC6 son los seran para la parte baja con estos 10 bits del ADC
    DDRC = (1<<PC7) | (1<<PC6); //contendra ADCH parte alta del ADC
 13a:	80 ec       	ldi	r24, 0xC0	; 192
 13c:	87 b9       	out	0x07, r24	; 7
void init_ADC(){

    //seleccionaremos el ADC0
    //ALAR=0; ACOMODADO A LA DERECHA
    //como referencia AVCC = 5V
    ADMUX = (1<<REFS0) ;
 13e:	80 e4       	ldi	r24, 0x40	; 64
 140:	80 93 7c 00 	sts	0x007C, r24
    //EL TIMER DEBDE DE ESTAR en una Frecuencia de 50kHz - 200kHz
    //F_timer = 16MHz / 128 = 125,000
    ADCSRA = (7<<ADPS0) | (1<<ADEN) | (1<<ADATE) | (1<<ADSC);
 144:	87 ee       	ldi	r24, 0xE7	; 231
 146:	80 93 7a 00 	sts	0x007A, r24
    //como estamos en el modo de conversion susecviam debemos escoger el evento
    //que va a decir

    ADCSRB = 0;
 14a:	10 92 7b 00 	sts	0x007B, r1


        */


        while(!(ADCSRA & (1<<ADIF)));
 14e:	80 91 7a 00 	lds	r24, 0x007A
 152:	84 ff       	sbrs	r24, 4
 154:	fc cf       	rjmp	.-8      	; 0x14e <main+0x18>
        //una vez que este se active debemos limpiarlo por software, si se hiicera por interrupciones
        //ña interrupcion misma lo limpia, pero con poner 1 se limpia

        //pasamos el valor alto al registro de puerto

        PORTA = ADCL;
 156:	80 91 78 00 	lds	r24, 0x0078
 15a:	82 b9       	out	0x02, r24	; 2
        PORTC = (ADCH & 0x03);
 15c:	80 91 79 00 	lds	r24, 0x0079
 160:	83 70       	andi	r24, 0x03	; 3
 162:	88 b9       	out	0x08, r24	; 8

        //limpiamos la badera de interrupciones, vuelve a inicar a esperar a la sigueitne conversion

        ADCSRA |= (1<<ADIF);
 164:	80 91 7a 00 	lds	r24, 0x007A
 168:	80 61       	ori	r24, 0x10	; 16
 16a:	80 93 7a 00 	sts	0x007A, r24
 16e:	ef cf       	rjmp	.-34     	; 0x14e <main+0x18>

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
