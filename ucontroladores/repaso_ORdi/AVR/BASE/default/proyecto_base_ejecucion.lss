
proyecto_base_ejecucion.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000190  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000028  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000e9  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000af  00000000  00000000  00000315  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000013f  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000504  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ff  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000041  00000000  00000000  00000633  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  8c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  90:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  94:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  98:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  9c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  ac:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  bc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  cc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  dc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  e0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e9       	ldi	r30, 0x90	; 144
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	0e 94 9f 00 	call	0x13e	; 0x13e <main>
 112:	0c 94 c6 00 	jmp	0x18c	; 0x18c <_exit>

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <init_ADC>:
//inicamos el ADC

void init_ADC(void){

    //ajustado a la drecha, VCC como voltaje de referencia, ADC9
    ADMUX = (1<<REFS0) | (1<<MUX0);
 11a:	81 e4       	ldi	r24, 0x41	; 65
 11c:	80 93 7c 00 	sts	0x007C, r24
    //  ADC0 y FREE RUNNER
    ADCSRB |= (1<<MUX5);
 120:	eb e7       	ldi	r30, 0x7B	; 123
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	88 60       	ori	r24, 0x08	; 8
 128:	80 83       	st	Z, r24
    ADCSRB &=~(7<<ADTS0);
 12a:	80 81       	ld	r24, Z
 12c:	88 7f       	andi	r24, 0xF8	; 248
 12e:	80 83       	st	Z, r24

    PS de 128 es el unico que esta dentro del rango que puede operar el ADC

    habilitamos interrupciones
    */
    ADCSRA = (1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (7<<ADPS0) | (1<<ADIF);
 130:	87 ef       	ldi	r24, 0xF7	; 247
 132:	80 93 7a 00 	sts	0x007A, r24

    //ADC9 -> PK1
    DIDR2 = (1<<ADC9D); //deshabilita la funcion digital del PIN del ADC9
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	80 93 7d 00 	sts	0x007D, r24

}
 13c:	08 95       	ret

0000013e <main>:


int main(void)
{

    init_ADC();
 13e:	0e 94 8d 00 	call	0x11a	; 0x11a <init_ADC>

    //habilitamos los puertos para ver el ADC

    DDRA = 0xFF;
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	81 b9       	out	0x01, r24	; 1
    DDRC = (1<<PC6) | (1<<PC7);
 146:	80 ec       	ldi	r24, 0xC0	; 192
 148:	87 b9       	out	0x07, r24	; 7
    DDRB = (1<<PB7); //el led que va a prender cuando disminuya el umbral
 14a:	80 e8       	ldi	r24, 0x80	; 128
 14c:	84 b9       	out	0x04, r24	; 4

    // Insert code

    while(1){

        if(ADCSRA & (1<<ADIF)){
 14e:	80 91 7a 00 	lds	r24, 0x007A
 152:	84 ff       	sbrs	r24, 4
 154:	fc cf       	rjmp	.-8      	; 0x14e <main+0x10>

            uint8_t low = ADCL;
 156:	80 91 78 00 	lds	r24, 0x0078
            uint8_t high = ADCH;
 15a:	30 91 79 00 	lds	r19, 0x0079

            uint16_t resultado_ADC = (high << 8) | low;


            //solo me lo muestra con BITS
            PORTA = low;
 15e:	82 b9       	out	0x02, r24	; 2
            PORTC = (high << PC6);
 160:	23 2f       	mov	r18, r19
 162:	22 95       	swap	r18
 164:	22 0f       	add	r18, r18
 166:	22 0f       	add	r18, r18
 168:	20 7c       	andi	r18, 0xC0	; 192
 16a:	28 b9       	out	0x08, r18	; 8

            if(resultado_ADC > HYSTERESIS){
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	82 2b       	or	r24, r18
 172:	93 2b       	or	r25, r19
 174:	8d 3c       	cpi	r24, 0xCD	; 205
 176:	91 05       	cpc	r25, r1
 178:	10 f0       	brcs	.+4      	; 0x17e <main+0x40>

                PORTB &=~(1<<PB7);
 17a:	2f 98       	cbi	0x05, 7	; 5
 17c:	01 c0       	rjmp	.+2      	; 0x180 <main+0x42>
            }
            else{
                //mantenerlo apagado
                PORTB |= 1<<PB7;
 17e:	2f 9a       	sbi	0x05, 7	; 5

            }


            ADCSRA |= (1<<ADIF); //limpiamos la bandera
 180:	80 91 7a 00 	lds	r24, 0x007A
 184:	80 61       	ori	r24, 0x10	; 16
 186:	80 93 7a 00 	sts	0x007A, r24
 18a:	e1 cf       	rjmp	.-62     	; 0x14e <main+0x10>

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
