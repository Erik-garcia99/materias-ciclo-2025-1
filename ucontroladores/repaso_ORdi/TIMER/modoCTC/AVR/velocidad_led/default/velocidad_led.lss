
velocidad_led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800200  00800200  000002b2  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  000002b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000061  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001d3  00000000  00000000  00000359  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000cb  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001e0  00000000  00000000  000005f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  000007d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000155  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_21>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e3       	ldi	r30, 0x3E	; 62
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a3 30       	cpi	r26, 0x03	; 3
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 00 01 	call	0x200	; 0x200 <main>
 122:	0c 94 1d 01 	jmp	0x23a	; 0x23a <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <Timer0_init_CTC>:


void Timer0_init_CTC(void){

    //hay que configurar el timer
    sei();
 12a:	78 94       	sei

    TCNT0= 0;
 12c:	16 bc       	out	0x26, r1	; 38

    TCCR0A |= (2<<WGM00);
 12e:	84 b5       	in	r24, 0x24	; 36
 130:	82 60       	ori	r24, 0x02	; 2
 132:	84 bd       	out	0x24, r24	; 36
    */


    //prescalador  -> 256

    TCCR0B |= (1<<CS02);
 134:	85 b5       	in	r24, 0x25	; 37
 136:	84 60       	ori	r24, 0x04	; 4
 138:	85 bd       	out	0x25, r24	; 37

    //habilitamos interrupcionde OCR0A

    TIMSK0 |=1<<OCIE0A;
 13a:	ee e6       	ldi	r30, 0x6E	; 110
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	82 60       	ori	r24, 0x02	; 2
 142:	80 83       	st	Z, r24

    OCR0A = 62;
 144:	8e e3       	ldi	r24, 0x3E	; 62
 146:	87 bd       	out	0x27, r24	; 39

}
 148:	08 95       	ret

0000014a <__vector_21>:

//rutina de manera deinterrupcion



ISR(TIMER0_COMPA_vect){
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	2f 93       	push	r18
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25



    milis++;
 15a:	80 91 00 02 	lds	r24, 0x0200
 15e:	90 91 01 02 	lds	r25, 0x0201
 162:	01 96       	adiw	r24, 0x01	; 1
 164:	90 93 01 02 	sts	0x0201, r25
 168:	80 93 00 02 	sts	0x0200, r24

    switch(_state){
 16c:	80 91 02 02 	lds	r24, 0x0202
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	69 f0       	breq	.+26     	; 0x18e <__vector_21+0x44>
 174:	81 30       	cpi	r24, 0x01	; 1
 176:	18 f0       	brcs	.+6      	; 0x17e <__vector_21+0x34>
 178:	82 30       	cpi	r24, 0x02	; 2
 17a:	e9 f4       	brne	.+58     	; 0x1b6 <__vector_21+0x6c>
 17c:	10 c0       	rjmp	.+32     	; 0x19e <__vector_21+0x54>


        case velocidad_normal:

                if(milis == 1000){
 17e:	80 91 00 02 	lds	r24, 0x0200
 182:	90 91 01 02 	lds	r25, 0x0201
 186:	88 5e       	subi	r24, 0xE8	; 232
 188:	93 40       	sbci	r25, 0x03	; 3
 18a:	a9 f4       	brne	.+42     	; 0x1b6 <__vector_21+0x6c>
 18c:	0f c0       	rjmp	.+30     	; 0x1ac <__vector_21+0x62>
                    milis=0;
                }break;

        case velocidad_doble:

                if(milis == 500){
 18e:	80 91 00 02 	lds	r24, 0x0200
 192:	90 91 01 02 	lds	r25, 0x0201
 196:	84 5f       	subi	r24, 0xF4	; 244
 198:	91 40       	sbci	r25, 0x01	; 1
 19a:	69 f4       	brne	.+26     	; 0x1b6 <__vector_21+0x6c>
 19c:	07 c0       	rjmp	.+14     	; 0x1ac <__vector_21+0x62>
                    milis=0;
                }break;

        case velocidad_triple:

                if(milis == 250){
 19e:	80 91 00 02 	lds	r24, 0x0200
 1a2:	90 91 01 02 	lds	r25, 0x0201
 1a6:	8a 3f       	cpi	r24, 0xFA	; 250
 1a8:	91 05       	cpc	r25, r1
 1aa:	29 f4       	brne	.+10     	; 0x1b6 <__vector_21+0x6c>

                    PINB |= 1<<PB7;
 1ac:	1f 9a       	sbi	0x03, 7	; 3
                    milis=0;
 1ae:	10 92 01 02 	sts	0x0201, r1
 1b2:	10 92 00 02 	sts	0x0200, r1
                }break;

    }


}
 1b6:	9f 91       	pop	r25
 1b8:	8f 91       	pop	r24
 1ba:	2f 91       	pop	r18
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <read_BTN>:

    */



    if(!(PINB & (1<<PB0))){
 1c6:	18 99       	sbic	0x03, 0	; 3
 1c8:	1a c0       	rjmp	.+52     	; 0x1fe <read_BTN+0x38>

        delay_103us();
 1ca:	0e 94 08 01 	call	0x210	; 0x210 <delay_103us>


        if(_state == velocidad_normal){
 1ce:	80 91 02 02 	lds	r24, 0x0202
 1d2:	88 23       	and	r24, r24
 1d4:	11 f4       	brne	.+4      	; 0x1da <read_BTN+0x14>

            _state= velocidad_doble;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	05 c0       	rjmp	.+10     	; 0x1e4 <read_BTN+0x1e>
            milis=0;
        }

        else if(_state == velocidad_doble){
 1da:	80 91 02 02 	lds	r24, 0x0202
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	41 f4       	brne	.+16     	; 0x1f2 <read_BTN+0x2c>

            _state= velocidad_triple;
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	80 93 02 02 	sts	0x0202, r24
            milis=0;
 1e8:	10 92 01 02 	sts	0x0201, r1
 1ec:	10 92 00 02 	sts	0x0200, r1
 1f0:	08 95       	ret
        }

        else{
            _state= velocidad_normal;
 1f2:	10 92 02 02 	sts	0x0202, r1
            milis=0;
 1f6:	10 92 01 02 	sts	0x0201, r1
 1fa:	10 92 00 02 	sts	0x0200, r1
 1fe:	08 95       	ret

00000200 <main>:





    DDRB |= (1<<PB7); //salida
 200:	27 9a       	sbi	0x04, 7	; 4
    DDRB &= ~(1<<PB0); //entrada
 202:	20 98       	cbi	0x04, 0	; 4
    PORTB |=(1<<PB0); //activamos su pullup
 204:	28 9a       	sbi	0x05, 0	; 5

    Timer0_init_CTC();
 206:	0e 94 95 00 	call	0x12a	; 0x12a <Timer0_init_CTC>

    while(1){

        //haora si va algo aquie, constantemente debemos de estar leyecnod el puerto

        read_BTN();
 20a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <read_BTN>
 20e:	fd cf       	rjmp	.-6      	; 0x20a <main+0xa>

00000210 <delay_103us>:


delay_103us:


	nop
 210:	00 00       	nop
	nop
 212:	00 00       	nop


	ldi r22,5
 214:	65 e0       	ldi	r22, 0x05	; 5
	ldi r21, 7
 216:	57 e0       	ldi	r21, 0x07	; 7

00000218 <nxt0>:

nxt0:
	nop
 218:	00 00       	nop
	nop
 21a:	00 00       	nop
	nop
 21c:	00 00       	nop
	ldi r20, 8
 21e:	48 e0       	ldi	r20, 0x08	; 8

00000220 <nxt1>:


nxt1:
	dec r21
 220:	5a 95       	dec	r21
	nop
 222:	00 00       	nop
	nop
 224:	00 00       	nop
	brne nxt1
 226:	e1 f7       	brne	.-8      	; 0x220 <nxt1>

00000228 <nxt2>:

nxt2:
	ldi r21,7
 228:	57 e0       	ldi	r21, 0x07	; 7
	nop
 22a:	00 00       	nop
	nop
 22c:	00 00       	nop
	dec r20
 22e:	4a 95       	dec	r20
	brne nxt1
 230:	b9 f7       	brne	.-18     	; 0x220 <nxt1>

	dec r22
 232:	6a 95       	dec	r22
	nop
 234:	00 00       	nop
	brne nxt0
 236:	81 f7       	brne	.-32     	; 0x218 <nxt0>

	ret
 238:	08 95       	ret

0000023a <_exit>:
 23a:	f8 94       	cli

0000023c <__stop_program>:
 23c:	ff cf       	rjmp	.-2      	; 0x23c <__stop_program>
