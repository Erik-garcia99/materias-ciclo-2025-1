
timer_1S.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800200  00800200  00000218  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  00000218  2**3
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000035  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000015a  00000000  00000000  0000028d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000008f  00000000  00000000  000003e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000015b  00000000  00000000  00000476  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  000005d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ea  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 ea       	ldi	r30, 0xA4	; 164
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 30       	cpi	r26, 0x02	; 2
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
 122:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <Timer0_init>:

    //con el modo normal quiero que cunado se llegue al segundo se prenda el led

    //habilitamos el modo normal del TIMER (contdor asendente hasta MAX 0xFF)

    TCCR0A = 0; //modo normal
 12a:	14 bc       	out	0x24, r1	; 36
    //entonces como seria en el modo normal?, debemos asignr un OFFSET para que cunado llegue a 255 - 0xFF
    //se actvie la bander de OVERFLOW.

    //PRECLACALOR

    TCCR0B |= (1<<CS02) | (1<<CS00);
 12c:	85 b5       	in	r24, 0x25	; 37
 12e:	85 60       	ori	r24, 0x05	; 5
 130:	85 bd       	out	0x25, r24	; 37

    TCNT0 = 240;
 132:	80 ef       	ldi	r24, 0xF0	; 240
 134:	86 bd       	out	0x26, r24	; 38
    TIFR0 |= 1<<TOV0;
 136:	a8 9a       	sbi	0x15, 0	; 21


}
 138:	08 95       	ret

0000013a <main>:
int main(void){


    //configurar PB7 como salida

    DDRB |= 1<< PB7;
 13a:	27 9a       	sbi	0x04, 7	; 4
    Timer0_init();
 13c:	0e 94 95 00 	call	0x12a	; 0x12a <Timer0_init>

                milis++;
                //limpiamos la bandera

                TIFR0 |= 1<<TOV0;
                TCNT0 = 240;
 140:	20 ef       	ldi	r18, 0xF0	; 240
    Timer0_init();


    while(1){

            if(TIFR0 & (1<<TOV0)){
 142:	a8 9b       	sbis	0x15, 0	; 21
 144:	fe cf       	rjmp	.-4      	; 0x142 <main+0x8>

                milis++;
 146:	80 91 00 02 	lds	r24, 0x0200
 14a:	90 91 01 02 	lds	r25, 0x0201
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	90 93 01 02 	sts	0x0201, r25
 154:	80 93 00 02 	sts	0x0200, r24
                //limpiamos la bandera

                TIFR0 |= 1<<TOV0;
 158:	a8 9a       	sbi	0x15, 0	; 21
                TCNT0 = 240;
 15a:	26 bd       	out	0x26, r18	; 38

                if(milis == 1000){
 15c:	80 91 00 02 	lds	r24, 0x0200
 160:	90 91 01 02 	lds	r25, 0x0201
 164:	88 5e       	subi	r24, 0xE8	; 232
 166:	93 40       	sbci	r25, 0x03	; 3
 168:	61 f7       	brne	.-40     	; 0x142 <main+0x8>
                    PINB |= (1<<PB7); // Enciende el LED
 16a:	1f 9a       	sbi	0x03, 7	; 3

                    delay_103us();

                    PORTB &= ~(1<<PB7);*/

                    milis = 0; // Reiniciar contador de milis
 16c:	10 92 01 02 	sts	0x0201, r1
 170:	10 92 00 02 	sts	0x0200, r1
 174:	e6 cf       	rjmp	.-52     	; 0x142 <main+0x8>

00000176 <delay_103us>:


delay_103us:


	nop
 176:	00 00       	nop
	nop
 178:	00 00       	nop


	ldi r22,5
 17a:	65 e0       	ldi	r22, 0x05	; 5
	ldi r21, 7
 17c:	57 e0       	ldi	r21, 0x07	; 7

0000017e <nxt0>:

nxt0:
	nop
 17e:	00 00       	nop
	nop
 180:	00 00       	nop
	nop
 182:	00 00       	nop
	ldi r20, 8
 184:	48 e0       	ldi	r20, 0x08	; 8

00000186 <nxt1>:


nxt1:
	dec r21
 186:	5a 95       	dec	r21
	nop
 188:	00 00       	nop
	nop
 18a:	00 00       	nop
	brne nxt1
 18c:	e1 f7       	brne	.-8      	; 0x186 <nxt1>

0000018e <nxt2>:

nxt2:
	ldi r21,7
 18e:	57 e0       	ldi	r21, 0x07	; 7
	nop
 190:	00 00       	nop
	nop
 192:	00 00       	nop
	dec r20
 194:	4a 95       	dec	r20
	brne nxt1
 196:	b9 f7       	brne	.-18     	; 0x186 <nxt1>

	dec r22
 198:	6a 95       	dec	r22
	nop
 19a:	00 00       	nop
	brne nxt0
 19c:	81 f7       	brne	.-32     	; 0x17e <nxt0>

	ret
 19e:	08 95       	ret

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
