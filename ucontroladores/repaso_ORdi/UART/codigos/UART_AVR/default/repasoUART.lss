
repasoUART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800200  000003fc  00000470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000040  00000000  00000000  0000049e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000009b  00000000  00000000  000004de  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000519  00000000  00000000  00000579  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000025e  00000000  00000000  00000a92  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000343  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00001034  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001b6  00000000  00000000  000010c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000270  00000000  00000000  0000127a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  8c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  90:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  94:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  98:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  9c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  ac:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  bc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  cc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  dc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  e0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec ef       	ldi	r30, 0xFC	; 252
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 32       	cpi	r26, 0x2E	; 46
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
 112:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <_exit>

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <main>:




int main( void )
{
 11a:	ef 92       	push	r14
 11c:	ff 92       	push	r15
 11e:	0f 93       	push	r16
 120:	1f 93       	push	r17
 122:	df 93       	push	r29
 124:	cf 93       	push	r28
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
 12a:	a8 97       	sbiw	r28, 0x28	; 40
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	f8 94       	cli
 130:	de bf       	out	0x3e, r29	; 62
 132:	0f be       	out	0x3f, r0	; 63
 134:	cd bf       	out	0x3d, r28	; 61
    char cad[cantidad];
    char cadUart3[cantidad];
    uint16_t num;


    UART_Ini(0,12345,8,1,2); //comunicacion con teraterm
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	49 e3       	ldi	r20, 0x39	; 57
 13a:	50 e3       	ldi	r21, 0x30	; 48
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	70 e0       	ldi	r23, 0x00	; 0
 140:	28 e0       	ldi	r18, 0x08	; 8
 142:	01 e0       	ldi	r16, 0x01	; 1
 144:	92 e0       	ldi	r25, 0x02	; 2
 146:	e9 2e       	mov	r14, r25
 148:	0e 94 f6 00 	call	0x1ec	; 0x1ec <UART_Ini>
    UART_Ini(2,115200,8,0,1);
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	40 e0       	ldi	r20, 0x00	; 0
 150:	52 ec       	ldi	r21, 0xC2	; 194
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	28 e0       	ldi	r18, 0x08	; 8
 158:	00 e0       	ldi	r16, 0x00	; 0
 15a:	ee 24       	eor	r14, r14
 15c:	e3 94       	inc	r14
 15e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <UART_Ini>
    UART_Ini(3,115200,8,0,1);
 162:	83 e0       	ldi	r24, 0x03	; 3
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	52 ec       	ldi	r21, 0xC2	; 194
 168:	61 e0       	ldi	r22, 0x01	; 1
 16a:	70 e0       	ldi	r23, 0x00	; 0
 16c:	28 e0       	ldi	r18, 0x08	; 8
 16e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <UART_Ini>
        //UART_setColor(0,YELLOW);
        UART_puts(0,"Introduce un n?mero:"); //terminamos con un caracter nulo, funciona bien puts
        UART_puts(0,"\n");
        //UART_gotoxy(0,22,2);
        //UART_setColor(0,GREEN);
        UART_gets(0,cad); //vreremos si este funciona correcto
 172:	8e 01       	movw	r16, r28
 174:	0f 5f       	subi	r16, 0xFF	; 255
 176:	1f 4f       	sbci	r17, 0xFF	; 255
// -------------------------------------------
        // Cycle through UART2->UART3
        UART_puts(2,cad);
        UART_puts(2,"\r");
        UART_gets(3,cadUart3);
 178:	85 e1       	ldi	r24, 0x15	; 21
 17a:	e8 2e       	mov	r14, r24
 17c:	f1 2c       	mov	r15, r1
 17e:	ec 0e       	add	r14, r28
 180:	fd 1e       	adc	r15, r29
    UART_Ini(0,12345,8,1,2); //comunicacion con teraterm
    UART_Ini(2,115200,8,0,1);
    UART_Ini(3,115200,8,0,1);
    while(1)
    {
        UART_getchar(0);//getchar funciona OK
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	0e 94 a6 01 	call	0x34c	; 0x34c <UART_getchar>
        //UART_clrscr(0);

        //UART_gotoxy(0,2,2);
        //UART_setColor(0,YELLOW);
        UART_puts(0,"Introduce un n?mero:"); //terminamos con un caracter nulo, funciona bien puts
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	72 e0       	ldi	r23, 0x02	; 2
 18e:	0e 94 82 01 	call	0x304	; 0x304 <UART_puts>
        UART_puts(0,"\n");
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	65 e1       	ldi	r22, 0x15	; 21
 196:	72 e0       	ldi	r23, 0x02	; 2
 198:	0e 94 82 01 	call	0x304	; 0x304 <UART_puts>
        //UART_gotoxy(0,22,2);
        //UART_setColor(0,GREEN);
        UART_gets(0,cad); //vreremos si este funciona correcto
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	b8 01       	movw	r22, r16
 1a0:	0e 94 b4 01 	call	0x368	; 0x368 <UART_gets>
// -------------------------------------------
        // Cycle through UART2->UART3
        UART_puts(2,cad);
 1a4:	82 e0       	ldi	r24, 0x02	; 2
 1a6:	b8 01       	movw	r22, r16
 1a8:	0e 94 82 01 	call	0x304	; 0x304 <UART_puts>
        UART_puts(2,"\r");
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	67 e1       	ldi	r22, 0x17	; 23
 1b0:	72 e0       	ldi	r23, 0x02	; 2
 1b2:	0e 94 82 01 	call	0x304	; 0x304 <UART_puts>
        UART_gets(3,cadUart3);
 1b6:	83 e0       	ldi	r24, 0x03	; 3
 1b8:	b7 01       	movw	r22, r14
 1ba:	0e 94 b4 01 	call	0x368	; 0x368 <UART_gets>
        //UART_gotoxy(0,5,3);
        UART_puts(0,cadUart3);
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	b7 01       	movw	r22, r14
 1c2:	0e 94 82 01 	call	0x304	; 0x304 <UART_puts>
        //num = atoi(cad);
        //itoa(num,cad,16);

        //UART_gotoxy(0,5,4);
        //UART_setColor(0,BLUE);
        UART_puts(0,"Hex: ");
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	69 e1       	ldi	r22, 0x19	; 25
 1ca:	72 e0       	ldi	r23, 0x02	; 2
 1cc:	0e 94 82 01 	call	0x304	; 0x304 <UART_puts>
        UART_puts(0,cad);
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	b8 01       	movw	r22, r16
 1d4:	0e 94 82 01 	call	0x304	; 0x304 <UART_puts>
        //itoa(num,cad,2);

        //UART_gotoxy(0,5,5);
        UART_puts(0,"Bin: ");
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	6f e1       	ldi	r22, 0x1F	; 31
 1dc:	72 e0       	ldi	r23, 0x02	; 2
 1de:	0e 94 82 01 	call	0x304	; 0x304 <UART_puts>
        UART_puts(0,cad);
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	b8 01       	movw	r22, r16
 1e6:	0e 94 82 01 	call	0x304	; 0x304 <UART_puts>
 1ea:	cb cf       	rjmp	.-106    	; 0x182 <main+0x68>

000001ec <UART_Ini>:


//incilaisacion del UART


UART_Ini(uint8_t com, uint32_t baudrate, uint8_t size, uint8_t parity, uint8_t stop){
 1ec:	af 92       	push	r10
 1ee:	bf 92       	push	r11
 1f0:	cf 92       	push	r12
 1f2:	df 92       	push	r13
 1f4:	ef 92       	push	r14
 1f6:	0f 93       	push	r16
 1f8:	1f 93       	push	r17
 1fa:	df 93       	push	r29
 1fc:	cf 93       	push	r28
 1fe:	00 d0       	rcall	.+0      	; 0x200 <UART_Ini+0x14>
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
 204:	5a 01       	movw	r10, r20
 206:	6b 01       	movw	r12, r22
 208:	90 2f       	mov	r25, r16
 20a:	3e 2d       	mov	r19, r14



    //que dice la lieteratura, debemos establecer la velcdad del baudaje

    UART_reg_t *myUART = UART_offset[com];
 20c:	e8 2f       	mov	r30, r24
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	ee 0f       	add	r30, r30
 212:	ff 1f       	adc	r31, r31
 214:	eb 5d       	subi	r30, 0xDB	; 219
 216:	fd 4f       	sbci	r31, 0xFD	; 253
 218:	00 81       	ld	r16, Z
 21a:	11 81       	ldd	r17, Z+1	; 0x01
    //configureacion del regstro UCSRB

    //habilitamos el bit para eltransmisor y el receptor


    myUART->UCSRB = (1 << TXEN0) | (1 << RXEN0);
 21c:	88 e1       	ldi	r24, 0x18	; 24
 21e:	f8 01       	movw	r30, r16
 220:	82 83       	std	Z+2, r24	; 0x02

    //estabelcer los bits de apridad

    uint8_t parity_mode = 0;

    switch(parity){
 222:	91 30       	cpi	r25, 0x01	; 1
 224:	19 f0       	breq	.+6      	; 0x22c <UART_Ini+0x40>
 226:	92 30       	cpi	r25, 0x02	; 2
 228:	19 f4       	brne	.+6      	; 0x230 <UART_Ini+0x44>
 22a:	04 c0       	rjmp	.+8      	; 0x234 <UART_Ini+0x48>
 22c:	93 e0       	ldi	r25, 0x03	; 3
 22e:	03 c0       	rjmp	.+6      	; 0x236 <UART_Ini+0x4a>
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	01 c0       	rjmp	.+2      	; 0x236 <UART_Ini+0x4a>
 234:	92 e0       	ldi	r25, 0x02	; 2

        //en caso que sea 0 esta deshabilitado y salimos de la condicion
        default : break;
    }

    myUART->UCSRC |= (parity_mode << UPM00);
 236:	f8 01       	movw	r30, r16
 238:	81 81       	ldd	r24, Z+1	; 0x01
 23a:	92 95       	swap	r25
 23c:	90 7f       	andi	r25, 0xF0	; 240
 23e:	98 2b       	or	r25, r24
 240:	91 83       	std	Z+1, r25	; 0x01

    //establecer el stop bit


    //si se manda
    volatile uint8_t stop_bit = (stop == 1)? 1:0;
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	31 30       	cpi	r19, 0x01	; 1
 246:	09 f4       	brne	.+2      	; 0x24a <UART_Ini+0x5e>
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	89 83       	std	Y+1, r24	; 0x01

    myUART->UCSRC |= (stop_bit << USBS0);
 24c:	f8 01       	movw	r30, r16
 24e:	91 81       	ldd	r25, Z+1	; 0x01
 250:	89 81       	ldd	r24, Y+1	; 0x01
 252:	88 0f       	add	r24, r24
 254:	88 0f       	add	r24, r24
 256:	88 0f       	add	r24, r24
 258:	89 2b       	or	r24, r25
 25a:	81 83       	std	Z+1, r24	; 0x01


    //caracter el frame  de 5 - 8
    uint8_t ch_size = 0;
    switch(size){
 25c:	26 30       	cpi	r18, 0x06	; 6
 25e:	69 f0       	breq	.+26     	; 0x27a <UART_Ini+0x8e>
 260:	27 30       	cpi	r18, 0x07	; 7
 262:	18 f4       	brcc	.+6      	; 0x26a <UART_Ini+0x7e>
 264:	25 30       	cpi	r18, 0x05	; 5
 266:	a9 f4       	brne	.+42     	; 0x292 <UART_Ini+0xa6>
 268:	05 c0       	rjmp	.+10     	; 0x274 <UART_Ini+0x88>
 26a:	27 30       	cpi	r18, 0x07	; 7
 26c:	51 f0       	breq	.+20     	; 0x282 <UART_Ini+0x96>
 26e:	28 30       	cpi	r18, 0x08	; 8
 270:	81 f4       	brne	.+32     	; 0x292 <UART_Ini+0xa6>
 272:	0b c0       	rjmp	.+22     	; 0x28a <UART_Ini+0x9e>

        case 5 : myUART->UCSRC |= (ch_size << UCSZ00);break;
 274:	f8 01       	movw	r30, r16
 276:	81 81       	ldd	r24, Z+1	; 0x01
 278:	0b c0       	rjmp	.+22     	; 0x290 <UART_Ini+0xa4>

        case 6 : ch_size = 1;
                myUART->UCSRC |= (ch_size << UCSZ00);break;
 27a:	f8 01       	movw	r30, r16
 27c:	81 81       	ldd	r24, Z+1	; 0x01
 27e:	82 60       	ori	r24, 0x02	; 2
 280:	07 c0       	rjmp	.+14     	; 0x290 <UART_Ini+0xa4>


        case 7: ch_size = 2;
                myUART->UCSRC |= (ch_size << UCSZ00);break;
 282:	f8 01       	movw	r30, r16
 284:	81 81       	ldd	r24, Z+1	; 0x01
 286:	84 60       	ori	r24, 0x04	; 4
 288:	03 c0       	rjmp	.+6      	; 0x290 <UART_Ini+0xa4>
        case 8: ch_size=3;

                myUART->UCSRC |= (ch_size << UCSZ00);break;
 28a:	f8 01       	movw	r30, r16
 28c:	81 81       	ldd	r24, Z+1	; 0x01
 28e:	86 60       	ori	r24, 0x06	; 6
 290:	81 83       	std	Z+1, r24	; 0x01
    }


      //la funcion recibe el baudaje que se quiere llegar, pero debemos aplicar el prescalador (UBBR)
    //haremos con velcidad doble
    volatile uint16_t UBRR_value = (FOSC / (8 * baudrate ))- 1;
 292:	83 e0       	ldi	r24, 0x03	; 3
 294:	aa 0c       	add	r10, r10
 296:	bb 1c       	adc	r11, r11
 298:	cc 1c       	adc	r12, r12
 29a:	dd 1c       	adc	r13, r13
 29c:	8a 95       	dec	r24
 29e:	d1 f7       	brne	.-12     	; 0x294 <UART_Ini+0xa8>
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	74 e2       	ldi	r23, 0x24	; 36
 2a4:	84 ef       	ldi	r24, 0xF4	; 244
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	a6 01       	movw	r20, r12
 2aa:	95 01       	movw	r18, r10
 2ac:	0e 94 da 01 	call	0x3b4	; 0x3b4 <__udivmodsi4>
 2b0:	21 50       	subi	r18, 0x01	; 1
 2b2:	30 40       	sbci	r19, 0x00	; 0
 2b4:	3b 83       	std	Y+3, r19	; 0x03
 2b6:	2a 83       	std	Y+2, r18	; 0x02

    myUART->UBRR |= UBRR_value;
 2b8:	2a 81       	ldd	r18, Y+2	; 0x02
 2ba:	3b 81       	ldd	r19, Y+3	; 0x03
 2bc:	f8 01       	movw	r30, r16
 2be:	84 81       	ldd	r24, Z+4	; 0x04
 2c0:	95 81       	ldd	r25, Z+5	; 0x05
 2c2:	82 2b       	or	r24, r18
 2c4:	93 2b       	or	r25, r19
 2c6:	95 83       	std	Z+5, r25	; 0x05
 2c8:	84 83       	std	Z+4, r24	; 0x04

    //habiitadmos le velcidad doble

    myUART->UCSRA = (1 << U2X0);
 2ca:	82 e0       	ldi	r24, 0x02	; 2
 2cc:	80 83       	st	Z, r24
}
 2ce:	0f 90       	pop	r0
 2d0:	0f 90       	pop	r0
 2d2:	0f 90       	pop	r0
 2d4:	cf 91       	pop	r28
 2d6:	df 91       	pop	r29
 2d8:	1f 91       	pop	r17
 2da:	0f 91       	pop	r16
 2dc:	ef 90       	pop	r14
 2de:	df 90       	pop	r13
 2e0:	cf 90       	pop	r12
 2e2:	bf 90       	pop	r11
 2e4:	af 90       	pop	r10
 2e6:	08 95       	ret

000002e8 <UART_putchar>:

*/

void UART_putchar(uint8_t com, char data){

    UART_reg_t *myUART = UART_offset[com];
 2e8:	e8 2f       	mov	r30, r24
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	ee 0f       	add	r30, r30
 2ee:	ff 1f       	adc	r31, r31
 2f0:	eb 5d       	subi	r30, 0xDB	; 219
 2f2:	fd 4f       	sbci	r31, 0xFD	; 253
 2f4:	01 90       	ld	r0, Z+
 2f6:	f0 81       	ld	r31, Z
 2f8:	e0 2d       	mov	r30, r0

    porque en la funcion se niega?
    se esta negando porque si UDREn =0 quiere decri que hay datos dentro del buffer por lo que negamos (!) es para esperar
    hasta que el buffer este vacio por lo que esta vacio pasa la condicion y manda lo que hay en UDR al pin TX
    */
    while (!(myUART->UCSRA & (1 << UDRE0)));
 2fa:	80 81       	ld	r24, Z
 2fc:	85 ff       	sbrs	r24, 5
 2fe:	fd cf       	rjmp	.-6      	; 0x2fa <UART_putchar+0x12>

    myUART->UDR = data;
 300:	66 83       	std	Z+6, r22	; 0x06
}
 302:	08 95       	ret

00000304 <UART_puts>:


void UART_puts(uint8_t com, char *str){
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
 308:	eb 01       	movw	r28, r22

*/

void UART_putchar(uint8_t com, char data){

    UART_reg_t *myUART = UART_offset[com];
 30a:	e8 2f       	mov	r30, r24
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	ee 0f       	add	r30, r30
 310:	ff 1f       	adc	r31, r31
 312:	eb 5d       	subi	r30, 0xDB	; 219
 314:	fd 4f       	sbci	r31, 0xFD	; 253
 316:	08 c0       	rjmp	.+16     	; 0x328 <UART_puts+0x24>
 318:	a0 81       	ld	r26, Z
 31a:	b1 81       	ldd	r27, Z+1	; 0x01

    porque en la funcion se niega?
    se esta negando porque si UDREn =0 quiere decri que hay datos dentro del buffer por lo que negamos (!) es para esperar
    hasta que el buffer este vacio por lo que esta vacio pasa la condicion y manda lo que hay en UDR al pin TX
    */
    while (!(myUART->UCSRA & (1 << UDRE0)));
 31c:	8c 91       	ld	r24, X
 31e:	85 ff       	sbrs	r24, 5
 320:	fd cf       	rjmp	.-6      	; 0x31c <UART_puts+0x18>

    myUART->UDR = data;
 322:	16 96       	adiw	r26, 0x06	; 6
 324:	9c 93       	st	X, r25
    por lo que mandmos llamar a putchar tantas veces hata que se llegue al caracter nulo
    */
    while(*str != '\0'){

        UART_putchar(com,*str);
        str++;
 326:	21 96       	adiw	r28, 0x01	; 1
    /*
    con el caracter nulo '/0',

    por lo que mandmos llamar a putchar tantas veces hata que se llegue al caracter nulo
    */
    while(*str != '\0'){
 328:	98 81       	ld	r25, Y
 32a:	99 23       	and	r25, r25
 32c:	a9 f7       	brne	.-22     	; 0x318 <UART_puts+0x14>

        UART_putchar(com,*str);
        str++;
    }
}
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	08 95       	ret

00000334 <UART_available>:

*/

uint8_t UART_available(uint8_t com)
{
    UART_reg_t *myUART = UART_offset[com];
 334:	e8 2f       	mov	r30, r24
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	ee 0f       	add	r30, r30
 33a:	ff 1f       	adc	r31, r31
 33c:	eb 5d       	subi	r30, 0xDB	; 219
 33e:	fd 4f       	sbci	r31, 0xFD	; 253
 340:	01 90       	ld	r0, Z+
 342:	f0 81       	ld	r31, Z
 344:	e0 2d       	mov	r30, r0
        RXC0 es la bandera que indica si la recepcion se ha completado
        RXC0 esta en 1 (RCX0=1) si hya datos sin leer dentro del buffer
        (RCX0 = 0) si el buffer esta vacio
    */

    return (myUART->UCSRA & (1<<RXC0));
 346:	80 81       	ld	r24, Z
}
 348:	80 78       	andi	r24, 0x80	; 128
 34a:	08 95       	ret

0000034c <UART_getchar>:


    /*
    lo que llegue, lo pasamos a UDR
    */
    UART_reg_t *myUART = UART_offset[com];
 34c:	e8 2f       	mov	r30, r24
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	ee 0f       	add	r30, r30
 352:	ff 1f       	adc	r31, r31
 354:	eb 5d       	subi	r30, 0xDB	; 219
 356:	fd 4f       	sbci	r31, 0xFD	; 253
 358:	01 90       	ld	r0, Z+
 35a:	f0 81       	ld	r31, Z
 35c:	e0 2d       	mov	r30, r0
        RXC0 es la bandera que indica si la recepcion se ha completado
        RXC0 esta en 1 (RCX0=1) si hya datos sin leer dentro del buffer
        (RCX0 = 0) si el buffer esta vacio
    */

    return (myUART->UCSRA & (1<<RXC0));
 35e:	80 81       	ld	r24, Z
    /*
    lo que llegue, lo pasamos a UDR
    */
    UART_reg_t *myUART = UART_offset[com];
    //este va a eserar hasa que se llene el buffer y entonces mandara la infromacion a UDR
    while(!(UART_available(com)));
 360:	87 ff       	sbrs	r24, 7
 362:	fd cf       	rjmp	.-6      	; 0x35e <UART_getchar+0x12>
    return myUART->UDR;
}
 364:	86 81       	ldd	r24, Z+6	; 0x06
 366:	08 95       	ret

00000368 <UART_gets>:

void UART_gets(uint8_t com, char *str){
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
 36c:	eb 01       	movw	r28, r22


    /*
    lo que llegue, lo pasamos a UDR
    */
    UART_reg_t *myUART = UART_offset[com];
 36e:	a8 2f       	mov	r26, r24
 370:	b0 e0       	ldi	r27, 0x00	; 0
 372:	aa 0f       	add	r26, r26
 374:	bb 1f       	adc	r27, r27
 376:	ab 5d       	subi	r26, 0xDB	; 219
 378:	bd 4f       	sbci	r27, 0xFD	; 253
 37a:	ed 91       	ld	r30, X+
 37c:	fc 91       	ld	r31, X
 37e:	11 97       	sbiw	r26, 0x01	; 1
    //este va a eserar hasa que se llene el buffer y entonces mandara la infromacion a UDR
    while(!(UART_available(com)));
    return myUART->UDR;
 380:	96 81       	ldd	r25, Z+6	; 0x06
        RXC0 es la bandera que indica si la recepcion se ha completado
        RXC0 esta en 1 (RCX0=1) si hya datos sin leer dentro del buffer
        (RCX0 = 0) si el buffer esta vacio
    */

    return (myUART->UCSRA & (1<<RXC0));
 382:	80 81       	ld	r24, Z
    /*
    lo que llegue, lo pasamos a UDR
    */
    UART_reg_t *myUART = UART_offset[com];
    //este va a eserar hasa que se llene el buffer y entonces mandara la infromacion a UDR
    while(!(UART_available(com)));
 384:	87 ff       	sbrs	r24, 7
 386:	fd cf       	rjmp	.-6      	; 0x382 <UART_gets+0x1a>

        -que entrara cunado el usuario ya no quiere seguri captiradno
        si el suario da (enter) quiere decir que ya no quiere capturar mas.
        */

        if(c == '\n'){
 388:	9a 30       	cpi	r25, 0x0A	; 10
 38a:	d9 f3       	breq	.-10     	; 0x382 <UART_gets+0x1a>
            //el entido del programa
            continue;
        }

        //borrar los datos
        if(c == '\b'){
 38c:	98 30       	cpi	r25, 0x08	; 8
 38e:	c9 f3       	breq	.-14     	; 0x382 <UART_gets+0x1a>

            continue;

        }

        if(c == '.'){
 390:	9e 32       	cpi	r25, 0x2E	; 46
 392:	11 f0       	breq	.+4      	; 0x398 <UART_gets+0x30>
 394:	20 e0       	ldi	r18, 0x00	; 0
 396:	02 c0       	rjmp	.+4      	; 0x39c <UART_gets+0x34>

            str[i++] = '\0';
 398:	18 82       	st	Y, r1
 39a:	21 e0       	ldi	r18, 0x01	; 1

*/

void UART_putchar(uint8_t com, char data){

    UART_reg_t *myUART = UART_offset[com];
 39c:	ed 91       	ld	r30, X+
 39e:	fc 91       	ld	r31, X
 3a0:	11 97       	sbiw	r26, 0x01	; 1

    porque en la funcion se niega?
    se esta negando porque si UDREn =0 quiere decri que hay datos dentro del buffer por lo que negamos (!) es para esperar
    hasta que el buffer este vacio por lo que esta vacio pasa la condicion y manda lo que hay en UDR al pin TX
    */
    while (!(myUART->UCSRA & (1 << UDRE0)));
 3a2:	80 81       	ld	r24, Z
 3a4:	85 ff       	sbrs	r24, 5
 3a6:	fd cf       	rjmp	.-6      	; 0x3a2 <UART_gets+0x3a>

    myUART->UDR = data;
 3a8:	96 83       	std	Z+6, r25	; 0x06

        UART_putchar(com,c);

        //canidad defindio en el archivo .h
        if(i < cantidad){
            str[i++] = c;
 3aa:	fe 01       	movw	r30, r28
 3ac:	e2 0f       	add	r30, r18
 3ae:	f1 1d       	adc	r31, r1
 3b0:	90 83       	st	Z, r25
 3b2:	e3 cf       	rjmp	.-58     	; 0x37a <UART_gets+0x12>

000003b4 <__udivmodsi4>:
 3b4:	a1 e2       	ldi	r26, 0x21	; 33
 3b6:	1a 2e       	mov	r1, r26
 3b8:	aa 1b       	sub	r26, r26
 3ba:	bb 1b       	sub	r27, r27
 3bc:	fd 01       	movw	r30, r26
 3be:	0d c0       	rjmp	.+26     	; 0x3da <__udivmodsi4_ep>

000003c0 <__udivmodsi4_loop>:
 3c0:	aa 1f       	adc	r26, r26
 3c2:	bb 1f       	adc	r27, r27
 3c4:	ee 1f       	adc	r30, r30
 3c6:	ff 1f       	adc	r31, r31
 3c8:	a2 17       	cp	r26, r18
 3ca:	b3 07       	cpc	r27, r19
 3cc:	e4 07       	cpc	r30, r20
 3ce:	f5 07       	cpc	r31, r21
 3d0:	20 f0       	brcs	.+8      	; 0x3da <__udivmodsi4_ep>
 3d2:	a2 1b       	sub	r26, r18
 3d4:	b3 0b       	sbc	r27, r19
 3d6:	e4 0b       	sbc	r30, r20
 3d8:	f5 0b       	sbc	r31, r21

000003da <__udivmodsi4_ep>:
 3da:	66 1f       	adc	r22, r22
 3dc:	77 1f       	adc	r23, r23
 3de:	88 1f       	adc	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	1a 94       	dec	r1
 3e4:	69 f7       	brne	.-38     	; 0x3c0 <__udivmodsi4_loop>
 3e6:	60 95       	com	r22
 3e8:	70 95       	com	r23
 3ea:	80 95       	com	r24
 3ec:	90 95       	com	r25
 3ee:	9b 01       	movw	r18, r22
 3f0:	ac 01       	movw	r20, r24
 3f2:	bd 01       	movw	r22, r26
 3f4:	cf 01       	movw	r24, r30
 3f6:	08 95       	ret

000003f8 <_exit>:
 3f8:	f8 94       	cli

000003fa <__stop_program>:
 3fa:	ff cf       	rjmp	.-2      	; 0x3fa <__stop_program>
