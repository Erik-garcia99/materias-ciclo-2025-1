
repasoUART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800200  0000047c  000004f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000047c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000040  00000000  00000000  0000051e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000009b  00000000  00000000  0000055e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000684  00000000  00000000  000005f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000283  00000000  00000000  00000c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000042c  00000000  00000000  00000f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  0000132c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001b8  00000000  00000000  000013bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000432  00000000  00000000  00001574  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  000019a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  8c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  90:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  94:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  98:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  9c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  ac:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  bc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  cc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  dc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  e0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e7       	ldi	r30, 0x7C	; 124
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 32       	cpi	r26, 0x2E	; 46
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
 112:	0c 94 3c 02 	jmp	0x478	; 0x478 <_exit>

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <main>:




int main( void )
{
 11a:	ef 92       	push	r14
 11c:	ff 92       	push	r15
 11e:	0f 93       	push	r16
 120:	1f 93       	push	r17
 122:	df 93       	push	r29
 124:	cf 93       	push	r28
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
 12a:	a8 97       	sbiw	r28, 0x28	; 40
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	f8 94       	cli
 130:	de bf       	out	0x3e, r29	; 62
 132:	0f be       	out	0x3f, r0	; 63
 134:	cd bf       	out	0x3d, r28	; 61
    char cad[cantidad];
    char cadUart3[cantidad];
    uint16_t num;


    UART_Ini(0,12345,8,1,2); //comunicacion con teraterm
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	49 e3       	ldi	r20, 0x39	; 57
 13a:	50 e3       	ldi	r21, 0x30	; 48
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	70 e0       	ldi	r23, 0x00	; 0
 140:	28 e0       	ldi	r18, 0x08	; 8
 142:	01 e0       	ldi	r16, 0x01	; 1
 144:	92 e0       	ldi	r25, 0x02	; 2
 146:	e9 2e       	mov	r14, r25
 148:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Ini>
    UART_Ini(2,115200,8,0,1);
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	40 e0       	ldi	r20, 0x00	; 0
 150:	52 ec       	ldi	r21, 0xC2	; 194
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	28 e0       	ldi	r18, 0x08	; 8
 158:	00 e0       	ldi	r16, 0x00	; 0
 15a:	ee 24       	eor	r14, r14
 15c:	e3 94       	inc	r14
 15e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Ini>
    UART_Ini(3,115200,8,0,1);
 162:	83 e0       	ldi	r24, 0x03	; 3
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	52 ec       	ldi	r21, 0xC2	; 194
 168:	61 e0       	ldi	r22, 0x01	; 1
 16a:	70 e0       	ldi	r23, 0x00	; 0
 16c:	28 e0       	ldi	r18, 0x08	; 8
 16e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_Ini>
        //UART_gotoxy(0,2,2);
        //UART_setColor(0,YELLOW);
        UART_puts(0,"Introduce un n?mero:"); //terminamos con un caracter nulo, funciona bien puts
        //UART_gotoxy(0,22,2);
        //UART_setColor(0,GREEN);
        UART_gets(0,cad); //vreremos si este funciona correcto
 172:	8e 01       	movw	r16, r28
 174:	0f 5f       	subi	r16, 0xFF	; 255
 176:	1f 4f       	sbci	r17, 0xFF	; 255
// -------------------------------------------
        // Cycle through UART2->UART3
        UART_puts(2,cad);
        UART_puts(2,"\r");
        UART_gets(3,cadUart3);
 178:	85 e1       	ldi	r24, 0x15	; 21
 17a:	e8 2e       	mov	r14, r24
 17c:	f1 2c       	mov	r15, r1
 17e:	ec 0e       	add	r14, r28
 180:	fd 1e       	adc	r15, r29
    UART_Ini(0,12345,8,1,2); //comunicacion con teraterm
    UART_Ini(2,115200,8,0,1);
    UART_Ini(3,115200,8,0,1);
    while(1)
    {
        UART_getchar(0);//getchar funciona OK
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	0e 94 81 01 	call	0x302	; 0x302 <UART_getchar>
        //UART_clrscr(0);

        //UART_gotoxy(0,2,2);
        //UART_setColor(0,YELLOW);
        UART_puts(0,"Introduce un n?mero:"); //terminamos con un caracter nulo, funciona bien puts
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	72 e0       	ldi	r23, 0x02	; 2
 18e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <UART_puts>
        //UART_gotoxy(0,22,2);
        //UART_setColor(0,GREEN);
        UART_gets(0,cad); //vreremos si este funciona correcto
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	b8 01       	movw	r22, r16
 196:	0e 94 8f 01 	call	0x31e	; 0x31e <UART_gets>
// -------------------------------------------
        // Cycle through UART2->UART3
        UART_puts(2,cad);
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	b8 01       	movw	r22, r16
 19e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <UART_puts>
        UART_puts(2,"\r");
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	65 e1       	ldi	r22, 0x15	; 21
 1a6:	72 e0       	ldi	r23, 0x02	; 2
 1a8:	0e 94 5d 01 	call	0x2ba	; 0x2ba <UART_puts>
        UART_gets(3,cadUart3);
 1ac:	83 e0       	ldi	r24, 0x03	; 3
 1ae:	b7 01       	movw	r22, r14
 1b0:	0e 94 8f 01 	call	0x31e	; 0x31e <UART_gets>
        //UART_gotoxy(0,5,3);
        UART_puts(0,cadUart3);
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	b7 01       	movw	r22, r14
 1b8:	0e 94 5d 01 	call	0x2ba	; 0x2ba <UART_puts>
        //num = atoi(cad);
        //itoa(num,cad,16);

        //UART_gotoxy(0,5,4);
        //UART_setColor(0,BLUE);
        UART_puts(0,"Hex: ");
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	67 e1       	ldi	r22, 0x17	; 23
 1c0:	72 e0       	ldi	r23, 0x02	; 2
 1c2:	0e 94 5d 01 	call	0x2ba	; 0x2ba <UART_puts>
        UART_puts(0,cad);
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	b8 01       	movw	r22, r16
 1ca:	0e 94 5d 01 	call	0x2ba	; 0x2ba <UART_puts>
        //itoa(num,cad,2);

        //UART_gotoxy(0,5,5);
        UART_puts(0,"Bin: ");
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	6d e1       	ldi	r22, 0x1D	; 29
 1d2:	72 e0       	ldi	r23, 0x02	; 2
 1d4:	0e 94 5d 01 	call	0x2ba	; 0x2ba <UART_puts>
        UART_puts(0,cad);
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	b8 01       	movw	r22, r16
 1dc:	0e 94 5d 01 	call	0x2ba	; 0x2ba <UART_puts>
 1e0:	d0 cf       	rjmp	.-96     	; 0x182 <main+0x68>

000001e2 <UART_Ini>:


//incilaisacion del UART


UART_Ini(uint8_t com, uint32_t baudrate, uint8_t size, uint8_t parity, uint8_t stop){
 1e2:	af 92       	push	r10
 1e4:	bf 92       	push	r11
 1e6:	cf 92       	push	r12
 1e8:	df 92       	push	r13
 1ea:	ef 92       	push	r14
 1ec:	0f 93       	push	r16
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	5a 01       	movw	r10, r20
 1f4:	6b 01       	movw	r12, r22
 1f6:	3e 2d       	mov	r19, r14
    uint8_t stop_bit = 0;


    //que dice la lieteratura, debemos establecer la velcdad del baudaje

    UART_reg_t *myUART = UART_offset[com];
 1f8:	e8 2f       	mov	r30, r24
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	ee 0f       	add	r30, r30
 1fe:	ff 1f       	adc	r31, r31
 200:	eb 5d       	subi	r30, 0xDB	; 219
 202:	fd 4f       	sbci	r31, 0xFD	; 253
 204:	c0 81       	ld	r28, Z
 206:	d1 81       	ldd	r29, Z+1	; 0x01
    UBRR_value = (FOSC / (16 * baudrate) ) - 1;

    //calculamos cual seria el bit de paridad
    //con default esta en 0, desactivado

    switch(parity){
 208:	01 30       	cpi	r16, 0x01	; 1
 20a:	19 f0       	breq	.+6      	; 0x212 <UART_Ini+0x30>
 20c:	02 30       	cpi	r16, 0x02	; 2
 20e:	19 f4       	brne	.+6      	; 0x216 <UART_Ini+0x34>
 210:	04 c0       	rjmp	.+8      	; 0x21a <UART_Ini+0x38>
 212:	93 e0       	ldi	r25, 0x03	; 3
 214:	03 c0       	rjmp	.+6      	; 0x21c <UART_Ini+0x3a>
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	01 c0       	rjmp	.+2      	; 0x21c <UART_Ini+0x3a>
 21a:	92 e0       	ldi	r25, 0x02	; 2


    //caracter size

    //por default esta para 5, porque la variabel tiene 0
    switch(size){
 21c:	27 30       	cpi	r18, 0x07	; 7
 21e:	41 f0       	breq	.+16     	; 0x230 <UART_Ini+0x4e>
 220:	28 30       	cpi	r18, 0x08	; 8
 222:	41 f0       	breq	.+16     	; 0x234 <UART_Ini+0x52>
 224:	26 30       	cpi	r18, 0x06	; 6
 226:	11 f4       	brne	.+4      	; 0x22c <UART_Ini+0x4a>
 228:	21 e0       	ldi	r18, 0x01	; 1
 22a:	05 c0       	rjmp	.+10     	; 0x236 <UART_Ini+0x54>
 22c:	20 e0       	ldi	r18, 0x00	; 0
 22e:	03 c0       	rjmp	.+6      	; 0x236 <UART_Ini+0x54>
 230:	22 e0       	ldi	r18, 0x02	; 2
 232:	01 c0       	rjmp	.+2      	; 0x236 <UART_Ini+0x54>

        case 6: cha_size =1; break;

        case 7: cha_size= 2; break;
 234:	23 e0       	ldi	r18, 0x03	; 3
        case 8: cha_size=3;break;
    }

    //registro UCSRB - habilitar RX y TX

    myUART->UCSRB = (1 << RXEN0) | (1<<TXEN0);
 236:	88 e1       	ldi	r24, 0x18	; 24
 238:	8a 83       	std	Y+2, r24	; 0x02

    myUART->UCSRC = (parity_mode << UPM00) | (stop_bit << USBS0) | (cha_size << UCSZ00);
 23a:	89 2f       	mov	r24, r25
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	44 e0       	ldi	r20, 0x04	; 4
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	4a 95       	dec	r20
 246:	e1 f7       	brne	.-8      	; 0x240 <UART_Ini+0x5e>
 248:	60 e0       	ldi	r22, 0x00	; 0
 24a:	70 e0       	ldi	r23, 0x00	; 0
 24c:	31 30       	cpi	r19, 0x01	; 1
 24e:	11 f0       	breq	.+4      	; 0x254 <UART_Ini+0x72>
 250:	61 e0       	ldi	r22, 0x01	; 1
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	93 e0       	ldi	r25, 0x03	; 3
 256:	66 0f       	add	r22, r22
 258:	77 1f       	adc	r23, r23
 25a:	9a 95       	dec	r25
 25c:	e1 f7       	brne	.-8      	; 0x256 <UART_Ini+0x74>
 25e:	86 2b       	or	r24, r22
 260:	22 0f       	add	r18, r18
 262:	28 2b       	or	r18, r24
 264:	29 83       	std	Y+1, r18	; 0x01
    myUART->UBRR = UBRR_value;
 266:	84 e0       	ldi	r24, 0x04	; 4
 268:	aa 0c       	add	r10, r10
 26a:	bb 1c       	adc	r11, r11
 26c:	cc 1c       	adc	r12, r12
 26e:	dd 1c       	adc	r13, r13
 270:	8a 95       	dec	r24
 272:	d1 f7       	brne	.-12     	; 0x268 <UART_Ini+0x86>
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	74 e2       	ldi	r23, 0x24	; 36
 278:	84 ef       	ldi	r24, 0xF4	; 244
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	a6 01       	movw	r20, r12
 27e:	95 01       	movw	r18, r10
 280:	0e 94 1a 02 	call	0x434	; 0x434 <__udivmodsi4>
 284:	21 50       	subi	r18, 0x01	; 1
 286:	30 40       	sbci	r19, 0x00	; 0
 288:	3d 83       	std	Y+5, r19	; 0x05
 28a:	2c 83       	std	Y+4, r18	; 0x04

    myUART->UCSRA = (1 << U2X0);
    */


}
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	0f 91       	pop	r16
 292:	ef 90       	pop	r14
 294:	df 90       	pop	r13
 296:	cf 90       	pop	r12
 298:	bf 90       	pop	r11
 29a:	af 90       	pop	r10
 29c:	08 95       	ret

0000029e <UART_putchar>:

*/

void UART_putchar(uint8_t com, char data){

    UART_reg_t *myUART = UART_offset[com];
 29e:	e8 2f       	mov	r30, r24
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	ee 0f       	add	r30, r30
 2a4:	ff 1f       	adc	r31, r31
 2a6:	eb 5d       	subi	r30, 0xDB	; 219
 2a8:	fd 4f       	sbci	r31, 0xFD	; 253
 2aa:	01 90       	ld	r0, Z+
 2ac:	f0 81       	ld	r31, Z
 2ae:	e0 2d       	mov	r30, r0

    porque en la funcion se niega?
    se esta negando porque si UDREn =0 quiere decri que hay datos dentro del buffer por lo que negamos (!) es para esperar
    hasta que el buffer este vacio por lo que esta vacio pasa la condicion y manda lo que hay en UDR al pin TX
    */
    while (!(myUART->UCSRA & (1 << UDRE0)));
 2b0:	80 81       	ld	r24, Z
 2b2:	85 ff       	sbrs	r24, 5
 2b4:	fd cf       	rjmp	.-6      	; 0x2b0 <UART_putchar+0x12>

    myUART->UDR = data;
 2b6:	66 83       	std	Z+6, r22	; 0x06
}
 2b8:	08 95       	ret

000002ba <UART_puts>:


void UART_puts(uint8_t com, char *str){
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	eb 01       	movw	r28, r22

*/

void UART_putchar(uint8_t com, char data){

    UART_reg_t *myUART = UART_offset[com];
 2c0:	e8 2f       	mov	r30, r24
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	ee 0f       	add	r30, r30
 2c6:	ff 1f       	adc	r31, r31
 2c8:	eb 5d       	subi	r30, 0xDB	; 219
 2ca:	fd 4f       	sbci	r31, 0xFD	; 253
 2cc:	08 c0       	rjmp	.+16     	; 0x2de <UART_puts+0x24>
 2ce:	a0 81       	ld	r26, Z
 2d0:	b1 81       	ldd	r27, Z+1	; 0x01

    porque en la funcion se niega?
    se esta negando porque si UDREn =0 quiere decri que hay datos dentro del buffer por lo que negamos (!) es para esperar
    hasta que el buffer este vacio por lo que esta vacio pasa la condicion y manda lo que hay en UDR al pin TX
    */
    while (!(myUART->UCSRA & (1 << UDRE0)));
 2d2:	8c 91       	ld	r24, X
 2d4:	85 ff       	sbrs	r24, 5
 2d6:	fd cf       	rjmp	.-6      	; 0x2d2 <UART_puts+0x18>

    myUART->UDR = data;
 2d8:	16 96       	adiw	r26, 0x06	; 6
 2da:	9c 93       	st	X, r25
    por lo que mandmos llamar a putchar tantas veces hata que se llegue al caracter nulo
    */
    while(*str != '\0'){

        UART_putchar(com,*str);
        str++;
 2dc:	21 96       	adiw	r28, 0x01	; 1
    /*
    con el caracter nulo '/0',

    por lo que mandmos llamar a putchar tantas veces hata que se llegue al caracter nulo
    */
    while(*str != '\0'){
 2de:	98 81       	ld	r25, Y
 2e0:	99 23       	and	r25, r25
 2e2:	a9 f7       	brne	.-22     	; 0x2ce <UART_puts+0x14>

        UART_putchar(com,*str);
        str++;
    }
}
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <UART_available>:

*/

uint8_t UART_available(uint8_t com)
{
    UART_reg_t *myUART = UART_offset[com];
 2ea:	e8 2f       	mov	r30, r24
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	ee 0f       	add	r30, r30
 2f0:	ff 1f       	adc	r31, r31
 2f2:	eb 5d       	subi	r30, 0xDB	; 219
 2f4:	fd 4f       	sbci	r31, 0xFD	; 253
 2f6:	01 90       	ld	r0, Z+
 2f8:	f0 81       	ld	r31, Z
 2fa:	e0 2d       	mov	r30, r0
        RXC0 es la bandera que indica si la recepcion se ha completado
        RXC0 esta en 1 (RCX0=1) si hya datos sin leer dentro del buffer
        (RCX0 = 0) si el buffer esta vacio
    */

    return (myUART->UCSRA & (1<<RXC0));
 2fc:	80 81       	ld	r24, Z
}
 2fe:	80 78       	andi	r24, 0x80	; 128
 300:	08 95       	ret

00000302 <UART_getchar>:


    /*
    lo que llegue, lo pasamos a UDR
    */
    UART_reg_t *myUART = UART_offset[com];
 302:	e8 2f       	mov	r30, r24
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	ee 0f       	add	r30, r30
 308:	ff 1f       	adc	r31, r31
 30a:	eb 5d       	subi	r30, 0xDB	; 219
 30c:	fd 4f       	sbci	r31, 0xFD	; 253
 30e:	01 90       	ld	r0, Z+
 310:	f0 81       	ld	r31, Z
 312:	e0 2d       	mov	r30, r0
        RXC0 es la bandera que indica si la recepcion se ha completado
        RXC0 esta en 1 (RCX0=1) si hya datos sin leer dentro del buffer
        (RCX0 = 0) si el buffer esta vacio
    */

    return (myUART->UCSRA & (1<<RXC0));
 314:	80 81       	ld	r24, Z
    /*
    lo que llegue, lo pasamos a UDR
    */
    UART_reg_t *myUART = UART_offset[com];
    //este va a eserar hasa que se llene el buffer y entonces mandara la infromacion a UDR
    while(!(UART_available(com)));
 316:	87 ff       	sbrs	r24, 7
 318:	fd cf       	rjmp	.-6      	; 0x314 <UART_getchar+0x12>
    return myUART->UDR;
}
 31a:	86 81       	ldd	r24, Z+6	; 0x06
 31c:	08 95       	ret

0000031e <UART_gets>:

void UART_gets(uint8_t com, char *str){
 31e:	1f 93       	push	r17
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	eb 01       	movw	r28, r22
 326:	40 e0       	ldi	r20, 0x00	; 0


    /*
    lo que llegue, lo pasamos a UDR
    */
    UART_reg_t *myUART = UART_offset[com];
 328:	28 2f       	mov	r18, r24
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	d9 01       	movw	r26, r18
 32e:	aa 0f       	add	r26, r26
 330:	bb 1f       	adc	r27, r27
 332:	ab 5d       	subi	r26, 0xDB	; 219
 334:	bd 4f       	sbci	r27, 0xFD	; 253
    se esta negando porque si UDREn =0 quiere decri que hay datos dentro del buffer por lo que negamos (!) es para esperar
    hasta que el buffer este vacio por lo que esta vacio pasa la condicion y manda lo que hay en UDR al pin TX
    */
    while (!(myUART->UCSRA & (1 << UDRE0)));

    myUART->UDR = data;
 336:	58 e0       	ldi	r21, 0x08	; 8

        }

        if(c == '.'){

            str[i++] = "\0";
 338:	10 e2       	ldi	r17, 0x20	; 32
 33a:	63 e2       	ldi	r22, 0x23	; 35
 33c:	72 e0       	ldi	r23, 0x02	; 2


    /*
    lo que llegue, lo pasamos a UDR
    */
    UART_reg_t *myUART = UART_offset[com];
 33e:	ed 91       	ld	r30, X+
 340:	fc 91       	ld	r31, X
 342:	11 97       	sbiw	r26, 0x01	; 1
        RXC0 es la bandera que indica si la recepcion se ha completado
        RXC0 esta en 1 (RCX0=1) si hya datos sin leer dentro del buffer
        (RCX0 = 0) si el buffer esta vacio
    */

    return (myUART->UCSRA & (1<<RXC0));
 344:	80 81       	ld	r24, Z
    /*
    lo que llegue, lo pasamos a UDR
    */
    UART_reg_t *myUART = UART_offset[com];
    //este va a eserar hasa que se llene el buffer y entonces mandara la infromacion a UDR
    while(!(UART_available(com)));
 346:	87 ff       	sbrs	r24, 7
 348:	fd cf       	rjmp	.-6      	; 0x344 <UART_gets+0x26>
    return myUART->UDR;
 34a:	96 81       	ldd	r25, Z+6	; 0x06

        -que entrara cunado el usuario ya no quiere seguri captiradno
        si el suario da (enter) quiere decir que ya no quiere capturar mas.
        */

        if(c == '\n' || c == '\r'){
 34c:	9a 30       	cpi	r25, 0x0A	; 10
 34e:	11 f0       	breq	.+4      	; 0x354 <UART_gets+0x36>
 350:	9d 30       	cpi	r25, 0x0D	; 13
 352:	11 f5       	brne	.+68     	; 0x398 <UART_gets+0x7a>

            if(i >0){
 354:	44 23       	and	r20, r20
 356:	99 f3       	breq	.-26     	; 0x33e <UART_gets+0x20>
                //para finalizar debe haber almenos un dato razonable, en este caso
                //algun digito decimal que guardar
                str[i] =  '\0';
 358:	c4 0f       	add	r28, r20
 35a:	d1 1d       	adc	r29, r1
 35c:	18 82       	st	Y, r1

*/

void UART_putchar(uint8_t com, char data){

    UART_reg_t *myUART = UART_offset[com];
 35e:	f9 01       	movw	r30, r18
 360:	ee 0f       	add	r30, r30
 362:	ff 1f       	adc	r31, r31
 364:	eb 5d       	subi	r30, 0xDB	; 219
 366:	fd 4f       	sbci	r31, 0xFD	; 253
 368:	01 90       	ld	r0, Z+
 36a:	f0 81       	ld	r31, Z
 36c:	e0 2d       	mov	r30, r0

    porque en la funcion se niega?
    se esta negando porque si UDREn =0 quiere decri que hay datos dentro del buffer por lo que negamos (!) es para esperar
    hasta que el buffer este vacio por lo que esta vacio pasa la condicion y manda lo que hay en UDR al pin TX
    */
    while (!(myUART->UCSRA & (1 << UDRE0)));
 36e:	80 81       	ld	r24, Z
 370:	85 ff       	sbrs	r24, 5
 372:	fd cf       	rjmp	.-6      	; 0x36e <UART_gets+0x50>

    myUART->UDR = data;
 374:	8a e0       	ldi	r24, 0x0A	; 10
 376:	86 83       	std	Z+6, r24	; 0x06

*/

void UART_putchar(uint8_t com, char data){

    UART_reg_t *myUART = UART_offset[com];
 378:	22 0f       	add	r18, r18
 37a:	33 1f       	adc	r19, r19
 37c:	2b 5d       	subi	r18, 0xDB	; 219
 37e:	3d 4f       	sbci	r19, 0xFD	; 253
 380:	d9 01       	movw	r26, r18
 382:	ed 91       	ld	r30, X+
 384:	fc 91       	ld	r31, X

    porque en la funcion se niega?
    se esta negando porque si UDREn =0 quiere decri que hay datos dentro del buffer por lo que negamos (!) es para esperar
    hasta que el buffer este vacio por lo que esta vacio pasa la condicion y manda lo que hay en UDR al pin TX
    */
    while (!(myUART->UCSRA & (1 << UDRE0)));
 386:	80 81       	ld	r24, Z
 388:	85 ff       	sbrs	r24, 5
 38a:	fd cf       	rjmp	.-6      	; 0x386 <UART_gets+0x68>

    myUART->UDR = data;
 38c:	8d e0       	ldi	r24, 0x0D	; 13
 38e:	86 83       	std	Z+6, r24	; 0x06
            UART_putchar(com,'\b');
        }

    }

}
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	1f 91       	pop	r17
 396:	08 95       	ret
            //el entido del programa
            continue;
        }

        //borrar los datos
        if(c == '\b'){
 398:	98 30       	cpi	r25, 0x08	; 8
 39a:	e1 f4       	brne	.+56     	; 0x3d4 <UART_gets+0xb6>

            //para borrar algo antes debe haber algo que borrar
            if(i > 0){
 39c:	44 23       	and	r20, r20
 39e:	79 f2       	breq	.-98     	; 0x33e <UART_gets+0x20>
                str[--i]= '\0';
 3a0:	41 50       	subi	r20, 0x01	; 1
 3a2:	fe 01       	movw	r30, r28
 3a4:	e4 0f       	add	r30, r20
 3a6:	f1 1d       	adc	r31, r1
 3a8:	10 82       	st	Z, r1

*/

void UART_putchar(uint8_t com, char data){

    UART_reg_t *myUART = UART_offset[com];
 3aa:	ed 91       	ld	r30, X+
 3ac:	fc 91       	ld	r31, X
 3ae:	11 97       	sbiw	r26, 0x01	; 1

    porque en la funcion se niega?
    se esta negando porque si UDREn =0 quiere decri que hay datos dentro del buffer por lo que negamos (!) es para esperar
    hasta que el buffer este vacio por lo que esta vacio pasa la condicion y manda lo que hay en UDR al pin TX
    */
    while (!(myUART->UCSRA & (1 << UDRE0)));
 3b0:	80 81       	ld	r24, Z
 3b2:	85 ff       	sbrs	r24, 5
 3b4:	fd cf       	rjmp	.-6      	; 0x3b0 <UART_gets+0x92>

    myUART->UDR = data;
 3b6:	56 83       	std	Z+6, r21	; 0x06

*/

void UART_putchar(uint8_t com, char data){

    UART_reg_t *myUART = UART_offset[com];
 3b8:	ed 91       	ld	r30, X+
 3ba:	fc 91       	ld	r31, X
 3bc:	11 97       	sbiw	r26, 0x01	; 1

    porque en la funcion se niega?
    se esta negando porque si UDREn =0 quiere decri que hay datos dentro del buffer por lo que negamos (!) es para esperar
    hasta que el buffer este vacio por lo que esta vacio pasa la condicion y manda lo que hay en UDR al pin TX
    */
    while (!(myUART->UCSRA & (1 << UDRE0)));
 3be:	80 81       	ld	r24, Z
 3c0:	85 ff       	sbrs	r24, 5
 3c2:	fd cf       	rjmp	.-6      	; 0x3be <UART_gets+0xa0>

    myUART->UDR = data;
 3c4:	16 83       	std	Z+6, r17	; 0x06

*/

void UART_putchar(uint8_t com, char data){

    UART_reg_t *myUART = UART_offset[com];
 3c6:	ed 91       	ld	r30, X+
 3c8:	fc 91       	ld	r31, X
 3ca:	11 97       	sbiw	r26, 0x01	; 1

    porque en la funcion se niega?
    se esta negando porque si UDREn =0 quiere decri que hay datos dentro del buffer por lo que negamos (!) es para esperar
    hasta que el buffer este vacio por lo que esta vacio pasa la condicion y manda lo que hay en UDR al pin TX
    */
    while (!(myUART->UCSRA & (1 << UDRE0)));
 3cc:	80 81       	ld	r24, Z
 3ce:	85 ff       	sbrs	r24, 5
 3d0:	fd cf       	rjmp	.-6      	; 0x3cc <UART_gets+0xae>
 3d2:	2e c0       	rjmp	.+92     	; 0x430 <UART_gets+0x112>

            continue;

        }

        if(c == '.'){
 3d4:	9e 32       	cpi	r25, 0x2E	; 46
 3d6:	29 f4       	brne	.+10     	; 0x3e2 <UART_gets+0xc4>

            str[i++] = "\0";
 3d8:	fe 01       	movw	r30, r28
 3da:	e4 0f       	add	r30, r20
 3dc:	f1 1d       	adc	r31, r1
 3de:	60 83       	st	Z, r22
 3e0:	4f 5f       	subi	r20, 0xFF	; 255

*/

void UART_putchar(uint8_t com, char data){

    UART_reg_t *myUART = UART_offset[com];
 3e2:	ed 91       	ld	r30, X+
 3e4:	fc 91       	ld	r31, X
 3e6:	11 97       	sbiw	r26, 0x01	; 1

    porque en la funcion se niega?
    se esta negando porque si UDREn =0 quiere decri que hay datos dentro del buffer por lo que negamos (!) es para esperar
    hasta que el buffer este vacio por lo que esta vacio pasa la condicion y manda lo que hay en UDR al pin TX
    */
    while (!(myUART->UCSRA & (1 << UDRE0)));
 3e8:	80 81       	ld	r24, Z
 3ea:	85 ff       	sbrs	r24, 5
 3ec:	fd cf       	rjmp	.-6      	; 0x3e8 <UART_gets+0xca>

    myUART->UDR = data;
 3ee:	96 83       	std	Z+6, r25	; 0x06
 3f0:	e4 2f       	mov	r30, r20
 3f2:	f0 e0       	ldi	r31, 0x00	; 0


        UART_putchar(com,c);

        //canidad defindio en el archivo .h
        if(i < cantidad){
 3f4:	44 31       	cpi	r20, 0x14	; 20
 3f6:	28 f4       	brcc	.+10     	; 0x402 <UART_gets+0xe4>
            str[i++] = c;
 3f8:	ec 0f       	add	r30, r28
 3fa:	fd 1f       	adc	r31, r29
 3fc:	90 83       	st	Z, r25
 3fe:	4f 5f       	subi	r20, 0xFF	; 255
 400:	9e cf       	rjmp	.-196    	; 0x33e <UART_gets+0x20>
        }
        else{
            //este hara el efecto de que ya no puede capturar mas

            str[i] = '\0';
 402:	ec 0f       	add	r30, r28
 404:	fd 1f       	adc	r31, r29
 406:	10 82       	st	Z, r1

*/

void UART_putchar(uint8_t com, char data){

    UART_reg_t *myUART = UART_offset[com];
 408:	ed 91       	ld	r30, X+
 40a:	fc 91       	ld	r31, X
 40c:	11 97       	sbiw	r26, 0x01	; 1

    porque en la funcion se niega?
    se esta negando porque si UDREn =0 quiere decri que hay datos dentro del buffer por lo que negamos (!) es para esperar
    hasta que el buffer este vacio por lo que esta vacio pasa la condicion y manda lo que hay en UDR al pin TX
    */
    while (!(myUART->UCSRA & (1 << UDRE0)));
 40e:	80 81       	ld	r24, Z
 410:	85 ff       	sbrs	r24, 5
 412:	fd cf       	rjmp	.-6      	; 0x40e <UART_gets+0xf0>

    myUART->UDR = data;
 414:	56 83       	std	Z+6, r21	; 0x06

*/

void UART_putchar(uint8_t com, char data){

    UART_reg_t *myUART = UART_offset[com];
 416:	ed 91       	ld	r30, X+
 418:	fc 91       	ld	r31, X
 41a:	11 97       	sbiw	r26, 0x01	; 1

    porque en la funcion se niega?
    se esta negando porque si UDREn =0 quiere decri que hay datos dentro del buffer por lo que negamos (!) es para esperar
    hasta que el buffer este vacio por lo que esta vacio pasa la condicion y manda lo que hay en UDR al pin TX
    */
    while (!(myUART->UCSRA & (1 << UDRE0)));
 41c:	80 81       	ld	r24, Z
 41e:	85 ff       	sbrs	r24, 5
 420:	fd cf       	rjmp	.-6      	; 0x41c <UART_gets+0xfe>

    myUART->UDR = data;
 422:	16 83       	std	Z+6, r17	; 0x06

*/

void UART_putchar(uint8_t com, char data){

    UART_reg_t *myUART = UART_offset[com];
 424:	ed 91       	ld	r30, X+
 426:	fc 91       	ld	r31, X
 428:	11 97       	sbiw	r26, 0x01	; 1

    porque en la funcion se niega?
    se esta negando porque si UDREn =0 quiere decri que hay datos dentro del buffer por lo que negamos (!) es para esperar
    hasta que el buffer este vacio por lo que esta vacio pasa la condicion y manda lo que hay en UDR al pin TX
    */
    while (!(myUART->UCSRA & (1 << UDRE0)));
 42a:	80 81       	ld	r24, Z
 42c:	85 ff       	sbrs	r24, 5
 42e:	fd cf       	rjmp	.-6      	; 0x42a <UART_gets+0x10c>

    myUART->UDR = data;
 430:	56 83       	std	Z+6, r21	; 0x06
 432:	85 cf       	rjmp	.-246    	; 0x33e <UART_gets+0x20>

00000434 <__udivmodsi4>:
 434:	a1 e2       	ldi	r26, 0x21	; 33
 436:	1a 2e       	mov	r1, r26
 438:	aa 1b       	sub	r26, r26
 43a:	bb 1b       	sub	r27, r27
 43c:	fd 01       	movw	r30, r26
 43e:	0d c0       	rjmp	.+26     	; 0x45a <__udivmodsi4_ep>

00000440 <__udivmodsi4_loop>:
 440:	aa 1f       	adc	r26, r26
 442:	bb 1f       	adc	r27, r27
 444:	ee 1f       	adc	r30, r30
 446:	ff 1f       	adc	r31, r31
 448:	a2 17       	cp	r26, r18
 44a:	b3 07       	cpc	r27, r19
 44c:	e4 07       	cpc	r30, r20
 44e:	f5 07       	cpc	r31, r21
 450:	20 f0       	brcs	.+8      	; 0x45a <__udivmodsi4_ep>
 452:	a2 1b       	sub	r26, r18
 454:	b3 0b       	sbc	r27, r19
 456:	e4 0b       	sbc	r30, r20
 458:	f5 0b       	sbc	r31, r21

0000045a <__udivmodsi4_ep>:
 45a:	66 1f       	adc	r22, r22
 45c:	77 1f       	adc	r23, r23
 45e:	88 1f       	adc	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	1a 94       	dec	r1
 464:	69 f7       	brne	.-38     	; 0x440 <__udivmodsi4_loop>
 466:	60 95       	com	r22
 468:	70 95       	com	r23
 46a:	80 95       	com	r24
 46c:	90 95       	com	r25
 46e:	9b 01       	movw	r18, r22
 470:	ac 01       	movw	r20, r24
 472:	bd 01       	movw	r22, r26
 474:	cf 01       	movw	r24, r30
 476:	08 95       	ret

00000478 <_exit>:
 478:	f8 94       	cli

0000047a <__stop_program>:
 47a:	ff cf       	rjmp	.-2      	; 0x47a <__stop_program>
